{
 "build_module" : "",
 "items" : [
  {
   "# Gtk.SourceSearchContext searchcontext" : "null",
   "# JsRender.JsRender file" : "null",
   "# JsRender.Node node" : "null",
   "# Xcls_MainWindow window" : "null",
   "# bool dirty" : false,
   "# bool pos" : false,
   "# int last_search_end" : 0,
   "# int pos_root_x" : "",
   "# int pos_root_y" : "",
   "# string activeEditor" : "\"\"",
   "# string key" : "\"\"",
   "# string ptype" : "\"\"",
   "$ xns" : "Gtk",
   "@ void save" : "()",
   "Gtk.PositionType position" : "Gtk.PositionType.RIGHT",
   "Xcls_MainWindow mainwindow" : "",
   "bool active" : false,
   "bool hexpand" : false,
   "bool modal" : true,
   "id" : "PopoverEditor",
   "int height_request" : 800,
   "int width_request" : 900,
   "string prop_or_listener" : "\"\"",
   "xtype" : "Popover",
   "| bool saveContents" : [
    "  ()  {",
    "    ",
    "    ",
    "    if (_this.file == null) {",
    "        return true;",
    "    }",
    "    ",
    "    ",
    "   ",
    "   ",
    "     ",
    "     var str = _this.buffer.toString();",
    "     ",
    "     _this.buffer.checkSyntax();",
    "     ",
    "     ",
    "     ",
    "     // LeftPanel.model.changed(  str , false);",
    "     _this.dirty = false;",
    "     _this.save_button.el.sensitive = false;",
    "     ",
    "    // find the text for the node..",
    "    if (_this.file.xtype != \"PlainFile\") {",
    "        if (ptype == \"listener\") {",
    "            this.node.listeners.set(key,str);",
    "        ",
    "        } else {",
    "             this.node.props.set(key,str);",
    "        }",
    "    } else {",
    "        _this.file.setSource(  str );",
    "     }",
    "    ",
    "    // call the signal..",
    "    this.save();",
    "    ",
    "    return true;",
    "",
    "} "
   ],
   "| int search" : [
    "(string txt) {",
    "",
    "\tvar s = new Gtk.SourceSearchSettings();",
    "\t",
    "\tthis.searchcontext = new Gtk.SourceSearchContext(this.buffer.el,s);",
    "\tthis.searchcontext .set_highlight(true);",
    "\ts.set_search_text(txt);",
    "\tGtk.TextIter beg, st,en;",
    "\t ",
    "\tthis.buffer.el.get_start_iter(out beg);",
    "\tthis.searchcontext.forward(beg, out st, out en);",
    "\tthis.last_search_end = 0;",
    "\t",
    "\treturn this.searchcontext.get_occurrences_count();",
    " ",
    "}",
    ""
   ],
   "| void forwardSearch" : [
    "(bool change_focus) {",
    "",
    "\tif (this.searchcontext == null) {",
    "\t\treturn;",
    "\t}",
    "\t",
    "\tGtk.TextIter beg, st,en;",
    "\t ",
    "\tthis.buffer.el.get_iter_at_offset(out beg, this.last_search_end);",
    "\tif (!this.searchcontext.forward(beg, out st, out en)) {",
    "\t",
    "\t\tthis.last_search_end = 0;",
    "\t} else {",
    "\t\tthis.last_search_end = en.get_offset();",
    "\t\tif (change_focus) {",
    "\t\t\tthis.view.el.grab_focus();",
    "\t\t}",
    "\t\tthis.buffer.el.place_cursor(st);",
    "\t\tthis.view.el.scroll_to_iter(st,  0.1f, true, 0.0f, 0.5f);",
    "\t}",
    "",
    "}",
    ""
   ],
   "| void hide" : [
    "() {",
    "\tthis.prop_or_listener = \"\";",
    "\tthis.el.hide();",
    "}",
    ""
   ],
   "| void scroll_to_line" : [
    "(int line) {",
    "",
    "\tGLib.Timeout.add(500, () => {",
    "   ",
    "\t\tvar buf = this.view.el.get_buffer();",
    "",
    "\t\tvar sbuf = (Gtk.SourceBuffer) buf;",
    "",
    "",
    "\t\tGtk.TextIter iter;   ",
    "\t\tsbuf.get_iter_at_line(out iter,  line);",
    "\t\tthis.view.el.scroll_to_iter(iter,  0.1f, true, 0.0f, 0.5f);",
    "\t\treturn false;",
    "\t});   ",
    "}",
    ""
   ],
   "| void show" : [
    "( Gtk.Widget onbtn, JsRender.JsRender file, JsRender.Node? node, string ptype, string key  )",
    "{",
    "    this.file = file;    ",
    "    this.ptype = \"\";",
    "    this.key  = \"\";",
    "    this.node = null;",
    "\tthis.searchcontext = null;",
    "    ",
    "    if (file.xtype != \"PlainFile\") {",
    "    ",
    "        this.ptype = ptype;",
    "        this.key  = key;",
    "        this.node = node;",
    "         string val = \"\";",
    "        // find the text for the node..",
    "        if (ptype == \"listener\") {",
    "            val = node.listeners.get(key);",
    "        ",
    "        } else {",
    "            val = node.props.get(key);",
    "        }",
    "        this.view.load(val);",
    "        this.key_edit.el.show();",
    "        this.key_edit.el.text = key;  ",
    "    ",
    "    } else {",
    "        this.view.load(        file.toSource() );",
    "        this.key_edit.el.hide();",
    "    }",
    "",
    "    ",
    "    // set size up...",
    "    ",
    "    ",
    "    int w,h;",
    "    this.mainwindow.el.get_size(out w, out h);",
    "    ",
    "    // left tree = 250, editor area = 500?",
    "    ",
    "    // min 450?",
    "\t// max hieght ...",
    "    this.el.set_size_request( 250, h);",
    "",
    "    ",
    "",
    "    if (this.el.relative_to == null) {",
    "        this.el.set_relative_to(onbtn);",
    "    }",
    "    this.el.show_all();",
    "   ",
    "    while(Gtk.events_pending()) { ",
    "            Gtk.main_iteration();",
    "    }        ",
    " //   this.hpane.el.set_position( 0);",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "PopoverEditor",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/PopoverEditor.bjs",
 "permname" : "",
 "title" : ""
}