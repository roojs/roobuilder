{
 "build_module" : "builder",
 "gen_extended" : false,
 "items" : [
  {
   "# Project.Project project" : "null",
   "# WindowState windowstate" : "",
   "$ type" : "Gtk.WindowType.TOPLEVEL",
   "$ xns" : "Gtk",
   "* ctor" : "new Gtk.ApplicationWindow(BuilderApplication.singleton({}))",
   "* init" : [
    " ",
    " ",
    "     this.el.set_icon_name(\"roobuilder\");",
    "     ",
    "   ",
    "     ",
    " "
   ],
   "border_width" : 0,
   "default_height" : 850,
   "default_width" : 1200,
   "id" : "MainWindow",
   "items" : [
    {
     "$ string title" : "\"Application Builder\"",
     "$ xns" : "Gtk",
     "* pack" : "set_titlebar",
     "bool show_close_button" : true,
     "id" : "headerbar",
     "items" : [
      {
       "$ xns" : "Gtk",
       "* pack" : "pack_start",
       "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
       "items" : [
        {
         "# Gee.ArrayList<Gtk.Widget> mitems" : "",
         "$ Gtk.Align halign" : "Gtk.Align.START",
         "$ xns" : "Gtk",
         "* init" : [
          "{",
          "\tthis.mitems = new Gee.ArrayList<Gtk.Button>();",
          "}",
          ""
         ],
         "id" : "windowbtn",
         "int margin_end" : 4,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : false,
           "id" : "windowspopup",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "set_child",
             "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
             "id" : "popover_menu",
             "int spacing" : 0,
             "items" : [
              {
               "$ xns" : "Gtk",
               "* pack" : "append",
               "items" : [
                {
                 "$ Gtk.ShortcutScope scope" : "Gtk.ShortcutScope.GLOBAL",
                 "$ xns" : "Gtk",
                 "* init" : [
                  "{",
                  "\tthis.el.add_shortcut(",
                  "\t\tnew Gtk.Shortcut(",
                  "\t\t\tnew Gtk.KeyvalTrigger(Gdk.Key.N,Gdk.ModifierType.CONTROL_MASK),",
                  "\t\t\tnew Gtk.SignalAction(\"clicked\")",
                  "\t\t)",
                  "\t);",
                  "}",
                  ""
                 ],
                 "xtype" : "ShortcutController"
                }
               ],
               "listeners" : {
                "clicked" : [
                 "( ) => {",
                 "\t_this.windowspopup.el.hide();",
                 "\t_this.windowstate.showPopoverFiles(_this.windowbtn.el, _this.project, true);",
                 "}",
                 ""
                ]
               },
               "string label" : "New Window",
               "xtype" : "Button"
              },
              {
               "$ Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
               "$ xns" : "Gtk",
               "* pack" : "append",
               "xtype" : "Separator"
              }
             ],
             "xtype" : "Box"
            }
           ],
           "xtype" : "Popover"
          },
          {
           "$ xns" : "Gtk",
           "* prop" : "child",
           "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
           "items" : [
            {
             "$ xns" : "Gtk",
             "int margin_start" : 4,
             "string icon_name" : "window-new",
             "xtype" : "Image"
            },
            {
             "$ xns" : "Gtk",
             "string label" : "Windows (Add/List)",
             "xtype" : "Label"
            }
           ],
           "xtype" : "Box"
          }
         ],
         "listeners" : {
          "clicked" : [
           "( ) => {",
           "\tthis.updateMenu();",
           "",
           "\t _this.windowspopup.el.set_parent(this.el);",
           "",
           "\t _this.windowspopup.el.set_position(Gtk.PositionType.BOTTOM); ",
           "\t _this.windowspopup.el.popup(); ",
           "}",
           ""
          ]
         },
         "xtype" : "Button",
         "| void updateMenu" : [
          "() {",
          "\t foreach(var m in  this.mitems) {",
          "\t \t _this.popover_menu.el.remove(m);",
          "\t }",
          "\t this.mitems.clear();",
          "\t",
          "\t BuilderApplication.windows.sort((a,b) => {",
          "\t \tif (a.windowstate == null ||",
          " \t\t\t a.windowstate.file == null || ",
          " \t\t\t b.windowstate == null ||",
          " \t\t\t b.windowstate.file == null",
          " \t\t\t ) { ",
          " \t\t\treturn 0;",
          "\t\t}",
          "",
          "\t \tvar ap = a.windowstate.file.project.name;",
          "\t \tvar bp = b.windowstate.file.project.name;",
          "\t \t",
          "",
          "\t \t",
          "\t \tif (ap != bp) {",
          "\t \t\treturn ap.collate(bp);",
          "\t \t}",
          "\t \tvar af =  a.windowstate.file == null ? \"\" : a.windowstate.file.getTitle();",
          "\t \tvar bf = b.windowstate.file == null ? \"\" : b.windowstate.file.getTitle();\t \t",
          "\t\treturn af.collate(bf);",
          "\t ",
          "\t });",
          "\t ",
          "\t var p = \"\";",
          "\t foreach(var w in BuilderApplication.windows) {",
          "\t \tvar wid = BuilderApplication.windows.index_of(w);",
          "\t \t// fixme find a better way to display this.",
          " \t\tif (w.windowstate == null ||",
          " \t\t\t w.windowstate.file == null || ",
          " \t\t\t _this.windowstate == null ||",
          " \t\t\t _this.windowstate.file == null",
          " \t\t\t ) { ",
          " \t\t\tcontinue;",
          "\t\t}",
          "\t \t// should not happen...",
          "\t \tif (w.windowstate.file.path == _this.windowstate.file.path) {",
          "\t \t\tcontinue;",
          " \t\t}",
          " \t\tif (w.windowstate.file.project.name != p || p != \"\") {",
          " \t\t\tvar ms = new Gtk.Separator(Gtk.Orientation.HORIZONTAL);",
          " \t\t\t_this.popover_menu.el.append(ms);",
          "\t\t \tms.show();",
          "\t\t \tthis.mitems.add(ms);",
          " \t\t}",
          " \t\t",
          " \t\tp = w.windowstate.file.project.name;",
          " \t\t",
          "",
          " \t\tGLib.debug(\"add menuitem %s\", w.windowstate.file.path);",
          " \t\t",
          " \t\t",
          " \t\t",
          "\t \tvar m = new Gtk.Button.with_label(",
          "\t\t \tw.windowstate.file.project.name + \" : \" + w.windowstate.file.relpath",
          "\t \t);",
          "\t \tm.halign = Gtk.Align.START;",
          "\t \t",
          "\t \t",
          "\t \t//w.windowstate.file.path);",
          "\t \tm.clicked.connect(() => {",
          "\t\t \t_this.windowspopup.el.hide();",
          "\t \t\t BuilderApplication.windows.get(wid).el.present();",
          "\t \t});",
          "\t \t_this.popover_menu.el.append(m);",
          "\t \t//m.show();",
          "\t \tthis.mitems.add(m);",
          "\t }",
          "}"
         ]
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "append",
         "bool always_show_image" : true,
         "id" : "open_projects_btn",
         "listeners" : {
          "clicked" : [
           "  ( ) => {",
           "  \t_this.windowstate.showPopoverFiles(this.el, _this.project, false);",
           "}"
          ]
         },
         "string icon_name" : "system-file-manager",
         "string label" : "Files / Projects",
         "tooltop_text" : "\"Open File\"",
         "xtype" : "Button"
        }
       ],
       "xtype" : "Box"
      }
     ],
     "xtype" : "HeaderBar"
    },
    {
     "$ xns" : "Gtk",
     "* pack" : "set_child",
     "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
     "bool homogeneous" : false,
     "bool vexpand" : true,
     "id" : "vbox",
     "xtype" : "Box"
    }
   ],
   "listeners" : {
    "close_request" : [
     "( ) => {",
     "\t Resources.singleton().disconnect(_this.statusbar.handler_id);",
     "\t ",
     "\t ",
     "\t this.windowstate.file.getLanguageServer().document_close(",
     "\t \tthis.windowstate.file",
     " \t);",
     "\t ",
     "\t BuilderApplication.removeWindow(this);",
     "\t ",
     "\t if (BuilderApplication.windows.size  < 1) {",
     "\t\tthis.windowstate.file.getLanguageServer().exit();",
     "\t\tBuilderApplication.singleton(  null ).quit();",
     "\t }",
     "\treturn true;",
     "}",
     ""
    ],
    "hide" : [
     "() =>  {",
     " ",
     " ",
     "",
     "}"
    ],
    "show" : [
     "  ( ) => {",
     "    // hide the file editing..",
     "   ",
     "    //this.hideViewEditing();",
     "    // this is updated by windowstate - we try and fill it in..",
     "     _this.statusbar.el.hide();",
     "     //_this.statusbar_errors.el.hide();",
     "    //_this.statusbar_warnings.el.hide();",
     "    //_this.statusbar_depricated.el.hide();",
     "    _this.statusbar_compile_spinner.el.hide();",
     "  ",
     "    Resources.singleton().checkResources();",
     "    ",
     "  ",
     "",
     "}"
    ]
   },
   "string title" : "Roo Application Builder",
   "xtype" : "ApplicationWindow",
   "| void initChildren" : [
    " () {",
    "    // this needs putting in a better place..",
    "    this.windowstate = new WindowState(this);",
    "     ",
    "",
    " ",
    "",
    "    ",
    "",
    "",
    "",
    "}",
    ""
   ],
   "| void openNewWindow" : [
    "() {",
    " ",
    "    var w = new Xcls_MainWindow();",
    "    w.ref();",
    "\tBuilderApplication.addWindow(w);",
    "    w.el.show();",
    "    w.initChildren();",
    "    w.windowstate.showPopoverFiles(w.open_projects_btn.el, _this.project, false);",
    "     ",
    "}",
    ""
   ],
   "| void setTitle" : [
    " () {",
    "    if (_this.windowstate.project == null || ",
    "\t    _this.windowstate.file == null",
    "    ) {",
    "    \tthis.el.set_title(\"Select File\");",
    "    \treturn;",
    "\t}",
    "    _this.el.set_title(",
    "    \t_this.windowstate.project.name + ",
    "    \t\" - \" +",
    "\t\t_this.windowstate.file.relpath);",
    "} "
   ],
   "| void show" : [
    "() {",
    "   ",
    "    this.el.show();",
    "    if (this.windowstate.file  == null) {",
    "    \tthis.windowstate.showPopoverFiles(this.open_projects_btn.el, null, false);",
    "    }",
    "}"
   ],
   "| void updateErrors" : [
    "() {",
    "",
    "",
    " \tGLib.debug(\"updateErrors\");",
    "\t",
    "\tvar pr = this.windowstate.project.getErrors(\"ERR\");",
    "\t",
    "\tthis.statusbar_errors.setNotices(",
    "\t\tpr,",
    "\t\tthis.windowstate.file.getErrorsTotal(\"ERR\")",
    "\t);",
    "\t",
    "\tthis.statusbar_warnings.setNotices(",
    "\t\tthis.windowstate.project.getErrors(\"WARN\"),",
    "\t\tthis.windowstate.file.getErrorsTotal(\"WARN\")",
    "\t);",
    "\tthis.statusbar_depricated.setNotices(",
    "\t\tthis.windowstate.project.getErrors(\"DEPR\"),",
    "\t\tthis.windowstate.file.getErrorsTotal(\"DEPR\")",
    "\t);",
    "",
    "\t_this.statusbar_run.el.hide();",
    "",
    "\tif (pr.get_n_items() < 1) {",
    "\t\t_this.statusbar_run.el.show();",
    "\t} ",
    "\t",
    "}"
   ]
  }
 ],
 "name" : "MainWindow"
}