{
 "build_module" : "builder",
 "items" : [
  {
   "# Project.Project project" : "null",
   "# WindowState windowstate" : "null",
   "# int no_windows" : 1,
   "# string title" : "\"Roo Application Builder\"",
   "$ type" : "Gtk.WindowType.TOPLEVEL",
   "$ xns" : "Gtk",
   "* init" : [
    " ",
    "\t  ",
    "    //this.el.show_all();",
    "    //try {",
    "         this.el.set_icon_name(\"roobuilder\");",
    "\t//} catch (Exception e) {",
    "\t//\tprint(\"no icon found\");",
    "//\t}"
   ],
   "border_width" : 0,
   "default_height" : 750,
   "default_width" : 1200,
   "id" : "MainWindow",
   "items" : [
    {
     "$ xns" : "Gtk",
     "* pack" : "set_titlebar",
     "bool show_close_button" : true,
     "id" : "headerbar",
     "items" : [
      {
       "$ xns" : "Gtk",
       "* pack" : "pack_start",
       "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
       "items" : [
        {
         "$ tooltop_text" : [
          "\"Open a new Window",
          "\""
         ],
         "$ xns" : "Gtk",
         "* pack" : "add",
         "bool always_show_image" : true,
         "id" : "windownew",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "set_image",
           "utf8 icon_name" : "window-new",
           "xtype" : "Image"
          }
         ],
         "listeners" : {
          "clicked" : [
           "  ( ) => {",
           "     _this.openNewWindow();",
           "      ",
           "",
           "}"
          ]
         },
         "string label" : "New Window",
         "xtype" : "Button"
        },
        {
         "$ tooltop_text" : "\"Open File\"",
         "$ xns" : "Gtk",
         "* pack" : "add",
         "bool always_show_image" : true,
         "id" : "open_projects_btn",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "set_image",
           "utf8 icon_name" : "system-file-manager",
           "xtype" : "Image"
          }
         ],
         "listeners" : {
          "clicked" : [
           "  ( ) => {",
           "  \t_this.windowstate.showPopoverFiles(this.el, _this.project);",
           "",
           "}"
          ]
         },
         "string label" : "Files / Projects",
         "xtype" : "Button"
        }
       ],
       "xtype" : "Box"
      }
     ],
     "string title" : "Application Builder",
     "xtype" : "HeaderBar"
    },
    {
     "$ homogeneous" : false,
     "$ xns" : "Gtk",
     "* pack" : "add",
     "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
     "id" : "vbox",
     "items" : [
      {
       "# int lastWidth" : 0,
       "$ xns" : "Gtk",
       "* pack" : "pack_start,true,true,0",
       "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
       "id" : "mainpane",
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : "add1",
         "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
         "id" : "leftpane",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "pack_start,true,true,0",
           "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
           "id" : "editpane",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "add1",
             "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
             "id" : "tree",
             "xtype" : "Box"
            },
            {
             "$ xns" : "Gtk",
             "* pack" : "add2",
             "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
             "id" : "props",
             "xtype" : "Box"
            }
           ],
           "xtype" : "Paned"
          }
         ],
         "xtype" : "Box"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "add2",
         "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
         "items" : [
          {
           "$ xns" : "GtkClutter",
           "* init" : [
            "    var stage = this.el.get_stage();",
            "    stage.set_background_color(  Clutter.Color.from_string(\"#000\"));",
            "    ",
            "    ",
            ""
           ],
           "* pack" : "pack_start,true,true,0",
           "id" : "clutterembed",
           "items" : [
            {
             "$ xns" : "GtkClutter",
             "* init" : [
              "{",
              "   ",
              "   ",
              "    this.el.add_constraint(",
              "        new Clutter.AlignConstraint(",
              "            _this.clutterembed.el.get_stage(), ",
              "            Clutter.AlignAxis.X_AXIS,",
              "            1.0f",
              "        )",
              "    );",
              "        ",
              "    //this.el.set_position(100,100);",
              "    this.el.set_pivot_point(1.0f,1.0f);",
              "    ",
              "    this.el.set_size(_this.clutterembed.el.get_stage().width-50,",
              "            _this.clutterembed.el.get_stage().height);",
              "            ",
              "}"
             ],
             "* pack" : "get_stage().add_child",
             "id" : "rooview",
             "xtype" : "Actor"
            },
            {
             "$ xns" : "GtkClutter",
             "* init" : [
              "{",
              "   ",
              "   /*",
              "    this.el.add_constraint(",
              "        new Clutter.AlignConstraint(",
              "            _this.clutterembed.el.get_stage(), ",
              "            Clutter.AlignAxis.X_AXIS,",
              "            0.0f",
              "        )",
              "    );",
              "    */",
              "    this.el.fixed_x = 50.0f;",
              "    this.el.fixed_y = 0.0f;",
              "    //this.el.set_position(100,100);",
              "    this.el.set_pivot_point(0.0f,0.0f);",
              "    this.el.set_scale(0.0f,1.0f);",
              "    this.el.set_size((_this.clutterembed.el.get_stage().width-50)/2,",
              "            _this.clutterembed.el.get_stage().height);",
              "            ",
              "}"
             ],
             "* pack" : "get_stage().add_child",
             "id" : "objectview",
             "xtype" : "Actor"
            },
            {
             "$ xns" : "GtkClutter",
             "* init" : [
              "{",
              "   ",
              "   /*",
              "    this.el.add_constraint(",
              "        new Clutter.AlignConstraint(",
              "            _this.clutterembed.el.get_stage(), ",
              "            Clutter.AlignAxis.X_AXIS,",
              "            0.0f",
              "        )",
              "    );",
              "    */",
              "    this.el.fixed_x = 50.0f;",
              "    this.el.fixed_y = 0.0f;",
              "    //this.el.set_position(100,100);",
              "    this.el.set_pivot_point(0.0f,0.0f);",
              "    this.el.set_scale(0.0f,1.0f);",
              "    this.el.set_size((_this.clutterembed.el.get_stage().width-50)/2,",
              "            _this.clutterembed.el.get_stage().height);",
              "            ",
              "}"
             ],
             "* pack" : "get_stage().add_child",
             "id" : "codeeditview",
             "xtype" : "Actor"
            },
            {
             "$ xns" : "GtkClutter",
             "* init" : [
              "{",
              "   ",
              "   /*",
              "    this.el.add_constraint(",
              "        new Clutter.AlignConstraint(",
              "            _this.clutterembed.el.get_stage(), ",
              "            Clutter.AlignAxis.X_AXIS,",
              "            0.0f",
              "        )",
              "    );",
              "    */",
              "    this.el.fixed_x = 50.0f;",
              "    this.el.fixed_y = 0.0f;",
              "    //this.el.set_position(100,100);",
              "    this.el.set_pivot_point(0.0f,0.0f);",
              "    this.el.set_scale(0.0f,1.0f);",
              "    this.el.set_size((_this.clutterembed.el.get_stage().width-50)/2,",
              "            _this.clutterembed.el.get_stage().height);",
              "            ",
              "}"
             ],
             "* pack" : "get_stage().add_child",
             "id" : "addpropsview",
             "xtype" : "Actor"
            },
            {
             "$ xns" : "Clutter",
             "* init" : [
              "{",
              "    ",
              "    this.el.add_constraint(",
              "        new Clutter.AlignConstraint(",
              "            _this.clutterembed.el.get_stage(), ",
              "            Clutter.AlignAxis.X_AXIS,",
              "            0.0f",
              "        )",
              "    );",
              "     ",
              "    ",
              "    //this.el.set_position(100,100);",
              "    this.el.set_pivot_point(0.5f,0.5f);",
              "     this.el.set_size(50,",
              "           _this.clutterembed.el.get_stage().height);",
              "     ",
              "}"
             ],
             "* pack" : "get_stage().add_child",
             "id" : "buttonlayout",
             "items" : [
              {
               "$ orientation" : "Clutter.Orientation.VERTICAL",
               "$ xns" : "Clutter",
               "* prop" : "layout_manager",
               "xtype" : "BoxLayout"
              },
              {
               "$ xns" : "Clutter",
               "* init" : "this.el.set_size(50,50);",
               "* pack" : "add_child",
               "id" : "backbutton",
               "items" : [
                {
                 "$ xns" : "GtkClutter",
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "items" : [
                  {
                   "$ xns" : "Gtk",
                   "* pack" : false,
                   "height_request" : 50,
                   "items" : [
                    {
                     "$ xns" : "Gtk",
                     "* pack" : "set_image",
                     "utf8 icon_name" : "go-previous",
                     "xtype" : "Image"
                    }
                   ],
                   "listeners" : {
                    "clicked" : [
                     "  ( ) => {",
                     " //  if (_this.windowstate.state == WindowState.State.FILEPROJECT) {",
                     "    ",
                     "//\t     _this.windowstate.switchState(WindowState.State.FILES);",
                     "  //   } else { ",
                     "\t    _this.windowstate.switchState(WindowState.State.PREVIEW);",
                     "  //  }",
                     "    ",
                     "",
                     "}"
                    ]
                   },
                   "utf8 tooltip_text" : "Back",
                   "width_request" : 50,
                   "xtype" : "Button"
                  }
                 ],
                 "xtype" : "Actor"
                }
               ],
               "xtype" : "Actor"
              },
              {
               "$ xns" : "Clutter",
               "* init" : "this.el.set_size(50,50);",
               "* pack" : "add_child",
               "id" : "objectshowbutton",
               "items" : [
                {
                 "$ xns" : "GtkClutter",
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "items" : [
                  {
                   "$ tooltip_text" : "\"Add Child Element\"",
                   "$ xns" : "Gtk",
                   "* pack" : false,
                   "height_request" : 50,
                   "items" : [
                    {
                     "$ xns" : "Gtk",
                     "* pack" : "set_image",
                     "utf8 icon_name" : "list-add",
                     "xtype" : "Image"
                    }
                   ],
                   "listeners" : {
                    "clicked" : [
                     "  ( ) => {",
                     "    ",
                     "",
                     "  \t_this.windowstate.showAddObject(this.el);",
                     " ",
                     "}"
                    ]
                   },
                   "width_request" : 50,
                   "xtype" : "Button"
                  }
                 ],
                 "xtype" : "Actor"
                }
               ],
               "listeners" : {
                "enter_event" : [
                 "(  event)  => {",
                 "    this.el.background_color =   Clutter.Color.from_string(\"#333\");",
                 "        return false;",
                 "}"
                ],
                "leave_event" : [
                 "(  event)  => {",
                 "    this.el.background_color =   Clutter.Color.from_string(\"#000\");",
                 "    return false;",
                 "}"
                ]
               },
               "xtype" : "Actor"
              },
              {
               "$ xns" : "Clutter",
               "* init" : "this.el.set_size(50,50);",
               "* pack" : "add_child",
               "id" : "addpropbutton",
               "items" : [
                {
                 "$ xns" : "GtkClutter",
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "items" : [
                  {
                   "$ tooltip_text" : "\"Add Property\"",
                   "$ xns" : "Gtk",
                   "* pack" : false,
                   "height_request" : 50,
                   "items" : [
                    {
                     "$ xns" : "Gtk",
                     "* pack" : "set_image",
                     "utf8 icon_name" : "format-justify-left",
                     "xtype" : "Image"
                    }
                   ],
                   "listeners" : {
                    "clicked" : [
                     "  ( ) => {",
                     "    ",
                     "     _this.windowstate.showProps(this.el, \"props\");",
                     " ",
                     "",
                     "}"
                    ]
                   },
                   "width_request" : 50,
                   "xtype" : "Button"
                  }
                 ],
                 "xtype" : "Actor"
                }
               ],
               "xtype" : "Actor"
              },
              {
               "$ xns" : "Clutter",
               "* init" : "this.el.set_size(50,50);",
               "* pack" : "add_child",
               "id" : "addlistenerbutton",
               "items" : [
                {
                 "$ xns" : "GtkClutter",
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "items" : [
                  {
                   "$ tooltip_text" : "\"Add Event Code\"",
                   "$ xns" : "Gtk",
                   "* pack" : false,
                   "height_request" : 50,
                   "items" : [
                    {
                     "$ xns" : "Gtk",
                     "* pack" : "set_image",
                     "utf8 icon_name" : "appointment-new",
                     "xtype" : "Image"
                    }
                   ],
                   "listeners" : {
                    "clicked" : [
                     "  ( ) => {",
                     "    ",
                     " ",
                     "   _this.windowstate.showProps(this.el, \"signals\");",
                     "",
                     "",
                     "}"
                    ]
                   },
                   "width_request" : 50,
                   "xtype" : "Button"
                  }
                 ],
                 "xtype" : "Actor"
                }
               ],
               "xtype" : "Actor"
              }
             ],
             "xtype" : "Actor"
            }
           ],
           "listeners" : {
            "size_allocate" : [
             "  (  alloc) => {",
             "    if (_this.windowstate == null) {",
             "        return;",
             "    }",
             "    _this.windowstate.resizeCanvas(); ",
             "        ",
             "}"
            ]
           },
           "xtype" : "Embed"
          }
         ],
         "xtype" : "Box"
        }
       ],
       "position" : 400,
       "xtype" : "Paned"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "pack_end,false,true,0",
       "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
       "bool homogeneous" : false,
       "items" : [
        {
         "$ tooltip_text" : "\"Project Details\"",
         "$ xns" : "Gtk",
         "* pack" : "add",
         "bool always_show_image" : true,
         "height_request" : 50,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "set_image",
           "utf8 icon_name" : "emblem-system",
           "xtype" : "Image"
          }
         ],
         "listeners" : {
          "clicked" : [
           "  ( ) => {",
           "     ",
           "     _this.windowstate.projectPopoverShow(this.el, _this.project);",
           "   ",
           " ",
           "}"
          ]
         },
         "string label" : "Edit Project Settings",
         "width_request" : 50,
         "xtype" : "Button"
        },
        {
         "$ tooltip_text" : "\"File Details\"",
         "$ xns" : "Gtk",
         "* pack" : "add",
         "bool always_show_image" : true,
         "height_request" : 50,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "set_image",
           "utf8 icon_name" : "document-properties",
           "xtype" : "Image"
          }
         ],
         "listeners" : {
          "clicked" : [
           "  ( ) => {",
           "  ",
           "    // create a new file in project..",
           "    if (_this.project == null || _this.windowstate.file == null) {",
           "        return  ;",
           "    }",
           "     _this.windowstate.file_details.show(",
           "        _this.windowstate.file, this.el",
           "    );",
           "     ",
           "    return  ;    ",
           "",
           "",
           "}"
          ]
         },
         "string label" : "Edit File Properties",
         "width_request" : 50,
         "xtype" : "Button"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "add",
         "bool always_show_image" : true,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* init" : [
            "{",
            "    this.el.show_all();",
            "}",
            ""
           ],
           "* pack" : "set_popup",
           "id" : "topbarmenu",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "append",
             "listeners" : {
              "activate" : [
               " ( ) => {",
               "         Resources.singleton().fetchStart();",
               "}"
              ]
             },
             "string label" : "Download updated Resources",
             "xtype" : "MenuItem"
            },
            {
             "$ xns" : "Gtk",
             "* pack" : "append",
             "listeners" : {
              "activate" : [
               "() => {",
               "    About.singleton().el.show();",
               "    }"
              ]
             },
             "string label" : "About the Builder",
             "xtype" : "MenuItem"
            }
           ],
           "xtype" : "Menu"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "set_image",
           "utf8 icon_name" : "dialog-information",
           "xtype" : "Image"
          }
         ],
         "string label" : "About",
         "xtype" : "MenuButton"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,true,true,0",
         "string label" : "   ",
         "xtype" : "Label"
        },
        {
         "$ xns" : "Gtk",
         "* init" : [
          "{",
          "     this.handler_id = Resources.singleton().updateProgress.connect((pos,total) => {",
          "        if (pos < 1) {",
          "            this.el.hide();",
          "            _this.mainpane.el.set_sensitive(true);",
          "            ",
          "            return;",
          "        }",
          "         _this.mainpane.el.set_sensitive(false);",
          "         this.el.show();",
          "         this.el.set_fraction ((1.0f * pos) / (1.0f * total));",
          "         this.el.set_text(\"Fetching Resource : %s/%s\".printf(pos.to_string(), total.to_string()));",
          "       ",
          "     });",
          "}",
          ""
         ],
         "* pack" : "pack_start,true,true,0",
         "bool show_text" : true,
         "id" : "statusbar",
         "ulong handler_id" : "-1",
         "xtype" : "ProgressBar"
        },
        {
         "$ xns" : "Gtk",
         "* init" : [
          "var description =   Pango.FontDescription.from_string(\"monospace\");",
          "\tdescription.set_size(8000);",
          "\t this.el.override_font(description);",
          "",
          ""
         ],
         "* pack" : "pack_start,false,true,0",
         "id" : "search_entry",
         "listeners" : {
          "changed" : [
           "() => {",
           "\tif (this.el.text == \"\") {",
           "\t\t_this.search_results.el.hide();",
           "\t\treturn;",
           "\t}",
           "\tvar res = 0;",
           "\tswitch(_this.windowstate.state) {",
           "\t\tcase WindowState.State.CODEONLY:",
           "\t\t///case WindowState.State.CODE:",
           "\t\t\t// search the code being edited..",
           "\t\t\tres = _this.windowstate.code_editor_tab.search(this.el.text);",
           "\t\t\t",
           "\t\t\tbreak;",
           "\t\tcase WindowState.State.PREVIEW:",
           "\t\t\tif (_this.windowstate.file.xtype == \"Gtk\") {",
           "\t\t\t\t res = _this.windowstate.window_gladeview.search(this.el.text);",
           "\t\t\t} else { ",
           "\t\t\t\t res = _this.windowstate.window_rooview.search(this.el.text);\t\t\t",
           "\t\t\t}",
           "\t\t",
           "\t\t",
           "\t\t\tbreak;",
           "\t}",
           "\t_this.search_results.el.show();",
           "\tif (res > 0) {",
           "\t\t_this.search_results.el.label = \"%d Matches\".printf(res);",
           "\t} else {",
           "\t\t_this.search_results.el.label = \"No Matches\";",
           "\t}",
           "\t\t",
           "\t",
           "\t",
           "}",
           ""
          ],
          "key_press_event" : [
           "(event) => {",
           "    ",
           " \tif (event.keyval == Gdk.Key.Return) {",
           "\t\tthis.forwardSearch(false);",
           "\t    return true;",
           "",
           "\t}    ",
           "   // print(event.key.keyval)",
           "    ",
           "    return false;",
           "",
           "} "
          ]
         },
         "xtype" : "SearchEntry",
         "| void forwardSearch" : [
          "(bool change_focus) {",
          "\tswitch(_this.windowstate.state) {",
          "\t\tcase WindowState.State.CODEONLY:",
          "\t\t//case WindowState.State.CODE:",
          "\t\t\t// search the code being edited..",
          "\t\t\t_this.windowstate.code_editor_tab.forwardSearch(change_focus);",
          "\t\t\t ",
          "\t\t\tbreak;",
          "\t\tcase WindowState.State.PREVIEW:",
          "\t\t\tif (_this.windowstate.file.xtype == \"Gtk\") {",
          "\t\t\t\t_this.windowstate.window_gladeview.forwardSearch(change_focus);",
          "\t\t\t} else { ",
          "\t\t\t\t _this.windowstate.window_rooview.forwardSearch(change_focus);",
          "\t\t\t}",
          "\t\t",
          "\t\t\tbreak;",
          "\t}",
          "\t",
          "}",
          ""
         ]
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "add",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "add",
           "Xcls_ValaCompileErrors popup" : "",
           "bool always_show_image" : true,
           "id" : "search_results",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "set_image",
             "bool sensitive" : false,
             "utf8 icon_name" : "system-search",
             "xtype" : "Image"
            }
           ],
           "listeners" : {
            "button_press_event" : [
             "() => {",
             "/*",
             "    if (this.popup == null) {",
             "        this.popup = new Xcls_ValaCompileErrors();",
             "        this.popup.window = _this;",
             "    }",
             "   ",
             "    ",
             "    this.popup.show(this.notices, this.el);",
             "    */",
             "    return true;",
             "}"
            ]
           },
           "string label" : "Matches",
           "xtype" : "ImageMenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "add",
           "id" : "statusbar_compilestatus_label",
           "string label" : "Compile Status:",
           "xtype" : "MenuItem"
          },
          {
           "# Json.Object notices" : "new Json.Object() ",
           "$ xns" : "Gtk",
           "* pack" : "add",
           "Xcls_ValaCompileErrors popup" : "",
           "bool always_show_image" : true,
           "id" : "statusbar_errors",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "set_image",
             "utf8 icon_name" : "dialog-error",
             "xtype" : "Image"
            }
           ],
           "listeners" : {
            "button_press_event" : [
             "() => {",
             "    if (this.popup == null) {",
             "        this.popup = new Xcls_ValaCompileErrors();",
             "        this.popup.window = _this;",
             "    }",
             "   ",
             "    ",
             "    this.popup.show(this.notices, this.el);",
             "    return true;",
             "}"
            ]
           },
           "string label" : "Errors",
           "xtype" : "ImageMenuItem",
           "| void setNotices" : [
            "(Json.Object nots, int qty) {",
            "    this.el.show();",
            "    this.el.label = qty.to_string() + \" Errors\";",
            "    this.notices = nots;",
            "",
            "}",
            ""
           ]
          },
          {
           "# Json.Object notices" : "new Json.Object()",
           "$ xns" : "Gtk",
           "* pack" : "add",
           "Xcls_ValaCompileErrors popup" : "",
           "bool always_show_image" : true,
           "id" : "statusbar_warnings",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "set_image",
             "utf8 icon_name" : "dialog-warning",
             "xtype" : "Image"
            }
           ],
           "listeners" : {
            "button_press_event" : [
             "() => {",
             "    if (this.popup == null) {",
             "        this.popup = new Xcls_ValaCompileErrors();",
             "        this.popup.window = _this;",
             "    }",
             "    ",
             "    this.popup.show(this.notices, this.el);",
             "    return true;",
             "}"
            ]
           },
           "string label" : "Warnings",
           "xtype" : "ImageMenuItem",
           "| void setNotices" : [
            "(Json.Object nots, int qty) {",
            "    this.el.show();",
            "    this.el.label = qty.to_string() + \" Warnings\";",
            "    this.notices = nots;",
            "",
            "}",
            ""
           ]
          },
          {
           "# Json.Object notices" : "new Json.Object()",
           "$ xns" : "Gtk",
           "* pack" : "add",
           "Xcls_ValaCompileErrors popup" : "",
           "bool always_show_image" : true,
           "id" : "statusbar_depricated",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "set_image",
             "utf8 icon_name" : "dialog-information",
             "xtype" : "Image"
            }
           ],
           "listeners" : {
            "button_press_event" : [
             "() => {",
             "    if (this.popup == null) {",
             "        this.popup = new Xcls_ValaCompileErrors();",
             "        this.popup.window = _this;",
             "    }",
             "    ",
             "    ",
             "    this.popup.show(this.notices, this.el);",
             "    return true;",
             "}"
            ]
           },
           "string label" : "Depricated",
           "xtype" : "ImageMenuItem",
           "| void setNotices" : [
            "(Json.Object nots, int qty) {",
            "    this.el.show();",
            "    this.el.label = qty.to_string() + \" Depricated\";",
            "    this.notices = nots;",
            "",
            "}",
            ""
           ]
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "add",
           "Xcls_ValaCompileErrors popup" : "",
           "bool always_show_image" : true,
           "id" : "statusbar_run",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "set_image",
             "utf8 icon_name" : "media-playback-start",
             "xtype" : "Image"
            }
           ],
           "listeners" : {
            "button_press_event" : [
             "() => {",
             "\tif (_this.windowstate.file == null) {",
             "\t\treturn true;",
             "\t}",
             "\t_this.windowstate.valasource.spawnExecute(_this.windowstate.file);",
             "\t",
             "\t_this.windowstate.compile_results.show(this.el,true);",
             "\t",
             "\treturn true;",
             "}"
            ]
           },
           "string label" : "Run",
           "xtype" : "ImageMenuItem"
          }
         ],
         "string tooltip_text" : "Update Resources / About Roobuilder",
         "xtype" : "MenuBar"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "add",
         "id" : "statusbar_compile_spinner",
         "string tooltip_text" : "Compiling",
         "xtype" : "Spinner",
         "| void start" : [
          "() {",
          "  this.el.show();",
          "  this.el.start();  ",
          "}",
          ""
         ],
         "| void stop" : [
          "() {",
          " this.el.stop();",
          "  this.el.hide();",
          "}",
          ""
         ]
        }
       ],
       "xtype" : "Box"
      }
     ],
     "xtype" : "Box"
    }
   ],
   "listeners" : {
    "delete_event" : [
     "  (   event) => {",
     "    return false;",
     "} "
    ],
    "destroy" : [
     "() =>  {",
     " Xcls_MainWindow.singleton().no_windows--;",
     " ",
     " Resources.singleton().disconnect(_this.statusbar.handler_id);",
     " ",
     " ",
     " if (Xcls_MainWindow.singleton().no_windows < 1) {",
     "",
     "     Gtk.main_quit();",
     " }",
     "}"
    ],
    "key_release_event" : [
     " (event) => {",
     "    ",
     "    if (this.search_entry.el.is_visible()) {",
     "\t\tif (event.keyval == Gdk.Key.f && (event.state & Gdk.ModifierType.CONTROL_MASK ) > 0 ) {",
     "\t\t    print(\"SAVE: ctrl-f  pressed\");",
     "\t\t\tthis.search_entry.el.grab_focus();",
     "\t\t    return false;",
     "\t\t}",
     "\t\t",
     "\t\tif (event.keyval == Gdk.Key.g && (event.state & Gdk.ModifierType.CONTROL_MASK ) > 0 ) {",
     "\t\t    print(\"SAVE: ctrl-g  pressed\");",
     "\t\t\tthis.search_entry.forwardSearch(true);",
     "\t\t    return false;",
     "\t\t}",
     "\t\t",
     "\t}    ",
     "\t",
     "\tif (event.keyval == Gdk.Key.n && (event.state & Gdk.ModifierType.CONTROL_MASK ) > 0 ) {",
     "\t\tprint(\"SAVE: ctrl-n  pressed\");",
     "\t\tthis.openNewWindow();",
     "\t\treturn false;",
     "\t}",
     "\t",
     "   // print(event.key.keyval)",
     "    ",
     "    return false;",
     "",
     "} ",
     "",
     ""
    ],
    "show" : [
     "  ( ) => {",
     "    // hide the file editing..",
     "   ",
     "    //this.hideViewEditing();",
     "    _this.statusbar.el.hide();",
     "     _this.statusbar_errors.el.hide();",
     "    _this.statusbar_warnings.el.hide();",
     "    _this.statusbar_depricated.el.hide();",
     "    _this.statusbar_compile_spinner.el.hide();",
     "  ",
     "    Resources.singleton().checkResources();",
     "",
     "}"
    ]
   },
   "xtype" : "Window",
   "|             void setTitle" : [
    " (string str) {",
    "    this.headerbar.el.set_title(this.title + \" - \" + str);",
    "} ",
    ""
   ],
   "|             void show" : [
    "() {",
    "   ",
    "    this.el.show_all();",
    "",
    "}"
   ],
   "|        void initChildren" : [
    " () {",
    "    // this needs putting in a better place..",
    "    this.windowstate = new WindowState(this);",
    "     ",
    "",
    "    //w.el.show_all();",
    "    var tl = new Clutter.Timeline(6000);",
    "    tl.set_repeat_count(-1);",
    "    tl.start();",
    "    tl.ref();",
    "",
    "    ",
    "",
    "",
    "",
    "}",
    ""
   ],
   "| void openNewWindow" : [
    "() {",
    "\tXcls_MainWindow.singleton().no_windows++;",
    "        var w = new Xcls_MainWindow();",
    "        w.ref();",
    "",
    "        w.el.show_all();",
    "        w.initChildren();",
    "        w.windowstate.showPopoverFiles(w.open_projects_btn.el, _this.project);",
    "        // should open the file dialog...",
    "        //w.windowstate.switchState(WindowState.State.FILES);",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "MainWindow",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/MainWindow.bjs",
 "permname" : "",
 "title" : ""
}