{
 "build_module" : "",
 "items" : [
  {
   "$ xns" : "Gtk",
   "Gtk.PositionType position" : "Gtk.PositionType.BOTTOM",
   "Xcls_MainWindow win" : "",
   "bool active" : false,
   "bool hexpand" : false,
   "bool modal" : true,
   "id" : "PopoverFiles",
   "int height_request" : 800,
   "int width_request" : 900,
   "items" : [
    {
     "$ xns" : "Gtk",
     "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
     "bool homogeneous" : false,
     "items" : [
      {
       "$ shadow_type" : "Gtk.ShadowType.IN",
       "$ xns" : "Gtk",
       "* init" : [
        "  this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
        ""
       ],
       "* pack" : "pack_end,true,true,0",
       "items" : [
        {
         "$ enable_tree_lines" : true,
         "$ headers_visible" : true,
         "$ xns" : "Gtk",
         "* init" : [
          "  var description = new Pango.FontDescription();",
          "     description.set_size(8000);",
          "    this.el.override_font(description);     ",
          "                    ",
          "    var selection = this.el.get_selection();",
          "    selection.set_mode( Gtk.SelectionMode.SINGLE);",
          " ",
          "",
          "    ",
          "   ",
          " "
         ],
         "* pack" : "add",
         "id" : "view",
         "items" : [
          {
           "$ columns" : "typeof(string), typeof(Object)",
           "$ xns" : "Gtk",
           "* init" : [
            "{",
            "   this.el.set_sort_func(0, (mod,a,b) => {",
            "       GLib.Value ga, gb;",
            "       mod.get_value(a,0, out ga);",
            "       mod.get_value(b,0, out gb);",
            "        ",
            "        if ((string)ga == (string)gb) {",
            "            return 0;",
            "        }",
            "        return (string)ga > (string)gb ? 1 : -1;",
            "   }); ",
            "",
            "",
            "}",
            ""
           ],
           "* pack" : "set_model",
           "id" : "model",
           "n_columns" : 2,
           "xtype" : "ListStore"
          },
          {
           "$ xns" : "Gtk",
           "* init" : [
            "",
            "    this.el.add_attribute(_this.namecol.el , \"markup\", 0  );",
            " "
           ],
           "* pack" : "append_column",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "pack_start,true",
             "id" : "namecol",
             "xtype" : "CellRendererText"
            }
           ],
           "utf8 title" : "Projects",
           "xtype" : "TreeViewColumn"
          }
         ],
         "listeners" : {
          "cursor_changed" : [
           " () => {",
           "    if (_this.is_loading) {",
           "        return;",
           "    }",
           "    ",
           "    Gtk.TreeIter iter;",
           "    Gtk.TreeModel mod;",
           "            ",
           "    var s = this.el.get_selection();",
           "    if (!s.get_selected(out mod, out iter)) {",
           "        return;",
           "    }",
           "    ",
           "    GLib.Value gval;",
           "",
           "    mod.get_value(iter, 1 , out gval);",
           "    var project = (Project.Project)gval.get_object();",
           "    ",
           "    _this.project_selected(project);",
           "    ",
           "}  "
          ]
         },
         "xtype" : "TreeView"
        }
       ],
       "xtype" : "ScrolledWindow"
      },
      {
       "$ xns" : "Gtk",
       "* init" : "  this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
       "* pack" : "pack_end,true,true,0",
       "Gtk.ShadowType shadow_type" : "Gtk.ShadowType.IN",
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : "add",
         "id" : "iconview",
         "items" : [
          {
           "$ columns" : "typeof(string), typeof(Object)",
           "$ xns" : "Gtk",
           "* prop" : "model",
           "int n_columns" : 2,
           "xtype" : "ListStore"
          }
         ],
         "xtype" : "IconView"
        }
       ],
       "xtype" : "ScrolledWindow"
      },
      {
       "$ xns" : "Gtk",
       "* init" : "  this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
       "* pack" : "pack_end,true,true,0",
       "Gtk.ShadowType shadow_type" : "Gtk.ShadowType.IN",
       "items" : [
        {
         "$ enable_tree_lines" : true,
         "$ headers_visible" : true,
         "$ xns" : "Gtk",
         "* init" : [
          "  var description = new Pango.FontDescription();",
          "     description.set_size(8000);",
          "    this.el.override_font(description);     ",
          "                    ",
          "    var selection = this.el.get_selection();",
          "    selection.set_mode( Gtk.SelectionMode.SINGLE);",
          " ",
          "",
          "    ",
          "   ",
          " "
         ],
         "* pack" : "add",
         "id" : "fileview",
         "items" : [
          {
           "$ columns" : "typeof(string), typeof(Object)",
           "$ xns" : "Gtk",
           "* init" : [
            "{",
            "   this.el.set_sort_func(0, (mod,a,b) => {",
            "       GLib.Value ga, gb;",
            "       mod.get_value(a,0, out ga);",
            "       mod.get_value(b,0, out gb);",
            "        ",
            "        if ((string)ga == (string)gb) {",
            "            return 0;",
            "        }",
            "        return (string)ga > (string)gb ? 1 : -1;",
            "   }); ",
            "",
            "",
            "}",
            ""
           ],
           "* pack" : "set_model",
           "id" : "filemodel",
           "n_columns" : 2,
           "xtype" : "ListStore"
          },
          {
           "$ xns" : "Gtk",
           "* init" : [
            "",
            "    this.el.add_attribute(_this.filenamecol.el , \"markup\", 0  );",
            " "
           ],
           "* pack" : "append_column",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "pack_start,true",
             "id" : "filenamecol",
             "xtype" : "CellRendererText"
            }
           ],
           "utf8 title" : "File",
           "xtype" : "TreeViewColumn"
          }
         ],
         "listeners" : {
          "cursor_changed" : [
           " () => {",
           "    if (_this.is_loading) {",
           "        return;",
           "    }",
           "    ",
           "    Gtk.TreeIter iter;",
           "    Gtk.TreeModel mod;",
           "            ",
           "    var s = this.el.get_selection();",
           "    if (!s.get_selected(out mod, out iter)) {",
           "        return;",
           "    }",
           "    ",
           "    GLib.Value gval;",
           "",
           "    mod.get_value(iter, 1 , out gval);",
           "    var project = (Project.Project)gval.get_object();",
           "    ",
           "    _this.project_selected(project);",
           "    ",
           "}  "
          ]
         },
         "xtype" : "TreeView"
        }
       ],
       "xtype" : "ScrolledWindow"
      }
     ],
     "xtype" : "Box"
    }
   ],
   "listeners" : {
    "hide" : [
     "() => {",
     "\t// save...",
     "\t _this.editor.saveContents();",
     "}"
    ]
   },
   "string prop_or_listener" : "\"\"",
   "xtype" : "Popover",
   "| return_type XXXX" : [
    "() {",
    "",
    "}",
    ""
   ],
   "| void load" : [
    "() {",
    "     // clear list...",
    "    ",
    "     if (_this.is_loaded) {",
    "         return;",
    "     }",
    "     _this.is_loading = true;",
    "        ",
    "     _this.is_loaded = true;",
    "     ",
    "     Project.Project.loadAll();",
    "     var projects = Project.Project.allProjectsByName();",
    "     ",
    "     Gtk.TreeIter iter;",
    "     var m = this.model.el;",
    "     m.clear();",
    "          ",
    "     for (var i = 0; i < projects.size; i++) {",
    "        m.append(out iter);",
    "        m.set(iter,   0,projects.get(i).name );",
    "        ",
    "        var o =  GLib.Value(typeof(Object));",
    "        o.set_object((Object)projects.get(i));",
    "                   ",
    "        m.set_value(iter, 1, o);",
    "     ",
    "     }",
    "     m.set_sort_column_id(0, Gtk.SortType.ASCENDING);",
    "     _this.is_loading = false;     ",
    "}",
    ""
   ],
   "| void setMainWindow" : [
    "(Xcls_MainWindow win) {",
    "\tthis.win = win;",
    "\tthis.editor.window = win;",
    "}",
    ""
   ],
   "| void show" : [
    "(Gtk.Widget on_el ) {",
    "\t//this.editor.show( file, node, ptype, key);",
    "\t",
    "    int w,h;",
    "    this.win.el.get_size(out w, out h);",
    "    ",
    "    // left tree = 250, editor area = 500?",
    "    ",
    "    // min 450?",
    "\t// max hieght ...",
    "\t",
    "\tvar  ww =  on_el.get_allocated_width();",
    "\t",
    "\t// width = should be max = w-ww , or 600 at best..?",
    "\t ",
    "    this.el.set_size_request( w, h); // same as parent...",
    "",
    "   ",
    "\tthis.el.set_modal(true);",
    "\tthis.el.set_relative_to(on_el);",
    "",
    "\t//this.el.set_position(Gtk.PositionType.BOTTOM);",
    "",
    "\t// window + header?",
    " ",
    "\tthis.el.show_all();",
    "    //while(Gtk.events_pending()) { ",
    "    //        Gtk.main_iteration();   // why?",
    "    //}  ",
    "",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "PopoverFiles",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/PopoverFiles.bjs",
 "permname" : "",
 "title" : ""
}