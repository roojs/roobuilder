{
 "build_module" : "",
 "items" : [
  {
   "# Gdk.Pixbuf missing_thumb_pixbuf" : "",
   "# Project.Project selectedProject" : "",
   "# Xcls_MainWindow win" : "",
   "# bool is_loaded" : false,
   "# bool is_loading" : false,
   "$ xns" : "Gtk",
   "Gtk.PositionType position" : "Gtk.PositionType.BOTTOM",
   "bool active" : false,
   "bool hexpand" : false,
   "bool modal" : true,
   "id" : "PopoverFiles",
   "int height_request" : 800,
   "int width_request" : 900,
   "items" : [
    {
     "$ xns" : "Gtk",
     "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
     "bool homogeneous" : false,
     "items" : [
      {
       "$ shadow_type" : "Gtk.ShadowType.IN",
       "$ xns" : "Gtk",
       "* init" : [
        "  this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
        ""
       ],
       "* pack" : "pack_end,true,true,0",
       "items" : [
        {
         "$ enable_tree_lines" : true,
         "$ headers_visible" : true,
         "$ xns" : "Gtk",
         "* init" : [
          "  var description = new Pango.FontDescription();",
          "     description.set_size(8000);",
          "    this.el.override_font(description);     ",
          "                    ",
          "    var selection = this.el.get_selection();",
          "    selection.set_mode( Gtk.SelectionMode.SINGLE);",
          " ",
          "",
          "    ",
          "   ",
          " "
         ],
         "* pack" : "add",
         "id" : "view",
         "items" : [
          {
           "$ columns" : "typeof(string), typeof(Object)",
           "$ xns" : "Gtk",
           "* init" : [
            "{",
            "   this.el.set_sort_func(0, (mod,a,b) => {",
            "       GLib.Value ga, gb;",
            "       mod.get_value(a,0, out ga);",
            "       mod.get_value(b,0, out gb);",
            "        ",
            "        if ((string)ga == (string)gb) {",
            "            return 0;",
            "        }",
            "        return (string)ga > (string)gb ? 1 : -1;",
            "   }); ",
            "",
            "",
            "}",
            ""
           ],
           "* pack" : "set_model",
           "id" : "model",
           "n_columns" : 2,
           "xtype" : "ListStore"
          },
          {
           "$ xns" : "Gtk",
           "* init" : [
            "",
            "    this.el.add_attribute(_this.namecol.el , \"markup\", 0  );",
            " "
           ],
           "* pack" : "append_column",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "pack_start,true",
             "id" : "namecol",
             "xtype" : "CellRendererText"
            }
           ],
           "utf8 title" : "Projects",
           "xtype" : "TreeViewColumn"
          }
         ],
         "listeners" : {
          "cursor_changed" : [
           " () => {",
           "    if (_this.is_loading) {",
           "        return;",
           "    }",
           "    ",
           "    Gtk.TreeIter iter;",
           "    Gtk.TreeModel mod;",
           "            ",
           "    var s = this.el.get_selection();",
           "    if (!s.get_selected(out mod, out iter)) {",
           "        return;",
           "    }",
           "    ",
           "    GLib.Value gval;",
           "",
           "    mod.get_value(iter, 1 , out gval);",
           "    var project = (Project.Project)gval.get_object();",
           "    ",
           "    _this.onProjectSelected(project);",
           "    ",
           "}  "
          ]
         },
         "xtype" : "TreeView"
        }
       ],
       "xtype" : "ScrolledWindow"
      },
      {
       "$ xns" : "Gtk",
       "* init" : "  this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
       "* pack" : "pack_end,true,true,0",
       "Gtk.ShadowType shadow_type" : "Gtk.ShadowType.IN",
       "items" : [
        {
         "$ xns" : "Gtk",
         "* init" : [
          "{",
          "",
          "}",
          ""
         ],
         "* pack" : "add",
         "id" : "iconview",
         "int markup_column" : 1,
         "int pixbuf_column" : 3,
         "items" : [
          {
           "$ columns" : "typeof(Object), typeof(string), typeof(string), typeof(Gdk.Pixbuf) ",
           "$ xns" : "Gtk",
           "* prop" : "model",
           "id" : "iconmodel",
           "int n_columns" : 4,
           "xtype" : "ListStore"
          }
         ],
         "xtype" : "IconView"
        }
       ],
       "xtype" : "ScrolledWindow"
      },
      {
       "$ xns" : "Gtk",
       "* init" : "  this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
       "* pack" : "pack_end,true,true,0",
       "Gtk.ShadowType shadow_type" : "Gtk.ShadowType.IN",
       "items" : [
        {
         "$ enable_tree_lines" : true,
         "$ headers_visible" : true,
         "$ xns" : "Gtk",
         "* init" : [
          "  var description = new Pango.FontDescription();",
          "     description.set_size(8000);",
          "    this.el.override_font(description);     ",
          "                    ",
          "    var selection = this.el.get_selection();",
          "    selection.set_mode( Gtk.SelectionMode.SINGLE);",
          " ",
          "",
          "    ",
          "   ",
          " "
         ],
         "* pack" : "add",
         "id" : "fileview",
         "items" : [
          {
           "$ columns" : "typeof(string), typeof(Object)",
           "$ xns" : "Gtk",
           "* init" : [
            "{",
            "   this.el.set_sort_func(0, (mod,a,b) => {",
            "       GLib.Value ga, gb;",
            "       mod.get_value(a,0, out ga);",
            "       mod.get_value(b,0, out gb);",
            "        ",
            "        if ((string)ga == (string)gb) {",
            "            return 0;",
            "        }",
            "        return (string)ga > (string)gb ? 1 : -1;",
            "   }); ",
            "",
            "",
            "}",
            ""
           ],
           "* pack" : "set_model",
           "id" : "filemodel",
           "n_columns" : 2,
           "xtype" : "ListStore"
          },
          {
           "$ xns" : "Gtk",
           "* init" : [
            "",
            "    this.el.add_attribute(_this.filenamecol.el , \"markup\", 0  );",
            " "
           ],
           "* pack" : "append_column",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "pack_start,true",
             "id" : "filenamecol",
             "xtype" : "CellRendererText"
            }
           ],
           "utf8 title" : "File",
           "xtype" : "TreeViewColumn"
          }
         ],
         "listeners" : {
          "cursor_changed" : [
           " () => {",
           " /*",
           "    if (_this.is_loading) {",
           "        return;",
           "    }",
           "    ",
           "    Gtk.TreeIter iter;",
           "    Gtk.TreeModel mod;",
           "            ",
           "    var s = this.el.get_selection();",
           "    if (!s.get_selected(out mod, out iter)) {",
           "        return;",
           "    }",
           "    ",
           "    GLib.Value gval;",
           "",
           "    mod.get_value(iter, 1 , out gval);",
           "    var project = (Project.Project)gval.get_object();",
           "    ",
           "    _this.project_selected(project);",
           "    */",
           "}  "
          ]
         },
         "xtype" : "TreeView"
        }
       ],
       "xtype" : "ScrolledWindow"
      }
     ],
     "xtype" : "Box"
    }
   ],
   "listeners" : {
    "hide" : [
     "( ) => {",
     "\t// save...",
     "\t//this.load();",
     "\t//if (project != null) {",
     "//\t\tthis.selectProject(project);",
     "//\t}",
     " ",
     "}"
    ]
   },
   "xtype" : "Popover",
   "| void load" : [
    "() {",
    "     // clear list...",
    "    ",
    "     if (_this.is_loaded) {",
    "         return;",
    "     }",
    "     _this.is_loading = true;",
    "        ",
    "     _this.is_loaded = true;",
    "     ",
    "     Project.Project.loadAll();",
    "     var projects = Project.Project.allProjectsByName();",
    "     ",
    "     Gtk.TreeIter iter;",
    "     var m = this.model.el;",
    "     m.clear();",
    "          ",
    "     for (var i = 0; i < projects.size; i++) {",
    "        m.append(out iter);",
    "        m.set(iter,   0,projects.get(i).name );",
    "        ",
    "        var o =  GLib.Value(typeof(Object));",
    "        o.set_object((Object)projects.get(i));",
    "                   ",
    "        m.set_value(iter, 1, o);",
    "     ",
    "     }",
    "     m.set_sort_column_id(0, Gtk.SortType.ASCENDING);",
    "     _this.is_loading = false;      ",
    "}",
    ""
   ],
   "| void onProjectSelected" : [
    "(Project.Project project) {",
    "\tthis.selectedProject = project;",
    "\tproject.scanDirs();",
    "\t//this.clutterfiles.loadProject(proj);",
    "\t",
    "\t",
    "\t ",
    "",
    "    ",
    "    ",
    "    //this.project_title_name.el.text = pr.name;",
    "    //this.project_title_path.el.text = pr.firstPath();",
    "    ",
    "    // file items contains a reference until we reload ...",
    "  Gdk.Pixbuf pixbuf = null;",
    "\t Gtk.TreeIter iter;",
    "     var m = this.iconmodel.el;",
    "     m.clear();",
    " ",
    "    var fiter = project.sortedFiles().list_iterator();",
    "    while (fiter.next()) {",
    "        m.append(out iter);",
    "        var file = fiter.get();",
    "        m.set(iter,   0,file ); // zero contains the file reference",
    "        m.set(iter,   1,file.nickNameSplit() ); // marked up title?",
    "        m.set(iter,   2,file.nickType() ); // file type?",
    "        ",
    "        ",
    "        var fname = file.getIconFileName(false);",
    "        try {",
    "\t\t    if (FileUtils.test(fname, FileTest.EXISTS)) {",
    "\t\t        pixbuf = new Gdk.Pixbuf.from_file(fname);",
    "\t\t    } ",
    "\t\t} catch (Error e) {",
    "\t\t    // noop",
    "\t\t",
    "\t\t}",
    "        if (pixbuf == null) {",
    "        ",
    "\t\t    try {",
    "\t\t        if (_this.missing_thumb_pixbuf == null) {",
    "\t\t            var icon_theme = Gtk.IconTheme.get_default ();",
    "\t\t            _this.missing_thumb_pixbuf = icon_theme.load_icon (\"package-x-generic\", 92, 0);",
    "\t\t            _this.missing_thumb_pixbuf.ref();",
    "\t\t        }",
    "\t\t        pixbuf = _this.missing_thumb_pixbuf;",
    "",
    "\t\t    } catch (Error e) {",
    "\t\t        // noop?",
    "\t\t    }",
    "\t\t}",
    "\t\t",
    "\t\t",
    "\t\t",
    "        m.set(iter,   3,pixbuf);",
    "      ",
    "        // this needs to add to the iconview?",
    "        ",
    "        //var a = new Xcls_fileitem(this,fiter.get());",
    "        //this.fileitems.add(a);",
    "",
    "        //this.filelayout.el.add_child(a.el);",
    "    }",
    "    ",
    "    ",
    "    /*",
    "    ",
    "    // folders...",
    "    ",
    "    if (!(pr is Project.Gtk)) {",
    "        print (\"not gtk... skipping files\");",
    "        return;",
    "    }",
    "    var gpr = (Project.Gtk)pr;",
    "     var def = gpr.compilegroups.get(\"_default_\");",
    "     // not sure why the above is returng null!??",
    "     if (def == null) {",
    " \t\tdef = new Project.GtkValaSettings(\"_default_\"); ",
    " \t\tgpr.compilegroups.set(\"_default_\", def);",
    "     }",
    "\t var items  = def.sources;",
    "\t\t ",
    "\t\t ",
    "\t ",
    "\tfor(var i =0 ; i < items.size; i++) {",
    "\t    print (\"cheking folder %s\\n\", items.get(i));",
    "\t     var files = gpr.filesForOpen(items.get(i));",
    "\t     if (files.size < 1) {",
    "\t        continue;",
    "\t     }",
    "",
    "\t    // add the directory... items.get(i);",
    "\t    var x = new Xcls_folderitem(this,items.get(i));",
    "\t    this.fileitems.add(x);",
    "\t    this.filelayout.el.add_child(x.el);",
    "\t    ",
    "\t    for(var j =0 ; j < files.size; j++) {",
    "\t        print (\"adding file %s\\n\", files.get(j));",
    "\t    ",
    "\t        var y = new Xcls_folderfile(this, files.get(j));",
    "\t        this.fileitems.add(y);",
    "\t        x.el.add_child(y.el);",
    "",
    "\t        // add file to files.get(j);",
    "\t        ",
    "\t    }",
    "\t    ",
    "\t    ",
    "\t    //this.el.set_value(citer, 1,   items.get(i) );",
    "\t}",
    "     ",
    "   */",
    "\t",
    "}",
    ""
   ],
   "| void selectProject" : [
    "(Project.Project project) {",
    "    ",
    "    var sel = _this.view.el.get_selection();",
    "    ",
    "    sel.unselect_all();",
    "    ",
    "    var found = false;",
    "    _this.model.el.foreach((mod, path, iter) => {",
    "        GLib.Value val;",
    "    ",
    "        mod.get_value(iter, 1, out val);",
    "        if ( ( (Project.Project)val.get_object()).fn != project.fn) {",
    "            print(\"SKIP %s != %s\\n\", ((Project.Project)val.get_object()).name , project.name);",
    "            return false;//continue",
    "        }",
    "        sel.select_iter(iter);",
    "",
    "        this.onProjectSelected(project);",
    "        found = true;",
    "        return true;",
    "        ",
    "    ",
    "    });",
    "     if (!found) {",
    "\t    print(\"tried to select %s, could not find it\", project.name);",
    "    }",
    "}",
    ""
   ],
   "| void setMainWindow" : [
    "(Xcls_MainWindow win) {",
    "\tthis.win = win;",
    "\t ",
    "}",
    ""
   ],
   "| void show" : [
    "(Gtk.Widget on_el, Project.Project project ) {",
    "\t//this.editor.show( file, node, ptype, key);",
    "\t",
    "\t\t// save...",
    "\tthis.load();",
    "\tif (project != null) {",
    "\t\tthis.selectProject(project);",
    "\t}",
    "\t",
    "\t",
    "    int w,h;",
    "    this.win.el.get_size(out w, out h);",
    "    ",
    "    // left tree = 250, editor area = 500?",
    "    ",
    "    // min 450?",
    "\t// max hieght ...",
    "\t",
    "\tvar  ww =  on_el.get_allocated_width();",
    "\t",
    "\t// width = should be max = w-ww , or 600 at best..?",
    "\t ",
    "    this.el.set_size_request( w, h); // same as parent...",
    "",
    "   ",
    "\tthis.el.set_modal(true);",
    "\tthis.el.set_relative_to(on_el);",
    "",
    "\t//this.el.set_position(Gtk.PositionType.BOTTOM);",
    "",
    "\t// window + header?",
    " ",
    "\tthis.el.show_all();",
    "    //while(Gtk.events_pending()) { ",
    "    //        Gtk.main_iteration();   // why?",
    "    //}  ",
    "",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "PopoverFiles",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/PopoverFiles.bjs",
 "permname" : "",
 "title" : ""
}