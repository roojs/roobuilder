{
 "build_module" : "",
 "items" : [
  {
   "# Gdk.Pixbuf missing_thumb_pixbuf" : "",
   "# Project.Project selectedProject" : "",
   "# Xcls_MainWindow win" : "",
   "# bool is_loaded" : false,
   "# bool is_loading" : false,
   "# bool new_window" : false,
   "$ xns" : "Gtk",
   "Gtk.PositionType position" : "Gtk.PositionType.TOP",
   "bool active" : false,
   "bool hexpand" : false,
   "bool modal" : true,
   "id" : "PopoverFiles",
   "int height_request" : 800,
   "int width_request" : 900,
   "items" : [
    {
     "$ xns" : "Gtk",
     "* pack" : "add",
     "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
     "items" : [
      {
       "$ xns" : "Gtk",
       "* pack" : "add",
       "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : "add",
         "Gtk.ToolbarStyle toolbar_style" : "Gtk.ToolbarStyle.BOTH",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "add",
           "listeners" : {
            "clicked" : [
             "  ( ) => {",
             "  ",
             "    // create a new file in project..",
             "    //Xcls_DialogNewComponent.singleton().show(",
             "   var  pe =      EditProject.singleton();",
             "    //pe.el.set_transient_for(_this.el);",
             "    pe.el.set_modal(true);   ",
             "   ",
             "    var p  = pe.show();",
             "",
             "    if (p == null) {",
             "        return;",
             "    }",
             "    ",
             "    /*",
             "    _this.win.windowstate.left_projects.is_loaded = false;    ",
             "    _this.win.windowstate.left_projects.load();",
             "    _this.win.windowstate.left_projects.selectProject(p);",
             "    */",
             "    return  ;    ",
             "",
             "}"
            ]
           },
           "string icon_name" : "folder-new",
           "string label" : "New Project",
           "xtype" : "ToolButton"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "add",
           "listeners" : {
            "clicked" : [
             "  ( ) => {",
             "  // should disable the button really.",
             "   if (_this.selectedProject == null) {",
             "\t   return;",
             "   }",
             "\t_this.win.windowstate.projectPopoverShow(this.el, _this.selectedProject);",
             " }"
            ]
           },
           "string icon_name" : "emblem-system",
           "string label" : "Project Properties",
           "xtype" : "ToolButton"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "add",
           "listeners" : {
            "clicked" : [
             "  ( ) => {",
             "  /*",
             "   var cd = DialogConfirm.singleton();",
             "     cd.el.set_transient_for(_this.el);",
             "    cd.el.set_modal(true);",
             "",
             "     var project =   _this.windowstate.left_projects.getSelectedProject();",
             "    if (project == null) {",
             "        print(\"SKIP - no project\\n\");",
             "        return;",
             "    }",
             "    ",
             "        ",
             "     if (Gtk.ResponseType.YES != cd.show(\"Confirm\", ",
             "        \"Are you sure you want to delete project %s\".printf(project.name))) {",
             "        return;",
             "    }",
             "     ",
             "",
             "    // confirm?",
             "    Project.Project.remove(project);",
             "    _this.project = null;",
             "    ",
             "    _this.windowstate.left_projects.is_loaded =  false;",
             "    _this.windowstate.left_projects.load();",
             "    _this.windowstate.clutterfiles.clearFiles();",
             "*/",
             "",
             "}"
            ]
           },
           "string icon_name" : "user-trash",
           "string label" : "Delete Project",
           "xtype" : "ToolButton"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "add",
           "listeners" : {
            "clicked" : [
             " () => {",
             "    // create a new file in project..",
             "    print(\"add file selected\\n\");",
             "    ",
             "    if (_this.selectedProject == null) {",
             "    \treturn;",
             "    }",
             "    ",
             "    var f = JsRender.JsRender.factory(_this.selectedProject.xtype,  _this.selectedProject, \"\");",
             "     _this.win.windowstate.file_details.show( f, this.el, _this.new_window );",
             "",
             "}"
            ]
           },
           "string icon_name" : "document-new",
           "string label" : "New File",
           "xtype" : "ToolButton"
          }
         ],
         "xtype" : "Toolbar"
        }
       ],
       "xtype" : "Box"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "add",
       "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
       "bool homogeneous" : false,
       "items" : [
        {
         "$ shadow_type" : "Gtk.ShadowType.IN",
         "$ xns" : "Gtk",
         "* init" : [
          "  this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
          " "
         ],
         "* pack" : "add",
         "bool expand" : true,
         "int width_request" : 150,
         "items" : [
          {
           "$ enable_tree_lines" : true,
           "$ headers_visible" : true,
           "$ xns" : "Gtk",
           "* init" : [
            "  var description = new Pango.FontDescription();",
            "     description.set_size(9000);",
            "    this.el.override_font(description);     ",
            "                    ",
            "    var selection = this.el.get_selection();",
            "    selection.set_mode( Gtk.SelectionMode.SINGLE);",
            " ",
            "",
            "    ",
            "   ",
            " "
           ],
           "* pack" : "add",
           "id" : "view",
           "items" : [
            {
             "$ columns" : "typeof(string), typeof(Object)",
             "$ xns" : "Gtk",
             "* init" : [
              "{",
              "   this.el.set_sort_func(0, (mod,a,b) => {",
              "       GLib.Value ga, gb;",
              "       mod.get_value(a,0, out ga);",
              "       mod.get_value(b,0, out gb);",
              "        ",
              "        if ((string)ga == (string)gb) {",
              "            return 0;",
              "        }",
              "        return (string)ga > (string)gb ? 1 : -1;",
              "   }); ",
              "",
              "",
              "}",
              ""
             ],
             "* pack" : "set_model",
             "id" : "model",
             "n_columns" : 2,
             "xtype" : "ListStore"
            },
            {
             "$ xns" : "Gtk",
             "* init" : [
              "",
              "    this.el.add_attribute(_this.namecol.el , \"markup\", 0  );",
              " "
             ],
             "* pack" : "append_column",
             "items" : [
              {
               "$ xns" : "Gtk",
               "* pack" : "pack_start,true",
               "id" : "namecol",
               "xtype" : "CellRendererText"
              }
             ],
             "utf8 title" : "Projects",
             "xtype" : "TreeViewColumn"
            }
           ],
           "listeners" : {
            "cursor_changed" : [
             " () => {",
             "    if (_this.is_loading) {",
             "        return;",
             "    }",
             "    ",
             "    Gtk.TreeIter iter;",
             "    Gtk.TreeModel mod;",
             "            ",
             "    var s = this.el.get_selection();",
             "    if (!s.get_selected(out mod, out iter)) {",
             "        return;",
             "    }",
             "    ",
             "    GLib.Value gval;",
             "",
             "    mod.get_value(iter, 1 , out gval);",
             "    var project = (Project.Project)gval.get_object();",
             "    ",
             "    _this.onProjectSelected(project);",
             "    ",
             "}  "
            ]
           },
           "xtype" : "TreeView"
          }
         ],
         "xtype" : "ScrolledWindow"
        },
        {
         "$ xns" : "Gtk",
         "* init" : "  this.el.set_policy (Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC);",
         "* pack" : "add",
         "Gtk.ShadowType shadow_type" : "Gtk.ShadowType.IN",
         "bool expand" : true,
         "id" : "iconscroll",
         "int width_request" : 600,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* init" : [
            "{",
            "",
            "}",
            ""
           ],
           "* pack" : "add",
           "bool has_tooltip" : true,
           "id" : "iconview",
           "int item_width" : 100,
           "int markup_column" : 1,
           "int pixbuf_column" : 3,
           "items" : [
            {
             "$ columns" : "typeof(Object), typeof(string), typeof(string), typeof(Gdk.Pixbuf), typeof(Gdk.Pixbuf) ",
             "$ xns" : "Gtk",
             "* prop" : "model",
             "id" : "iconmodel",
             "int n_columns" : 4,
             "xtype" : "ListStore"
            }
           ],
           "listeners" : {
            "item_activated" : [
             "(path) => {",
             "    ",
             "    _this.win.windowstate.project = _this.selectedProject;",
             "    _this.el.hide();",
             "    ",
             "    ",
             " \tGtk.TreeIter iter;",
             "   ",
             "            ",
             "\tthis.el.model.get_iter(out iter, path);",
             "    ",
             "    GLib.Value gval;",
             "",
             "    this.el.model.get_value(iter, 0 , out gval);",
             "    var file = (JsRender.JsRender)gval;",
             "    ",
             "    ",
             "    _this.win.windowstate.fileViewOpen(file, _this.new_window);",
             "",
             "    ",
             "    ",
             "}"
            ],
            "query_tooltip" : [
             "(x, y, keyboard_tooltip, tooltip) => {",
             "",
             "\tGtk.TreePath path;",
             "\tGtk.CellRenderer cell;",
             "\tvar s = _this.iconview.el.get_item_at_pos(x,y + (int) _this.iconscroll.el.vadjustment.value, out path, out cell);",
             "\t",
             "\t",
             "   // GLib.debug(\"Tooltip? %d,%d scroll: %d\",x,y, (int)_this.iconscroll.el.vadjustment.value);",
             "\t ",
             "\t",
             "\tif (path == null) {",
             "\t\t// GLib.debug(\"Tooltip? - no path\");",
             "\t\treturn false;",
             "\t}",
             "\t",
             "\tGtk.TreeIter iter;",
             "\t_this.iconmodel.el.get_iter(out iter, path);",
             "\tGLib.Value val;",
             "\t_this.iconmodel.el.get_value(iter, 4, out val);",
             "\t",
             "\ttooltip.set_icon((Gdk.Pixbuf) val.get_object());",
             "\t _this.iconview.el.set_tooltip_item(tooltip, path);",
             "\treturn true;",
             "}",
             ""
            ]
           },
           "xtype" : "IconView"
          }
         ],
         "xtype" : "ScrolledWindow"
        },
        {
         "$ xns" : "Gtk",
         "* init" : "  this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
         "* pack" : "add",
         "Gtk.ShadowType shadow_type" : "Gtk.ShadowType.IN",
         "bool expand" : true,
         "bool visible" : false,
         "id" : "file_container",
         "int width_request" : 100,
         "items" : [
          {
           "$ enable_tree_lines" : true,
           "$ headers_visible" : true,
           "$ xns" : "Gtk",
           "* init" : [
            "  var description = new Pango.FontDescription();",
            "     description.set_size(9000);",
            "    this.el.override_font(description);     ",
            "                    ",
            "    var selection = this.el.get_selection();",
            "    selection.set_mode( Gtk.SelectionMode.SINGLE);",
            " ",
            "",
            "    ",
            "   ",
            " "
           ],
           "* pack" : "add",
           "bool activate_on_single_click" : false,
           "bool expand" : true,
           "id" : "fileview",
           "items" : [
            {
             "$ columns" : "typeof(string), typeof(string)",
             "$ xns" : "Gtk",
             "* init" : [
              "{",
              "   this.el.set_sort_func(0, (mod,a,b) => {",
              "       GLib.Value ga, gb;",
              "       mod.get_value(a,0, out ga);",
              "       mod.get_value(b,0, out gb);",
              "        ",
              "        if ((string)ga == (string)gb) {",
              "            return 0;",
              "        }",
              "        return (string)ga > (string)gb ? 1 : -1;",
              "   }); ",
              " ",
              "",
              "}",
              ""
             ],
             "* pack" : "set_model",
             "id" : "filemodel",
             "n_columns" : 2,
             "xtype" : "TreeStore"
            },
            {
             "$ xns" : "Gtk",
             "* init" : [
              "",
              "    this.el.add_attribute(_this.filenamecol.el , \"markup\", 0  );",
              " "
             ],
             "* pack" : "append_column",
             "items" : [
              {
               "$ xns" : "Gtk",
               "* pack" : "pack_start,true",
               "id" : "filenamecol",
               "xtype" : "CellRendererText"
              }
             ],
             "utf8 title" : "File",
             "xtype" : "TreeViewColumn"
            }
           ],
           "listeners" : {
            "cursor_changed" : [
             " () => {",
             " /*",
             "    if (_this.is_loading) {",
             "        return;",
             "    }",
             "    ",
             "    Gtk.TreeIter iter;",
             "    Gtk.TreeModel mod;",
             "            ",
             "    var s = this.el.get_selection();",
             "    if (!s.get_selected(out mod, out iter)) {",
             "        return;",
             "    }",
             "    ",
             "    GLib.Value gval;",
             "",
             "    mod.get_value(iter, 1 , out gval);",
             "    var project = (Project.Project)gval.get_object();",
             "    ",
             "    _this.project_selected(project);",
             "    */",
             "}  "
            ],
            "row_activated" : [
             "(path, col) => {",
             "",
             "\tGtk.TreeIter iter;",
             "   ",
             "            ",
             "\tthis.el.model.get_iter(out iter, path);",
             "    ",
             "    GLib.Value gval;",
             "",
             "    this.el.model.get_value(iter, 1 , out gval);",
             "   var fn = (string)gval;",
             "    if (fn.length < 1) {",
             "    \treturn;",
             "\t}",
             "    _this.win.windowstate.project = _this.selectedProject;",
             "     _this.el.hide();",
             "    ",
             "    var f = JsRender.JsRender.factory(\"PlainFile\", _this.selectedProject, fn);",
             "   ",
             "   ",
             "    _this.win.windowstate.fileViewOpen(f, _this.new_window);",
             "   ",
             "    ",
             "}"
            ]
           },
           "xtype" : "TreeView"
          }
         ],
         "xtype" : "ScrolledWindow"
        }
       ],
       "xtype" : "Box"
      }
     ],
     "xtype" : "Box"
    }
   ],
   "listeners" : {
    "hide" : [
     "( ) => {",
     "\t// save...",
     "\t//this.load();",
     "\t//if (project != null) {",
     "//\t\tthis.selectProject(project);",
     "//\t}",
     " \tif (_this.win.windowstate.project == null) {",
     " \t\tthis.el.show();",
     "\t}",
     "}"
    ]
   },
   "xtype" : "Popover",
   "| void load" : [
    "() {",
    "     // clear list...",
    "    ",
    "     if (_this.is_loaded) {",
    "         return;",
    "     }",
    "     _this.is_loading = true;",
    "        ",
    "     _this.is_loaded = true;",
    "     ",
    "     Project.Project.loadAll();",
    "     var projects = Project.Project.allProjectsByName();",
    "     ",
    "     Gtk.TreeIter iter;",
    "     var m = this.model.el;",
    "     m.clear();",
    "          ",
    "     for (var i = 0; i < projects.size; i++) {",
    "        m.append(out iter);",
    "        m.set(iter,   0,projects.get(i).name );",
    "        ",
    "        var o =  GLib.Value(typeof(Object));",
    "        o.set_object((Object)projects.get(i));",
    "                   ",
    "        m.set_value(iter, 1, o);",
    "     ",
    "     }",
    "     m.set_sort_column_id(0, Gtk.SortType.ASCENDING);",
    "     _this.is_loading = false;      ",
    "}",
    ""
   ],
   "| void onProjectSelected" : [
    "(Project.Project project) {",
    "\tthis.selectedProject = project;",
    "\tproject.scanDirs();",
    "\t//this.clutterfiles.loadProject(proj);",
    "\t",
    "\t",
    "\t ",
    "",
    "    ",
    "    ",
    "    //this.project_title_name.el.text = pr.name;",
    "    //this.project_title_path.el.text = pr.firstPath();",
    "    ",
    "    // file items contains a reference until we reload ...",
    "  \t Gdk.Pixbuf pixbuf = null;",
    "  \tGdk.Pixbuf bigpixbuf = null;",
    "\t Gtk.TreeIter iter;",
    "     var m = this.iconmodel.el;",
    "     m.clear();",
    " ",
    "    var fiter = project.sortedFiles().list_iterator();",
    "    while (fiter.next()) {",
    "        m.append(out iter);",
    "        var file = fiter.get();",
    "        m.set(iter,   0,file ); // zero contains the file reference",
    "        m.set(iter,   1,file.nickType() + \"\\n\" + file.nickName()); // marked up title?",
    "        m.set(iter,   2,file.nickType() ); // file type?",
    "        ",
    "        ",
    "        var fname = file.getIconFileName(false);",
    "        try {",
    "\t\t    if (FileUtils.test(fname, FileTest.EXISTS)) {",
    "\t\t        var npixbuf = new Gdk.Pixbuf.from_file(fname);",
    "\t\t        pixbuf = npixbuf.scale_simple(92, (int) (npixbuf.height * 92.0 /npixbuf.width * 1.0 )",
    "\t\t\t\t    , Gdk.InterpType.NEAREST) ;",
    "\t\t\t\tbigpixbuf = npixbuf.scale_simple(368, (int) (npixbuf.height * 368.0 /npixbuf.width * 1.0 )",
    "\t\t\t\t    , Gdk.InterpType.NEAREST) ;",
    "\t\t\t\t",
    "\t\t    } ",
    "\t\t} catch (Error e) {",
    "\t\t    // noop",
    "\t\t",
    "\t\t}",
    "        if (pixbuf == null) {",
    "        ",
    "\t\t    try {",
    "\t\t        if (_this.missing_thumb_pixbuf == null) {",
    "\t\t            var icon_theme = Gtk.IconTheme.get_default ();",
    "\t\t            _this.missing_thumb_pixbuf = icon_theme.load_icon (\"package-x-generic\", 92, 0);",
    "\t\t            _this.missing_thumb_pixbuf.ref();",
    "\t\t        }",
    "\t\t        pixbuf = _this.missing_thumb_pixbuf;",
    "\t\t        bigpixbuf = _this.missing_thumb_pixbuf;",
    "",
    "\t\t    } catch (Error e) {",
    "\t\t        // noop?",
    "\t\t    }",
    "\t\t}",
    "\t\t",
    "\t\t",
    "\t\t",
    "        m.set(iter,   3,pixbuf);",
    "        m.set(iter,   4,bigpixbuf);",
    "      ",
    "        // this needs to add to the iconview?",
    "        ",
    "        //var a = new Xcls_fileitem(this,fiter.get());",
    "        //this.fileitems.add(a);",
    "",
    "        //this.filelayout.el.add_child(a.el);",
    "    }",
    "    ",
    "    ",
    "     this.filemodel.el.clear();",
    "    ",
    "    // folders...",
    "    ",
    "    if (!(project is Project.Gtk)) {",
    "        print (\"not gtk... skipping files\");",
    "        this.file_container.el.hide();",
    "        return;",
    "    }",
    "    this.file_container.el.show();",
    "    var gpr = (Project.Gtk)project;",
    "     var def = gpr.compilegroups.get(\"_default_\");",
    "     // not sure why the above is returng null!??",
    "     if (def == null) {",
    " \t\tdef = new Project.GtkValaSettings(\"_default_\"); ",
    " \t\tgpr.compilegroups.set(\"_default_\", def);",
    "     }",
    "\t var items  = def.sources;",
    "\t\t ",
    "\t Gtk.TreeIter citer;  // folder iter",
    "\t  Gtk.TreeIter fxiter;  // file iter",
    "\tfor(var i =0 ; i < items.size; i++) {",
    "\t     print (\"cheking folder %s\\n\", items.get(i));",
    "\t     var files = gpr.filesForOpen(items.get(i));",
    "\t     if (files.size < 1) {",
    "\t        continue;",
    "\t     }",
    "\t\t this.filemodel.el.append(out citer,null);",
    "\t\t this.filemodel.el.set(citer, 0, GLib.Path.get_basename(items.get(i)));",
    "\t\t this.filemodel.el.set(citer, 1, null); // parent (empty as it's a folder)",
    "\t\t",
    "\t\t",
    "\t    // add the directory... items.get(i);",
    "\t    //var x = new Xcls_folderitem(this,items.get(i));",
    "\t    //this.fileitems.add(x);",
    "\t    //this.filelayout.el.add_child(x.el);",
    "\t    ",
    "\t    ",
    "\t    for(var j =0 ; j < files.size; j++) {",
    "\t    ",
    "\t\t    this.filemodel.el.insert(out fxiter,citer, -1);",
    "\t     \tthis.filemodel.el.set(fxiter, 0,  GLib.Path.get_basename(files.get(j))); // filename",
    "\t\t \tthis.filemodel.el.set(fxiter, 1, files.get(j)); // Folder?",
    "\t         ",
    "\t        ",
    "\t    }",
    "\t    ",
    "\t    ",
    "\t    //this.el.set_value(citer, 1,   items.get(i) );",
    "\t}",
    "    _this.fileview.el.expand_all();",
    "    ",
    "\t",
    "}",
    ""
   ],
   "| void selectProject" : [
    "(Project.Project project) {",
    "    ",
    "    var sel = _this.view.el.get_selection();",
    "    ",
    "    sel.unselect_all();",
    "    ",
    "    var found = false;",
    "    _this.model.el.foreach((mod, path, iter) => {",
    "        GLib.Value val;",
    "    ",
    "        mod.get_value(iter, 1, out val);",
    "        if ( ( (Project.Project)val.get_object()).fn != project.fn) {",
    "            print(\"SKIP %s != %s\\n\", ((Project.Project)val.get_object()).name , project.name);",
    "            return false;//continue",
    "        }",
    "        sel.select_iter(iter);",
    "\t\tthis.selectedProject = project;",
    "        this.onProjectSelected(project);",
    "        found = true;",
    "        return true;",
    "        ",
    "    ",
    "    });",
    "     if (!found) {",
    "\t    print(\"tried to select %s, could not find it\", project.name);",
    "    }",
    "}",
    ""
   ],
   "| void setMainWindow" : [
    "(Xcls_MainWindow win) {",
    "\tthis.win = win;",
    "\t ",
    "}",
    ""
   ],
   "| void show" : [
    "(Gtk.Widget on_el, Project.Project? project, bool new_window) {",
    "\t//this.editor.show( file, node, ptype, key);",
    "\t",
    "\tthis.new_window = new_window;",
    "\t\t// save...",
    "\tthis.load();",
    "\tif (project != null) {",
    "\t\tthis.selectProject(project);",
    "\t}",
    "\t",
    "\t",
    "    int w,h;",
    "    this.win.el.get_size(out w, out h);",
    "    ",
    "    // left tree = 250, editor area = 500?",
    "    ",
    "    // min 450?",
    "\t// max hieght ...",
    "\t",
    "\tvar  ww =  on_el.get_allocated_width();",
    "\t",
    "\t// width = should be max = w-ww , or 600 at best..?",
    "\t ",
    "    this.el.set_size_request( w, h); // same as parent...",
    "",
    "",
    "\tthis.el.set_modal(true);",
    "\tthis.el.set_relative_to(on_el);",
    "",
    "\t//this.el.set_position(Gtk.PositionType.BOTTOM);",
    "",
    "\t// window + header?",
    " ",
    "\tthis.el.show_all();",
    "    //while(Gtk.events_pending()) { ",
    "    //        Gtk.main_iteration();   // why?",
    "    //}  ",
    "",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "PopoverFiles",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/PopoverFiles.bjs",
 "permname" : "",
 "title" : ""
}