{
 "build_module" : "builder",
 "items" : [
  {
   "# GtkSource.SearchContext searchcontext" : "null",
   "# JsRender.JsRender? file" : "null",
   "# JsRender.Node node" : "null",
   "# JsRender.NodeProp? prop" : "null",
   "# Xcls_MainWindow window" : "null",
   "# bool dirty" : false,
   "# bool pos" : false,
   "# int pos_root_x" : "",
   "# int pos_root_y" : "",
   "# string activeEditor" : "\"\"",
   "$ homogeneous" : false,
   "$ xns" : "Gtk",
   "* pack" : "append",
   "@ void save" : "()",
   "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
   "bool hexpand" : true,
   "bool vexpand" : true,
   "int last_search_end" : 0,
   "items" : [
    {
     "$ homogeneous" : false,
     "$ xns" : "Gtk",
     "* pack" : "append",
     "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
     "items" : [
      {
       "$ xns" : "Gtk",
       "* pack" : "append",
       "bool always_show_image" : true,
       "id" : "save_button",
       "label" : "Save",
       "listeners" : {
        "clicked" : [
         " () => { ",
         "    _this.saveContents();",
         "}",
         "  "
        ]
       },
       "string icon_name" : "document-save",
       "xtype" : "Button"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "append",
       "bool hexpand" : true,
       "xtype" : "Label"
      },
      {
       "$ xns" : "Gtk",
       "* ctor" : "new Gtk.Scale.with_range (Gtk.Orientation.HORIZONTAL,6, 30, 1)",
       "* init" : [
        "{",
        "\tthis.el.set_range(6,30);",
        "\tthis.el.set_value(8);",
        "}",
        ""
       ],
       "* pack" : "append",
       "bool draw_value" : true,
       "bool has_origin" : true,
       "bool sensitive" : true,
       "int digits" : 0,
       "int width_request" : 200,
       "listeners" : {
        "change_value" : [
         "(st, val ) => {",
         "\t ",
         "\t   ",
         "\t  _this.view.css.load_from_data(",
         "\t  \t\t\"#editor-view { font: %dpx monospace; }\".printf((int)val).data",
         "\t   );",
         "     ",
         " \treturn false;",
         "}"
        ]
       },
       "xtype" : "Scale"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "append",
       "bool always_show_image" : true,
       "id" : "close_btn",
       "listeners" : {
        "clicked" : [
         " () => { ",
         "    _this.saveContents();",
         "    _this.window.windowstate.switchState(WindowState.State.PREVIEW);",
         "}",
         "  "
        ]
       },
       "string icon_name" : "window-close",
       "xtype" : "Button"
      }
     ],
     "xtype" : "Box"
    },
    {
     "$ xns" : "Gtk",
     "* init" : [
      "this.el.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
      ""
     ],
     "* pack" : "append",
     "bool vexpand" : true,
     "id" : "RightEditor",
     "items" : [
      {
       "# Gtk.CssProvider css" : "null",
       "$ gboolean auto_indent" : true,
       "$ show_line_numbers" : true,
       "$ xns" : "GtkSource",
       "* init" : [
        " ",
        "",
        "\tthis.css = new Gtk.CssProvider();",
        " ",
        "\tthis.css.load_from_data(\"#editor-view { font:  10px monospace;}\".data);",
        "\t ",
        "\tthis.el.get_style_context().add_provider(this.css,Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);",
        "\t ",
        "\t\t ",
        "",
        "\t       ",
        "\tthis.el.completion.add_provider(new Palete.CompletionProvider(_this));",
        "     ",
        "    ",
        "\tthis.el.completion.unblock_interactive();",
        "\tthis.el.completion.select_on_show\t\t\t= true; // select",
        "",
        "\tthis.el.completion.remember_info_visibility\t\t= true;",
        "    ",
        "  ",
        "    var attrs = new GtkSource.MarkAttributes();",
        "    var  pink =   Gdk.RGBA();",
        "    pink.parse ( \"pink\");",
        "    attrs.set_background ( pink);",
        "    attrs.set_icon_name ( \"process-stop\");    ",
        "    attrs.query_tooltip_text.connect(( mark) => {",
        "        //print(\"tooltip query? %s\\n\", mark.name);",
        "        return mark.name;",
        "    });",
        "    ",
        "    this.el.set_mark_attributes (\"ERR\", attrs, 1);",
        "    ",
        "     var wattrs = new GtkSource.MarkAttributes();",
        "    var  blue =   Gdk.RGBA();",
        "    blue.parse ( \"#ABF4EB\");",
        "    wattrs.set_background ( blue);",
        "    wattrs.set_icon_name ( \"process-stop\");    ",
        "    wattrs.query_tooltip_text.connect(( mark) => {",
        "        //print(\"tooltip query? %s\\n\", mark.name);",
        "        return mark.name;",
        "    });",
        "    ",
        "    this.el.set_mark_attributes (\"WARN\", wattrs, 1);",
        "    ",
        " ",
        "    ",
        "     var dattrs = new GtkSource.MarkAttributes();",
        "    var  purple =   Gdk.RGBA();",
        "    purple.parse ( \"#EEA9FF\");",
        "    dattrs.set_background ( purple);",
        "    dattrs.set_icon_name ( \"process-stop\");    ",
        "    dattrs.query_tooltip_text.connect(( mark) => {",
        "        //print(\"tooltip query? %s\\n\", mark.name);",
        "        return mark.name;",
        "    });",
        "    ",
        "    this.el.set_mark_attributes (\"DEPR\", dattrs, 1);",
        "    ",
        "  ",
        "     this.el.get_space_drawer().set_matrix(null);",
        "     this.el.get_space_drawer().set_types_for_locations( ",
        "\t\tGtkSource.SpaceLocationFlags.ALL,",
        "\t\tGtkSource.SpaceTypeFlags.ALL",
        "    );",
        "    this.el.get_space_drawer().set_enable_matrix(true);",
        "    /*",
        "    Gtk.SourceDrawSpacesFlags.LEADING + ",
        "Gtk.SourceDrawSpacesFlags.TRAILING + ",
        "Gtk.SourceDrawSpacesFlags.TAB + ",
        "Gtk.SourceDrawSpacesFlags.SPACE",
        "    */"
       ],
       "* pack" : "set_child",
       "bool insert_spaces_instead_of_tabs" : true,
       "gboolean highlight_current_line" : true,
       "gboolean show_line_marks" : true,
       "id" : "view",
       "indent_width" : 4,
       "items" : [
        {
         "$ xns" : "GtkSource",
         "$ xtype" : "Buffer",
         "* pack" : "set_buffer",
         "bool check_queued" : false,
         "bool check_running" : false,
         "bool enable_undo" : true,
         "id" : "buffer",
         "int error_line" : "-1",
         "listeners" : {
          "changed" : [
           " () => {",
           "    // check syntax??",
           "    // ??needed..??",
           "    _this.save_button.el.sensitive = true;",
           "    print(\"EDITOR CHANGED\");",
           "    this.checkSyntax();",
           "   ",
           "    _this.dirty = true;",
           "",
           "    // this.get('/LeftPanel.model').changed(  str , false);",
           "    return ;",
           "}",
           ""
          ]
         },
         "| bool checkSyntax" : [
          " () {",
          " ",
          "    if (this.check_running) {",
          "        print(\"Check is running\\n\");",
          "        if (this.check_queued) { ",
          "            print(\"Check is already queued\");",
          "            return true;",
          "        }",
          "        this.check_queued = true;",
          "        print(\"Adding queued Check \");",
          "        GLib.Timeout.add_seconds(1, () => {",
          "            this.check_queued = false;",
          "            ",
          "            this.checkSyntax();",
          "            return false;",
          "        });",
          "    ",
          "",
          "        return true;",
          "    }",
          "    var str = this.toString();",
          "    ",
          "    // needed???",
          "    if (this.error_line > 0) {",
          "         Gtk.TextIter start;",
          "         Gtk.TextIter end;     ",
          "        this.el.get_bounds (out start, out end);",
          "",
          "        this.el.remove_source_marks (start, end, null);",
          "    }",
          "    if (str.length < 1) {",
          "        print(\"checkSyntax - empty string?\\n\");",
          "        return true;",
          "    }",
          "    ",
          "    // bit presumptiona",
          "    if (_this.file.xtype == \"PlainFile\" && _this.file.project.xtype == \"Gtk\") {",
          "    ",
          "        // assume it's gtk...",
          "           this.check_running = true;",
          " ",
          "         if (!BuilderApplication.valasource.checkPlainFileSpawn(",
          "\t\t\t   _this.file,",
          "\t\t\t\tstr",
          "\t\t\t )) {",
          "\t\t\t\t    this.check_running = false;",
          "\t\t\t\t}",
          "\t",
          "        return true;",
          "    ",
          "    }",
          "   if (_this.file == null) {",
          "       return true;",
          "   }",
          "    var p = _this.file.project.palete;",
          "    ",
          "",
          "     ",
          "    this.check_running = true;",
          "    ",
          "    ",
          "    if (_this.file.language == \"js\") {",
          "        this.check_running = false;",
          "        print(\"calling validate javascript\\n\"); ",
          "        Gee.HashMap<int,string> errors;",
          "        p.javascriptHasErrors(",
          "    \t\t_this.window.windowstate,",
          "            str, ",
          "             _this.prop,",
          "            _this.file,   // no reference not node?",
          "            out errors",
          "        );",
          "        return this.highlightErrors(errors);    ",
          "        ",
          "    }",
          "        ",
          "        ",
          "    print(\"calling validate vala\\n\");    ",
          "    // clear the buttons.",
          " ",
          "    ",
          "   if (! BuilderApplication.valasource.checkFileWithNodePropChange(",
          "        _this.file,",
          "        _this.node,",
          "         _this.prop,        ",
          "            str",
          "        )) {",
          "        this.check_running = false;",
          "    } ",
          "     ",
          "    ",
          "    ",
          "    //print(\"done mark line\\n\");",
          "     ",
          "    return true; // at present allow saving - even if it's invalid..",
          "}",
          ""
         ],
         "| bool highlightErrors" : [
          "( Gee.HashMap<int,string> validate_res) {",
          "         ",
          "        this.error_line = validate_res.size;",
          "",
          "        if (this.error_line < 1) {",
          "              return true;",
          "        }",
          "        var tlines = this.el.get_line_count ();",
          "        Gtk.TextIter iter;",
          "        var valiter = validate_res.map_iterator();",
          "        while (valiter.next()) {",
          "        ",
          "    //        print(\"get inter\\n\");",
          "            var eline = valiter.get_key();",
          "            if (eline > tlines) {",
          "                continue;",
          "            }",
          "            this.el.get_iter_at_line( out iter, eline);",
          "            //print(\"mark line\\n\");",
          "            this.el.create_source_mark(valiter.get_value(), \"ERR\", iter);",
          "        }   ",
          "        return false;",
          "    }"
         ],
         "| bool highlightErrorsJson" : [
          "(string type, Json.Object obj) {",
          "\tGtk.TextIter start;",
          "\tGtk.TextIter end;     ",
          "\tthis.el.get_bounds (out start, out end);",
          "",
          "\tthis.el.remove_source_marks (start, end, type);",
          "\t\t ",
          "",
          "     // we should highlight other types of errors..",
          "    ",
          "    if (!obj.has_member(type)) {",
          "        print(\"Return has no errors\\n\");",
          "        return true;",
          "    }",
          "    ",
          "    if (_this.window.windowstate.state != WindowState.State.CODEONLY ",
          "      ",
          "        ) {",
          "        return true;",
          "    } ",
          "    ",
          "    ",
          "    var err = obj.get_object_member(type);",
          "    ",
          "    ",
          "    if (_this.file == null) {",
          "        return true;",
          "    ",
          "    }",
          "    var valafn = _this.file.path;",
          " ",
          "    if (_this.file.xtype != \"PlainFile\") {",
          "",
          "",
          "        ",
          "        ",
          "         valafn = \"\";",
          "          try {             ",
          "               var  regex = new Regex(\"\\\\.bjs$\");",
          "               // should not happen",
          "              ",
          "             ",
          "                valafn = regex.replace(_this.file.path,_this.file.path.length , 0 , \".vala\");",
          "             } catch (GLib.RegexError e) {",
          "                return true;",
          "            }   ",
          "",
          "",
          "",
          "      }",
          "       if (!err.has_member(valafn)) {",
          "            print(\"File path has no errors\\n\");",
          "            return  true;",
          "        }",
          "",
          "        var lines = err.get_object_member(valafn);",
          "        ",
          "        var offset = 1;",
          "        if (obj.has_member(\"line_offset\")) {",
          "            offset = (int)obj.get_int_member(\"line_offset\") + 1;",
          "        }",
          "    ",
          "",
          "     ",
          "    ",
          "    var tlines = this.el.get_line_count () +1;",
          "    ",
          "    lines.foreach_member((obj, line, node) => {",
          "        ",
          "             Gtk.TextIter iter;",
          "    //        print(\"get inter\\n\");",
          "            var eline = int.parse(line) - offset;",
          "            print(\"GOT ERROR on line %s -- converted to %d\\n\", line,eline);",
          "            ",
          "            ",
          "            if (eline > tlines || eline < 0) {",
          "                return;",
          "            }",
          "            this.el.get_iter_at_line( out iter, eline);",
          "            //print(\"mark line\\n\");",
          "            var msg  = \"Line: %d\".printf(eline+1);",
          "            var ar = lines.get_array_member(line);",
          "            for (var i = 0 ; i < ar.get_length(); i++) {",
          "\t\t    msg += (msg.length > 0) ? \"\\n\" : \"\";",
          "\t\t    msg += ar.get_string_element(i);",
          "\t    }",
          "            ",
          "            ",
          "            this.el.create_source_mark(msg, type, iter);",
          "        } );",
          "        return false;",
          "    ",
          "",
          "",
          "",
          "",
          "}",
          ""
         ],
         "| string toString" : [
          "  () {",
          "    ",
          "    Gtk.TextIter s;",
          "    Gtk.TextIter e;",
          "    this.el.get_start_iter(out s);",
          "    this.el.get_end_iter(out e);",
          "    var ret = this.el.get_text(s,e,true);",
          "    //print(\"TO STRING? \" + ret);",
          "    return ret;",
          "}",
          " "
         ]
        }
       ],
       "string name" : "editor-view",
       "uint tab_width" : 4,
       "xtype" : "View",
       "| void load" : [
        " (string str) {",
        "",
        "// show the help page for the active node..",
        "   //this.get('/Help').show();",
        " ",
        "  // this.get('/BottomPane').el.set_current_page(0);",
        "  \tGLib.debug(\"load called - Reset undo buffer\");",
        "  \t",
        "    var buf = (GtkSource.Buffer)this.el.get_buffer();",
        "    buf.begin_irreversible_action();",
        "    buf.set_text(str, str.length);",
        "    buf.end_irreversible_action();",
        "    ",
        "    var lm = GtkSource.LanguageManager.get_default();",
        "    var lang = \"vala\";",
        "    if (_this.file != null) {",
        "         lang = _this.file.language;",
        "    }",
        "    print(\"lang=%s, content_type = %s\\n\", lang, _this.file.content_type);",
        "    var lg = _this.file.content_type.length > 0  ?",
        "            lm.guess_language(_this.file.path, _this.file.content_type) :",
        "            lm.get_language(lang);",
        "     ",
        "   ",
        "    ((GtkSource.Buffer)(this.el.get_buffer())) .set_language(lg); ",
        "",
        "    this.el.insert_spaces_instead_of_tabs = true;",
        "    if (lg != null) {",
        "\t\tprint(\"sourcelanguage  = %s\\n\", lg.name);",
        "\t\tif (lg.name == \"Vala\") {",
        "\t\t    this.el.insert_spaces_instead_of_tabs = false;",
        "\t\t}",
        "     }",
        "    _this.dirty = false;",
        "    this.el.grab_focus();",
        "    _this.save_button.el.sensitive = false;",
        "}"
       ]
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "add_controller",
       "listeners" : {
        "key_released" : [
         "(keyval, keycode, state) => {",
         "",
         " ",
         "    ",
         "    if (keyval == Gdk.Key.s && (state & Gdk.ModifierType.CONTROL_MASK ) > 0 ) {",
         "        GLib.debug(\"SAVE: ctrl-S  pressed\");",
         "        _this.saveContents();",
         "        return;",
         "    }",
         "    ",
         "    if (keyval == Gdk.Key.g && (state & Gdk.ModifierType.CONTROL_MASK ) > 0 ) {",
         "\t    GLib.debug(\"SAVE: ctrl-g  pressed\");",
         "\t\t_this.forwardSearch(true);",
         "\t    return;",
         "\t}",
         "\tif (keyval == Gdk.Key.f && (state & Gdk.ModifierType.CONTROL_MASK ) > 0 ) {",
         "\t    GLib.debug(\"SAVE: ctrl-f  pressed\");",
         "\t\t_this.search_entry.el.grab_focus();",
         "\t    return;",
         "\t}",
         "    ",
         "   // print(event.key.keyval)",
         "    ",
         "    return;",
         " ",
         " ",
         "}",
         ""
        ]
       },
       "xtype" : "EventControllerKey"
      }
     ],
     "xtype" : "ScrolledWindow"
    },
    {
     "$ xns" : "Gtk",
     "* pack" : "append",
     "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
     "bool homogeneous" : false,
     "bool vexpand" : false,
     "int spacing" : 0,
     "items" : [
      {
       "$ xns" : "Gtk",
       "* init" : [
        "",
        "",
        "this.css = new Gtk.CssProvider();",
        "try {",
        "\tthis.css.load_from_data(\"#editor-search-entry { font:  8px monospace;}\".data);",
        "} catch (Error e) {}",
        "this.el.get_style_context().add_provider(this.css,Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);",
        "",
        "",
        ""
       ],
       "* pack" : "append",
       "Gtk.CssProvider css" : "",
       "bool hexpand" : true,
       "id" : "search_entry",
       "int width_request" : 300,
       "items" : [
        {
         "$ xns" : "Gtk",
         "listeners" : {
          "key_pressed" : [
           "(keyval, keycode, state) => {",
           "",
           "\tif (keyval == Gdk.Key.g && (state & Gdk.ModifierType.CONTROL_MASK ) > 0 ) {",
           "\t    GLib.debug(\"SAVE: ctrl-g  pressed\");",
           "\t\t_this.forwardSearch(true);",
           "\t    return true;",
           "\t}",
           "    ",
           "  ",
           " \tif (keyval == Gdk.Key.Return && _this.search_entry.el.text.length > 0) {",
           "\t\t//var res =",
           "\t\t _this.search(_this.search_entry.el.text);",
           "\t\t _this.search_results.updateResults();",
           "",
           "\t\tGLib.Timeout.add_seconds(2,() => {",
           "\t\t\t _this.search_results.updateResults();",
           "\t\t\t return false;",
           "\t\t });",
           "\t ",
           "\t\t",
           "\t    return true;",
           "",
           "\t}    ",
           "   // print(event.key.keyval)",
           "   ",
           "    return false;",
           "}",
           ""
          ]
         },
         "xtype" : "EventControllerKey"
        }
       ],
       "listeners" : {
        "search_changed" : [
         "( ) => {",
         "",
         "_this.search(_this.search_entry.el.text);",
         "\t _this.search_results.updateResults();",
         "",
         "\tGLib.Timeout.add_seconds(1,() => {",
         "\t\t _this.search_results.updateResults();",
         "\t\t return false;",
         "\t });",
         "}",
         ""
        ]
       },
       "string name" : "editor-search-entry",
       "string placeholder_text" : "Press enter to search",
       "uint search_delay" : 3,
       "xtype" : "SearchEntry",
       "| void forwardSearch" : [
        "(bool change_focus) {",
        "",
        "",
        "\t_this.forwardSearch(change_focus);",
        "",
        "/*",
        "",
        "\tswitch(_this.windowstate.state) {",
        "\t\tcase WindowState.State.CODEONLY:",
        "\t\t//case WindowState.State.CODE:",
        "\t\t\t// search the code being edited..",
        "\t\t\t_this.windowstate.code_editor_tab.forwardSearch(change_focus);",
        "\t\t\t ",
        "\t\t\tbreak;",
        "\t\tcase WindowState.State.PREVIEW:",
        "\t\t\tif (_this.windowstate.file.xtype == \"Gtk\") {",
        "\t\t\t\t_this.windowstate.window_gladeview.forwardSearch(change_focus);",
        "\t\t\t} else { ",
        "\t\t\t\t _this.windowstate.window_rooview.forwardSearch(change_focus);",
        "\t\t\t}",
        "\t\t",
        "\t\t\tbreak;",
        "\t}",
        "\t*/",
        "\t",
        "}",
        ""
       ]
      },
      {
       "$ Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
       "$ xns" : "Gtk",
       "* pack" : "append",
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : "append",
         "bool always_show_image" : true,
         "bool visible" : true,
         "id" : "search_results",
         "listeners" : {
          "clicked" : [
           "() => {",
           "/*",
           "    if (this.popup == null) {",
           "        this.popup = new Xcls_ValaCompileErrors();",
           "        this.popup.window = _this;",
           "    }",
           "   ",
           "    ",
           "    this.popup.show(this.notices, this.el);",
           "    */",
           "  ",
           "}"
          ]
         },
         "xtype" : "Button",
         "| void updateResults" : [
          "() {",
          "\tthis.el.visible = true;",
          "\t",
          "\tvar res = _this.searchcontext.get_occurrences_count();",
          "\tif (res < 0) {",
          "\t\t_this.search_results.el.label = \"??? Matches\";\t\t",
          "\t\treturn;",
          "\t}",
          "",
          "\t_this.nextBtn.el.sensitive = false;",
          "\t_this.backBtn.el.sensitive = false;\t",
          "",
          "\tif (res > 0) {",
          "\t\t_this.search_results.el.label = \"%d Matches\".printf(res);",
          "\t\t_this.nextBtn.el.sensitive = true;",
          "\t\t_this.backBtn.el.sensitive = true;",
          "\t\treturn;",
          "\t} ",
          "\t_this.search_results.el.label = \"No Matches\";",
          "\t",
          "}"
         ]
        }
       ],
       "xtype" : "Box"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "append",
       "bool always_show_image" : true,
       "bool sensitive" : false,
       "id" : "nextBtn",
       "listeners" : {
        "clicked" : [
         "(event) => {",
         "",
         "\t_this.forwardSearch(true);",
         "\t",
         "\t ",
         "}",
         ""
        ]
       },
       "string icon_name" : "go-down",
       "string label" : "Next",
       "xtype" : "Button"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "append",
       "bool always_show_image" : true,
       "bool sensitive" : false,
       "id" : "backBtn",
       "listeners" : {
        "clicked" : [
         "(event) => {",
         "",
         "\t_this.backSearch(true);",
         "\t ",
         "}",
         ""
        ]
       },
       "string icon_name" : "go-up",
       "string label" : "Previous",
       "xtype" : "Button"
      },
      {
       "$ xns" : "Gtk",
       "* init" : [
        "{",
        "\t/*this.el.menu_model = new GLib.Menu();",
        "\tvar mm = this.el.menu_model;",
        "\tmm.append_item( new GLib.MenuItem(\"Case Sensitive\") );",
        "\tmm.append_item( new GLib.MenuItem(\"Regex\") );",
        "\tmm.append_item( new GLib.MenuItem(\"Multi-line\") );",
        "\t*/",
        "}",
        ""
       ],
       "* pack" : "append",
       "bool always_show_image" : true,
       "items" : [
        {
         "$ xns" : "Gtk",
         "* prop" : "popover",
         "id" : "search_settings",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "child",
           "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
           "int spacing" : 0,
           "items" : [
            {
             "$ xns" : "Gtk",
             "* init" : [
              "{",
              "\tthis.el.show();",
              "}",
              ""
             ],
             "id" : "case_sensitive",
             "string label" : "Case Sensitive",
             "xtype" : "CheckButton"
            },
            {
             "$ xns" : "Gtk",
             "* init" : [
              "{",
              "\tthis.el.show();",
              "}",
              ""
             ],
             "id" : "regex",
             "string label" : "Regex",
             "xtype" : "CheckButton"
            },
            {
             "$ xns" : "Gtk",
             "id" : "multiline",
             "string label" : "Multi-line (add \\n)",
             "xtype" : "CheckButton"
            }
           ],
           "xtype" : "Box"
          }
         ],
         "xtype" : "Popover"
        }
       ],
       "string icon_name" : "emblem-system",
       "string label" : "Settings",
       "xtype" : "MenuButton"
      }
     ],
     "xtype" : "Box"
    }
   ],
   "xtype" : "Box",
   "| bool saveContents" : [
    "  ()  {",
    "    ",
    "    ",
    "    if (_this.file == null) {",
    "        return true;",
    "    }",
    "    ",
    "     ",
    "     ",
    "     var str = _this.buffer.toString();",
    "     ",
    "     _this.buffer.checkSyntax();",
    "     ",
    "     ",
    "     ",
    "     // LeftPanel.model.changed(  str , false);",
    "     _this.dirty = false;",
    "     _this.save_button.el.sensitive = false;",
    "     ",
    "    // find the text for the node..",
    "    if (_this.file.xtype != \"PlainFile\") {",
    "       // in theory these properties have to exist!?!",
    "    \tthis.prop.val = str;",
    "        //this.window.windowstate.left_props.reload();",
    "    } else {",
    "        _this.file.setSource(  str );",
    "     }",
    "    ",
    "    // call the signal..",
    "    this.save();",
    "    ",
    "    return true;",
    "",
    "} "
   ],
   "| int search" : [
    "(string in_txt) {",
    "",
    "\tvar s = new GtkSource.SearchSettings();",
    "\ts.case_sensitive = _this.case_sensitive.el.active;",
    "\ts.regex_enabled = _this.regex.el.active;\t",
    "\ts.wrap_around = false;",
    "\t",
    "\tthis.searchcontext = new GtkSource.SearchContext(this.buffer.el,s);",
    "\tthis.searchcontext.set_highlight(true);",
    "\tvar txt = in_txt;",
    "\t",
    "\tif (_this.multiline.el.active) {",
    "\t\ttxt = in_txt.replace(\"\\\\n\", \"\\n\");",
    "\t}",
    "\t",
    "\ts.set_search_text(txt);",
    "\tGtk.TextIter beg, st,en;",
    "\t ",
    "\tthis.buffer.el.get_start_iter(out beg);",
    "\tbool has_wrapped_around;",
    "\tthis.searchcontext.forward(beg, out st, out en, out has_wrapped_around);",
    "\tthis.last_search_end = 0;",
    "\t",
    "\treturn this.searchcontext.get_occurrences_count();",
    "",
    " ",
    "   ",
    "",
    "}",
    ""
   ],
   "| void backSearch" : [
    "(bool change_focus) {",
    "",
    "\tif (this.searchcontext == null) {",
    "\t\treturn;",
    "\t} ",
    "\t",
    "\tGtk.TextIter beg, st,en;",
    "\tbool has_wrapped_around;",
    "\tthis.buffer.el.get_iter_at_offset(out beg, this.last_search_end -1 );",
    "\t",
    "\tif (!this.searchcontext.backward(beg, out st, out en, out has_wrapped_around)) {",
    "\t",
    "\t\tthis.last_search_end = 0;",
    "\t} else {",
    "\t\tthis.last_search_end = en.get_offset();",
    "\t\tif (change_focus) {",
    "\t\t\tthis.view.el.grab_focus();",
    "\t\t}",
    "\t\tthis.buffer.el.place_cursor(st);",
    "\t\tthis.view.el.scroll_to_iter(st,  0.1f, true, 0.0f, 0.5f);",
    "\t}",
    " ",
    "}",
    ""
   ],
   "| void forwardSearch" : [
    "(bool change_focus) {",
    "",
    "\tif (this.searchcontext == null) {",
    "\t\treturn;",
    "\t} ",
    "\t",
    "\tGtk.TextIter beg, st,en;",
    "\t bool has_wrapped_around;",
    "\tthis.buffer.el.get_iter_at_offset(out beg, this.last_search_end);",
    "\tif (!this.searchcontext.forward(beg, out st, out en, out has_wrapped_around)) {",
    "\t",
    "\t\tthis.last_search_end = 0; // not sure if this should happen",
    "\t} else {",
    "\t\tif (has_wrapped_around) {",
    "\t\t\treturn;",
    "\t\t}",
    "\t",
    "\t\tthis.last_search_end = en.get_offset();",
    "\t\tif (change_focus) {",
    "\t\t\tthis.view.el.grab_focus();",
    "\t\t}",
    "\t\tthis.buffer.el.place_cursor(st);",
    "\t\tthis.view.el.scroll_to_iter(st,  0.1f, true, 0.0f, 0.5f);",
    "\t}",
    " ",
    "}",
    ""
   ],
   "| void reset" : [
    "() {",
    "\t this.file = null;    ",
    "     ",
    "    this.node = null;",
    "    this.prop = null;",
    "\tthis.searchcontext = null;",
    "  ",
    "}",
    ""
   ],
   "| void scroll_to_line" : [
    "(int line) {",
    "",
    "\tGLib.Timeout.add(500, () => {",
    "   ",
    "\t\tvar buf = this.view.el.get_buffer();",
    "",
    "\t\tvar sbuf = (GtkSource.Buffer) buf;",
    "",
    "",
    "\t\tGtk.TextIter iter;   ",
    "\t\tsbuf.get_iter_at_line(out iter,  line);",
    "\t\tthis.view.el.scroll_to_iter(iter,  0.1f, true, 0.0f, 0.5f);",
    "\t\treturn false;",
    "\t});   ",
    "}",
    ""
   ],
   "| void show" : [
    "(JsRender.JsRender file, JsRender.Node? node, JsRender.NodeProp? prop)",
    "{",
    "    this.reset();",
    "    this.file = file;    ",
    "    ",
    "    if (file.xtype != \"PlainFile\") {",
    "    \tthis.prop = prop;",
    "        this.node = node;",
    "",
    "        // find the text for the node..",
    "        this.view.load( prop.val );",
    "        this.close_btn.el.show();       ",
    "    ",
    "    } else {",
    "        this.view.load(        file.toSource() );",
    "        this.close_btn.el.hide();",
    "    }",
    " ",
    "}"
   ]
  }
 ],
 "modOrder" : "",
 "name" : "Editor",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/Editor.bjs",
 "permname" : "",
 "title" : ""
}