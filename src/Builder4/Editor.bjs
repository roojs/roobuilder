{
 "build_module" : "builder",
 "items" : [
  {
   "# GtkSource.SearchContext searchcontext" : "null",
   "# JsRender.JsRender? file" : "null",
   "# JsRender.Node node" : "null",
   "# JsRender.NodeProp? prop" : "null",
   "# Xcls_MainWindow window" : "null",
   "# bool dirty" : false,
   "# bool pos" : false,
   "# int pos_root_x" : "",
   "# int pos_root_y" : "",
   "# string activeEditor" : "\"\"",
   "$ homogeneous" : false,
   "$ xns" : "Gtk",
   "@ void save" : "()",
   "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
   "bool hexpand" : true,
   "bool vexpand" : true,
   "int last_search_end" : 0,
   "items" : [
    {
     "$ homogeneous" : false,
     "$ xns" : "Gtk",
     "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
     "bool hexpand" : true,
     "items" : [
      {
       "$ xns" : "Gtk",
       "id" : "save_button",
       "label" : "Save",
       "listeners" : {
        "clicked" : [
         " () => { ",
         "    _this.saveContents();",
         "}",
         "  "
        ]
       },
       "xtype" : "Button"
      },
      {
       "$ xns" : "Gtk",
       "bool hexpand" : true,
       "xtype" : "Label"
      },
      {
       "$ xns" : "Gtk",
       "* ctor" : "new Gtk.Scale.with_range (Gtk.Orientation.HORIZONTAL,6, 30, 1)",
       "* init" : [
        "{",
        "\tthis.el.set_range(6,30);",
        "\tthis.el.set_value(8);",
        "}",
        ""
       ],
       "bool draw_value" : false,
       "bool has_origin" : true,
       "bool sensitive" : true,
       "int digits" : 0,
       "int width_request" : 200,
       "listeners" : {
        "change_value" : [
         "(st, val ) => {",
         "\t ",
         "\t   ",
         "\t  _this.view.css.load_from_string(",
         "\t  \t\t\"#editor-view { font: %dpx monospace; }\".printf((int)val)",
         "\t   );",
         "     ",
         " \treturn false;",
         "}"
        ]
       },
       "xtype" : "Scale"
      },
      {
       "$ xns" : "Gtk",
       "id" : "close_btn",
       "items" : [
        {
         "$ xns" : "Gtk",
         "* prop" : "child",
         "Gtk.IconSize icon_size" : "Gtk.IconSize.NORMAL",
         "string icon_name" : "window-close",
         "xtype" : "Image"
        }
       ],
       "listeners" : {
        "clicked" : [
         " () => { ",
         "    _this.saveContents();",
         "    _this.window.windowstate.switchState(WindowState.State.PREVIEW);",
         "}",
         "  "
        ]
       },
       "string icon_name" : "window-close",
       "xtype" : "Button"
      }
     ],
     "xtype" : "Box"
    },
    {
     "$ xns" : "Gtk",
     "Gtk.PolicyType hscrollbar_policy" : "Gtk.PolicyType.AUTOMATIC",
     "Gtk.PolicyType vscrollbar_policy" : "Gtk.PolicyType.AUTOMATIC",
     "bool overlay_scrolling" : false,
     "bool vexpand" : true,
     "id" : "RightEditor",
     "items" : [
      {
       "# Gtk.CssProvider css" : "null",
       "$ gboolean auto_indent" : true,
       "$ xns" : "GtkSource",
       "* init" : [
        "",
        "",
        "this.css = new Gtk.CssProvider();",
        "",
        "this.css.load_from_string(",
        "\t\"#editor-view { font:  12px monospace;}\"",
        ");",
        " ",
        "Gtk.StyleContext.add_provider_for_display(",
        "\tthis.el.get_display(),",
        "\tthis.css,",
        "\tGtk.STYLE_PROVIDER_PRIORITY_APPLICATION",
        ");",
        "\t",
        " ",
        "\t ",
        "/*",
        "this is pretty flakey - triggers Gtk with  < 0 d",
        " var cp = new GtkSource.CompletionWords(\"test\"); ",
        " cp.minimum_word_size  = 3;",
        " //cp.priority = 100; //?? does this do anything",
        " cp.proposals_batch_size  = 10;",
        " cp.scan_batch_size = 1000;",
        " ",
        "cp.register(_this.buffer.el);",
        "this.el.completion.add_provider(cp);",
        "*/",
        "this.el.completion.add_provider(new Palete.CompletionProvider(_this));",
        "  ",
        "//this.el.completion.unblock_interactive();",
        "this.el.completion.select_on_show = true; // select",
        "//this.el.completion.remember_info_visibility\t = true;",
        "",
        "",
        "var attrs = new GtkSource.MarkAttributes();",
        "var  pink =   Gdk.RGBA();",
        "pink.parse ( \"pink\");",
        "attrs.set_background ( pink);",
        "attrs.set_icon_name ( \"process-stop\");    ",
        "attrs.query_tooltip_text.connect(( mark) => {",
        "     GLib.debug(\"tooltip query? %s\", mark.name);",
        "    return strdup( mark.name);",
        "});",
        " attrs.query_tooltip_markup.connect(( mark) => {",
        "     GLib.debug(\"tooltip query? %s\", mark.name);",
        "    return strdup( mark.name);",
        "});",
        "this.el.set_mark_attributes (\"ERR\", attrs, 1);",
        "attrs.ref();",
        " var wattrs = new GtkSource.MarkAttributes();",
        "var  blue =   Gdk.RGBA();",
        "blue.parse ( \"#ABF4EB\");",
        "wattrs.set_background ( blue);",
        "wattrs.set_icon_name ( \"process-stop\");    ",
        "wattrs.query_tooltip_text.connect(( mark) => {",
        "     GLib.debug(\"tooltip query? %s\", mark.name);",
        "    return strdup(mark.name);",
        "});",
        "wattrs.query_tooltip_markup.connect(( mark) => {",
        "     GLib.debug(\"tooltip query? %s\", mark.name);",
        "    return strdup(mark.name);",
        "});",
        "this.el.set_mark_attributes (\"WARN\", wattrs, 1);",
        "wattrs.ref();",
        "",
        "",
        " var dattrs = new GtkSource.MarkAttributes();",
        "var  purple =   Gdk.RGBA();",
        "purple.parse ( \"#EEA9FF\");",
        "dattrs.set_background ( purple);",
        "dattrs.set_icon_name ( \"process-stop\");    ",
        "dattrs.query_tooltip_text.connect(( mark) => {",
        "\tGLib.debug(\"tooltip query? %s\", mark.name);",
        "    return strdup(mark.name);",
        "});",
        "dattrs.query_tooltip_markup.connect(( mark) => {",
        "\tGLib.debug(\"tooltip query? %s\", mark.name);",
        "    return strdup(mark.name);",
        "});",
        "this.el.set_mark_attributes (\"DEPR\", dattrs, 1);",
        "dattrs.ref();    ",
        "",
        " this.el.get_space_drawer().set_matrix(null);",
        " this.el.get_space_drawer().set_types_for_locations( ",
        "\tGtkSource.SpaceLocationFlags.ALL,",
        "\tGtkSource.SpaceTypeFlags.ALL",
        ");",
        "this.el.get_space_drawer().set_enable_matrix(true);",
        "/*",
        "Gtk.SourceDrawSpacesFlags.LEADING + ",
        "Gtk.SourceDrawSpacesFlags.TRAILING + ",
        "Gtk.SourceDrawSpacesFlags.TAB + ",
        "Gtk.SourceDrawSpacesFlags.SPACE",
        "*/"
       ],
       "* prop" : "child",
       "bool has_tooltip" : true,
       "bool hexpand" : true,
       "bool insert_spaces_instead_of_tabs" : true,
       "bool vexpand" : true,
       "boolean show_line_marks" : true,
       "boolean show_line_numbers" : true,
       "gboolean highlight_current_line" : true,
       "id" : "view",
       "indent_width" : 4,
       "items" : [
        {
         "$ Gee.HashMap<int,string>? xmarks" : "null",
         "$ xns" : "GtkSource",
         "$ xtype" : "Buffer",
         "* prop" : "buffer",
         "bool check_queued" : false,
         "bool enable_undo" : true,
         "id" : "buffer",
         "int error_line" : "-1",
         "listeners" : {
          "changed" : [
           " () => {",
           "    // check syntax??",
           "    // ??needed..??",
           "    _this.save_button.el.sensitive = true;",
           "    print(\"EDITOR CHANGED\");",
           "    this.checkSyntax();",
           "   ",
           "    _this.dirty = true;",
           "",
           "    // this.get('/LeftPanel.model').changed(  str , false);",
           "    return ;",
           "}",
           ""
          ]
         },
         "| bool checkSyntax" : [
          " () {",
          " ",
          "    ",
          "    var str = this.toString();",
          "    ",
          "    // needed???",
          "    if (this.error_line > 0) {",
          "         Gtk.TextIter start;",
          "         Gtk.TextIter end;     ",
          "        this.el.get_bounds (out start, out end);",
          "",
          "        this.el.remove_source_marks (start, end, null);",
          "    }",
          "    if (str.length < 1) {",
          "        print(\"checkSyntax - empty string?\\n\");",
          "        return true;",
          "    }",
          "    ",
          "    // bit presumptiona",
          "    if (_this.file.xtype == \"PlainFile\") {",
          "    ",
          "        // assume it's gtk...",
          "         var  oldcode =_this.file.toSource();",
          "        _this.file.setSource(str);",
          "        _this.file.getLanguageServer().document_change(_this.file);",
          "        _this.file.setSource(oldcode);",
          "        ",
          "\t\t ",
          "        return true;",
          "    ",
          "    }",
          "   if (_this.file == null) {",
          "       return true;",
          "   }",
          " ",
          "    ",
          "",
          "      ",
          "     ",
          "    GLib.debug(\"calling validate\");    ",
          "    // clear the buttons.",
          " \tif (_this.prop.name == \"xns\" || _this.prop.name == \"xtype\") {",
          "\t\treturn true ;",
          "\t}",
          "\tvar oldcode  = _this.prop.val;",
          "\t",
          "\t_this.prop.val = str;",
          "    _this.file.getLanguageServer().document_change(_this.file);",
          "    _this.prop.val = oldcode;",
          "    ",
          "    ",
          "    //print(\"done mark line\\n\");",
          "     ",
          "    return true; // at present allow saving - even if it's invalid..",
          "}",
          ""
         ],
         "| bool highlightErrors" : [
          "( Gee.HashMap<int,string> validate_res) {",
          "         ",
          "\tthis.error_line = validate_res.size;",
          "",
          "\tif (this.error_line < 1) {",
          "\t\treturn true;",
          "\t}",
          "\tvar tlines = this.el.get_line_count ();",
          "\tGtk.TextIter iter;",
          "\tvar valiter = validate_res.map_iterator();",
          "\twhile (valiter.next()) {",
          "",
          "\t//        print(\"get inter\\n\");",
          "\t\tvar eline = valiter.get_key();",
          "\t\tif (eline > tlines) {",
          "\t\t\tcontinue;",
          "\t\t}",
          "\t\tthis.el.get_iter_at_line( out iter, eline);",
          "\t\t//print(\"mark line\\n\");",
          "\t\tthis.el.create_source_mark(valiter.get_value(), \"ERR\", iter);",
          "\t}   ",
          "\treturn false;",
          "}"
         ],
         "| bool highlightErrorsJson" : [
          "(string type, Json.Object obj) {",
          "\tGtk.TextIter start;",
          "\tGtk.TextIter end;     ",
          "\tthis.el.get_bounds (out start, out end);",
          "",
          "\tthis.el.remove_source_marks (start, end, type);",
          "\tGLib.debug(\"highlight errors\");\t\t ",
          "",
          "\t // we should highlight other types of errors..",
          "",
          "\tif (!obj.has_member(type)) {",
          "\t\tGLib.debug(\"Return has no errors\\n\");",
          "\t\treturn true;",
          "\t}",
          "",
          "\tif (_this.window.windowstate.state != WindowState.State.CODEONLY ",
          "\t\t&&",
          "\t\t_this.window.windowstate.state != WindowState.State.CODE",
          "\t\t) {",
          "\t\tGLib.debug(\"windowstate != CODEONLY?\");",
          "\t\t",
          "\t\treturn true;",
          "\t} ",
          "",
          "\t//this.marks = new Gee.HashMap<int,string>();",
          "\tvar err = obj.get_object_member(type);",
          " ",
          "\tif (_this.file == null) {",
          "\t\tGLib.debug(\"file is null?\");",
          "\t\treturn true;",
          "",
          "\t}",
          "\tvar valafn = _this.file.path;",
          "",
          "\tif (_this.file.xtype != \"PlainFile\") {",
          "",
          "\t\tvalafn = \"\";",
          "\t\ttry {             ",
          "\t\t\tvar  regex = new Regex(\"\\\\.bjs$\");",
          "\t\t\t// should not happen",
          "\t      \t\tvalafn = regex.replace(_this.file.path,_this.file.path.length , 0 , \".vala\");",
          "\t\t} catch (GLib.RegexError e) {",
          "\t\t\treturn true;",
          "\t\t}   ",
          "",
          "",
          "",
          "\t}",
          "\tif (!err.has_member(valafn)) {",
          "\t\tGLib.debug(\"File path has no errors\");",
          "\t\treturn  true;",
          "\t}",
          "",
          "\tvar lines = err.get_object_member(valafn);",
          "\t",
          "\tvar offset = 1;",
          "\tif (obj.has_member(\"line_offset\")) { // ?? why??",
          "\t\toffset = (int)obj.get_int_member(\"line_offset\") + 1;",
          "\t}",
          "",
          "",
          "\tvar tlines = this.el.get_line_count () +1;",
          "\t",
          "\tif (_this.prop != null) {",
          "\t",
          "\t\ttlines = _this.prop.end_line + 1;",
          "\t\toffset = _this.prop.start_line + 1;",
          "\t",
          "\t}",
          "\t",
          "",
          "",
          "\tlines.foreach_member((obj, line, node) => {",
          "\t\t",
          "\t     Gtk.TextIter iter;",
          "//        print(\"get inter\\n\");",
          "\t    var eline = int.parse(line) - offset;",
          "\t    GLib.debug(\"GOT ERROR on line %s -- converted to %d  (offset = %d)\\n\", line,eline, offset);",
          "\t    ",
          "\t    ",
          "\t    if (eline > tlines || eline < 0) {",
          "\t        return;",
          "\t    }",
          "\t   ",
          "\t    ",
          "\t    this.el.get_iter_at_line( out iter, eline);",
          "\t    //print(\"mark line\\n\");",
          "\t    var msg  = \"\";",
          "\t    var ar = lines.get_array_member(line);",
          "\t    for (var i = 0 ; i < ar.get_length(); i++) {",
          "\t    \tif (ar.get_string_element(i) == \"Success\") {",
          "\t    \t\tcontinue;",
          "    \t\t}",
          "\t\t\tmsg += (msg.length > 0) ? \"\\n\" : \"\";",
          "\t\t\tmsg += ar.get_string_element(i);",
          "\t\t}",
          "\t\tif (msg == \"\") {",
          "\t\t\treturn;",
          "\t\t}",
          "\t\tmsg = \"Line: %d\".printf(eline+1) +  \" \" + msg;",
          "\t    this.el.create_source_mark(msg, type, iter);",
          "\t    GLib.debug(\"set line %d to %m\", eline, msg);",
          "\t   // this.marks.set(eline, msg);",
          "\t} );",
          "\treturn false;",
          "",
          "",
          "",
          "",
          "",
          "\t}",
          ""
         ],
         "| string toString" : [
          "  () {",
          "    ",
          "    Gtk.TextIter s;",
          "    Gtk.TextIter e;",
          "    this.el.get_start_iter(out s);",
          "    this.el.get_end_iter(out e);",
          "    var ret = this.el.get_text(s,e,true);",
          "    //print(\"TO STRING? \" + ret);",
          "    return ret;",
          "}",
          " "
         ]
        },
        {
         "$ xns" : "Gtk",
         "listeners" : {
          "key_released" : [
           "(keyval, keycode, state) => {",
           "",
           "  ",
           "    if (keyval == Gdk.Key.s && (state & Gdk.ModifierType.CONTROL_MASK ) > 0 ) {",
           "        GLib.debug(\"SAVE: ctrl-S  pressed\");",
           "        _this.saveContents();",
           "        return;",
           "    }",
           "    ",
           "    if (keyval == Gdk.Key.g && (state & Gdk.ModifierType.CONTROL_MASK ) > 0 ) {",
           "\t    GLib.debug(\"SAVE: ctrl-g  pressed\");",
           "\t\t_this.forwardSearch(true);",
           "\t    return;",
           "\t}",
           "\tif (keyval == Gdk.Key.f && (state & Gdk.ModifierType.CONTROL_MASK ) > 0 ) {",
           "\t    GLib.debug(\"SAVE: ctrl-f  pressed\");",
           "\t\t_this.search_entry.el.grab_focus();",
           "\t    return;",
           "\t}",
           "    //_this.view.el.show_completion();",
           "   // print(event.key.keyval)",
           "    ",
           "    return;",
           " ",
           " ",
           "}",
           ""
          ]
         },
         "xtype" : "EventControllerKey"
        }
       ],
       "listeners" : {
        "query_tooltip" : [
         "(x, y, keyboard_tooltip, tooltip) => {",
         "\t",
         "\t//GLib.debug(\"query tooltip\");",
         "\tGtk.TextIter iter;",
         "\tint trailing;",
         "\t",
         "\tvar yoff = (int) _this.RightEditor.el.vadjustment.value;",
         "\t",
         "\t// I think this is problematic - if it's compliing  / updating at same time as query.",
         "\t",
         "\t//if (_this.window.statusbar_compile_spinner.el.spinning) {",
         "\t//\treturn false;",
         "\t//}",
         "\t",
         "\tthis.el.get_iter_at_position (out iter, out trailing,  x,  y + yoff);",
         "\t ",
         "\tvar l = iter.get_line();",
         "",
         "\t",
         "\t ",
         "\t// GLib.debug(\"query tooltip line %d\", (int) l);",
         "\tif (l < 0) {",
         "",
         "\t\treturn false;",
         "\t}",
         "\t/*",
         "\tif (_this.buffer.marks != null && _this.buffer.marks.has_key(l)) {",
         "\t\tGLib.debug(\"line %d setting tip to %s\", l,  _this.buffer.marks.get(l));",
         "\t\ttooltip.set_text(_this.buffer.marks.get(l).dup());",
         "\t\treturn true;",
         "\t}",
         " ",
         "\treturn false;",
         "\t*/",
         "\t",
         "\t  ",
         "\t// this crashes?? - not sure why.",
         "\tvar marks = _this.buffer.el.get_source_marks_at_line(l, \"ERR\");",
         "\tif (marks.is_empty()) {",
         "\t\tmarks = _this.buffer.el.get_source_marks_at_line(l, \"WARN\");",
         "\t}",
         "\tif (marks.is_empty()) {",
         "\t\tmarks = _this.buffer.el.get_source_marks_at_line(l, \"DEPR\");",
         "\t}",
         "\t",
         "\t// GLib.debug(\"query tooltip line %d marks %d\", (int)l, (int) marks.length());",
         "\tvar str = \"\";",
         "\tmarks.@foreach((m) => { ",
         "\t\t//GLib.debug(\"got mark %s\", m.name);",
         "\t\tstr += (str.length > 0 ? \"\\n\" : \"\") + m.category + \": \" + m.name;",
         "\t});",
         "\t// true if there is a mark..",
         "\tif (str.length > 0 ) {",
         "\t\ttooltip.set_text( str );",
         "\t}",
         "\treturn str.length > 0 ? true : false;",
         "\t ",
         "}",
         ""
        ]
       },
       "string name" : "editor-view",
       "uint tab_width" : 4,
       "xtype" : "View",
       "| void load" : [
        " (string str) {",
        "",
        "// show the help page for the active node..",
        "   //this.get('/Help').show();",
        " ",
        "  // this.get('/BottomPane').el.set_current_page(0);",
        "  \tGLib.debug(\"load called - Reset undo buffer\");",
        "  \t",
        "    var buf = (GtkSource.Buffer)this.el.get_buffer();",
        "    buf.begin_irreversible_action();",
        "    buf.set_text(str, str.length);",
        "    buf.end_irreversible_action();",
        "    ",
        "    var lm = GtkSource.LanguageManager.get_default();",
        "    var lang = \"vala\";",
        "    if (_this.file != null) {",
        "         lang = _this.file.language;",
        "    }",
        "    print(\"lang=%s, content_type = %s\\n\", lang, _this.file.content_type);",
        "    var lg = _this.file.content_type.length > 0  ?",
        "            lm.guess_language(_this.file.path, _this.file.content_type) :",
        "            lm.get_language(lang);",
        "     ",
        "   ",
        "    ((GtkSource.Buffer)(this.el.get_buffer())) .set_language(lg); ",
        "",
        "    this.el.insert_spaces_instead_of_tabs = true;",
        "    if (lg != null) {",
        "\t\tprint(\"sourcelanguage  = %s\\n\", lg.name);",
        "\t\tif (lg.name == \"Vala\") {",
        "\t\t    this.el.insert_spaces_instead_of_tabs = false;",
        "\t\t}",
        "     }",
        "    _this.dirty = false;",
        "    this.el.grab_focus();",
        "    _this.save_button.el.sensitive = false;",
        "}"
       ]
      }
     ],
     "xtype" : "ScrolledWindow"
    },
    {
     "$ xns" : "Gtk",
     "* pack" : "append",
     "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
     "bool homogeneous" : false,
     "bool vexpand" : false,
     "int spacing" : 0,
     "items" : [
      {
       "$ xns" : "Gtk",
       "Gtk.CssProvider css" : "",
       "bool hexpand" : true,
       "id" : "search_entry",
       "items" : [
        {
         "$ xns" : "Gtk",
         "listeners" : {
          "key_pressed" : [
           "(keyval, keycode, state) => {",
           "",
           "\tif (keyval == Gdk.Key.g && (state & Gdk.ModifierType.CONTROL_MASK ) > 0 ) {",
           "\t    GLib.debug(\"SAVE: ctrl-g  pressed\");",
           "\t\t_this.forwardSearch(true);",
           "\t    return true;",
           "\t}",
           "    ",
           "  ",
           " \tif (keyval == Gdk.Key.Return && _this.search_entry.el.text.length > 0) {",
           "\t\t_this.forwardSearch(true);",
           "\t\t",
           "\t\t",
           "\t    return true;",
           "",
           "\t}    ",
           "   // print(event.key.keyval)",
           "   ",
           "    return false;",
           "}",
           ""
          ]
         },
         "xtype" : "EventControllerKey"
        }
       ],
       "listeners" : {
        "search_changed" : [
         "( ) => {",
         "",
         "_this.search(_this.search_entry.el.text);",
         "\t _this.search_results.updateResults();",
         "",
         "\tGLib.Timeout.add_seconds(1,() => {",
         "\t\t _this.search_results.updateResults();",
         "\t\t return false;",
         "\t });",
         "}",
         ""
        ]
       },
       "string name" : "editor-search-entry",
       "string placeholder_text" : "Press enter to search",
       "uint search_delay" : 3,
       "xtype" : "SearchEntry",
       "| void forwardSearch" : [
        "(bool change_focus) {",
        "",
        "",
        "\t_this.forwardSearch(change_focus);",
        "",
        "/*",
        "",
        "\tswitch(_this.windowstate.state) {",
        "\t\tcase WindowState.State.CODEONLY:",
        "\t\t//case WindowState.State.CODE:",
        "\t\t\t// search the code being edited..",
        "\t\t\t_this.windowstate.code_editor_tab.forwardSearch(change_focus);",
        "\t\t\t ",
        "\t\t\tbreak;",
        "\t\tcase WindowState.State.PREVIEW:",
        "\t\t\tif (_this.windowstate.file.xtype == \"Gtk\") {",
        "\t\t\t\t_this.windowstate.window_gladeview.forwardSearch(change_focus);",
        "\t\t\t} else { ",
        "\t\t\t\t _this.windowstate.window_rooview.forwardSearch(change_focus);",
        "\t\t\t}",
        "\t\t",
        "\t\t\tbreak;",
        "\t}",
        "\t*/",
        "\t",
        "}",
        ""
       ]
      },
      {
       "$ xns" : "Gtk",
       "id" : "search_results",
       "int margin_end" : 4,
       "int margin_start" : 4,
       "string label" : "No Results",
       "xtype" : "Label",
       "| void updateResults" : [
        "() {",
        "\tthis.el.visible = true;",
        "\t",
        "\tvar res = _this.searchcontext.get_occurrences_count();",
        "\tif (res < 0) {",
        "\t\t_this.search_results.el.label = \"??? Matches\";\t\t",
        "\t\treturn;",
        "\t}",
        "",
        "\t_this.nextBtn.el.sensitive = false;",
        "\t_this.backBtn.el.sensitive = false;\t",
        "",
        "\tif (res > 0) {",
        "\t\t_this.search_results.el.label = \"%d Matches\".printf(res);",
        "\t\t_this.nextBtn.el.sensitive = true;",
        "\t\t_this.backBtn.el.sensitive = true;",
        "\t\treturn;",
        "\t} ",
        "\t_this.search_results.el.label = \"No Matches\";",
        "\t",
        "}"
       ]
      },
      {
       "$ xns" : "Gtk",
       "bool always_show_image" : true,
       "bool sensitive" : false,
       "id" : "nextBtn",
       "listeners" : {
        "clicked" : [
         "(event) => {",
         "",
         "\t_this.forwardSearch(true);",
         "\t",
         "\t ",
         "}",
         ""
        ]
       },
       "string icon_name" : "go-down",
       "xtype" : "Button"
      },
      {
       "$ xns" : "Gtk",
       "bool always_show_image" : true,
       "bool sensitive" : false,
       "id" : "backBtn",
       "listeners" : {
        "clicked" : [
         "(event) => {",
         "",
         "\t_this.backSearch(true);",
         "\t ",
         "}",
         ""
        ]
       },
       "string icon_name" : "go-up",
       "xtype" : "Button"
      },
      {
       "$ xns" : "Gtk",
       "bool always_show_arrow" : true,
       "bool always_show_image" : true,
       "items" : [
        {
         "$ xns" : "Gtk",
         "* prop" : "popover",
         "id" : "search_settings",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "child",
           "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
           "int spacing" : 0,
           "items" : [
            {
             "$ xns" : "Gtk",
             "* init" : [
              "{",
              "\tthis.el.show();",
              "}",
              ""
             ],
             "id" : "case_sensitive",
             "string label" : "Case Sensitive",
             "xtype" : "CheckButton"
            },
            {
             "$ xns" : "Gtk",
             "* init" : [
              "{",
              "\tthis.el.show();",
              "}",
              ""
             ],
             "id" : "regex",
             "string label" : "Regex",
             "xtype" : "CheckButton"
            },
            {
             "$ xns" : "Gtk",
             "id" : "multiline",
             "string label" : "Multi-line (add \\n)",
             "xtype" : "CheckButton"
            }
           ],
           "xtype" : "Box"
          }
         ],
         "xtype" : "Popover"
        }
       ],
       "string icon_name" : "emblem-system",
       "xtype" : "MenuButton"
      }
     ],
     "xtype" : "Box"
    }
   ],
   "xtype" : "Box",
   "| bool saveContents" : [
    "  ()  {",
    "    ",
    "    ",
    "    if (_this.file == null) {",
    "        return true;",
    "    }",
    "    ",
    "     ",
    "     ",
    "     var str = _this.buffer.toString();",
    "     ",
    "     _this.buffer.checkSyntax();",
    "     ",
    "     ",
    "     ",
    "     // LeftPanel.model.changed(  str , false);",
    "     _this.dirty = false;",
    "     _this.save_button.el.sensitive = false;",
    "     ",
    "    // find the text for the node..",
    "    if (_this.file.xtype != \"PlainFile\") {",
    "       // in theory these properties have to exist!?!",
    "    \tthis.prop.val = str;",
    "        //this.window.windowstate.left_props.reload();",
    "    } else {",
    "        _this.file.setSource(  str );",
    "     }",
    "    ",
    "    // call the signal..",
    "    this.save();",
    "    ",
    "    return true;",
    "",
    "} "
   ],
   "| int search" : [
    "(string in_txt) {",
    "",
    "\tvar s = new GtkSource.SearchSettings();",
    "\ts.case_sensitive = _this.case_sensitive.el.active;",
    "\ts.regex_enabled = _this.regex.el.active;\t",
    "\ts.wrap_around = false;",
    "\t",
    "\tthis.searchcontext = new GtkSource.SearchContext(this.buffer.el,s);",
    "\tthis.searchcontext.set_highlight(true);",
    "\tvar txt = in_txt;",
    "\t",
    "\tif (_this.multiline.el.active) {",
    "\t\ttxt = in_txt.replace(\"\\\\n\", \"\\n\");",
    "\t}",
    "\t",
    "\ts.set_search_text(txt);",
    "\tGtk.TextIter beg, st,en;",
    "\t ",
    "\tthis.buffer.el.get_start_iter(out beg);",
    "\tbool has_wrapped_around;",
    "\tthis.searchcontext.forward(beg, out st, out en, out has_wrapped_around);",
    "\tthis.last_search_end = 0;",
    "\t",
    "\treturn this.searchcontext.get_occurrences_count();",
    "",
    " ",
    "   ",
    "",
    "}",
    ""
   ],
   "| void backSearch" : [
    "(bool change_focus) {",
    "",
    "\tif (this.searchcontext == null) {",
    "\t\treturn;",
    "\t} ",
    "\t",
    "\tGtk.TextIter beg, st,en;",
    "\tbool has_wrapped_around;",
    "\tthis.buffer.el.get_iter_at_offset(out beg, this.last_search_end -1 );",
    "\t",
    "\tif (!this.searchcontext.backward(beg, out st, out en, out has_wrapped_around)) {",
    "\t\tthis.last_search_end = 0;",
    "\t} else {",
    "\t\tthis.last_search_end = en.get_offset();",
    "\t\tif (change_focus) {",
    "\t\t\tthis.view.el.grab_focus();",
    "\t\t}",
    "\t\tthis.buffer.el.place_cursor(st);",
    "\t\tthis.view.el.scroll_to_iter(st,  0.1f, true, 0.0f, 0.5f);",
    "\t}",
    "",
    "}",
    ""
   ],
   "| void forwardSearch" : [
    "(bool change_focus) {",
    "",
    "\tif (this.searchcontext == null) {",
    "\t\treturn;",
    "\t} ",
    "\t",
    "\tGtk.TextIter beg, st,en;",
    "\t bool has_wrapped_around;",
    "\tthis.buffer.el.get_iter_at_offset(out beg, this.last_search_end);",
    "\tif (!this.searchcontext.forward(beg, out st, out en, out has_wrapped_around)) {",
    "\t",
    "\t\tthis.last_search_end = 0; // not sure if this should happen",
    "\t} else {",
    "\t\tif (has_wrapped_around) {",
    "\t\t\treturn;",
    "\t\t}",
    "\t",
    "\t\tthis.last_search_end = en.get_offset();",
    "\t\tif (change_focus) {",
    "\t\t\tthis.view.el.grab_focus();",
    "\t\t}",
    "\t\tthis.buffer.el.place_cursor(st);",
    "\t\tthis.view.el.scroll_to_iter(st,  0.1f, true, 0.0f, 0.5f);",
    "\t}",
    " ",
    "}",
    ""
   ],
   "| void reset" : [
    "() {",
    "\t this.file = null;    ",
    "     ",
    "    this.node = null;",
    "    this.prop = null;",
    "\tthis.searchcontext = null;",
    "  ",
    "}",
    ""
   ],
   "| void scroll_to_line" : [
    "(int line) {",
    "",
    "\tGLib.Timeout.add(500, () => {",
    "   ",
    "\t\tvar buf = this.view.el.get_buffer();",
    "",
    "\t\tvar sbuf = (GtkSource.Buffer) buf;",
    "",
    "",
    "\t\tGtk.TextIter iter;   ",
    "\t\tsbuf.get_iter_at_line(out iter,  line);",
    "\t\tthis.view.el.scroll_to_iter(iter,  0.1f, true, 0.0f, 0.5f);",
    "\t\treturn false;",
    "\t});   ",
    "}",
    ""
   ],
   "| void show" : [
    "(JsRender.JsRender file, JsRender.Node? node, JsRender.NodeProp? prop)",
    "{",
    "    this.reset();",
    "    this.file = file;    ",
    "    ",
    "    if (file.xtype != \"PlainFile\") {",
    "    \tthis.prop = prop;",
    "        this.node = node;",
    "",
    "        // find the text for the node..",
    "        this.view.load( prop.val );",
    "        ",
    "        ",
    "        this.close_btn.el.show();       ",
    "    ",
    "    } else {",
    "        this.view.load(        file.toSource() );",
    "        this.close_btn.el.hide();",
    "    }",
    " ",
    "}"
   ],
   "| void updateErrorMarks" : [
    "(string category) {",
    "\t",
    " ",
    "",
    "\tvar buf = _this.buffer.el;",
    "\tGtk.TextIter start;",
    "\tGtk.TextIter end;     ",
    "\tbuf.get_bounds (out start, out end);",
    "",
    "\tbuf.remove_source_marks (start, end, category);",
    " ",
    "\tGLib.debug(\"highlight errors\");\t\t ",
    "",
    "\t // we should highlight other types of errors..",
    "",
    "\tif (_this.window.windowstate.state != WindowState.State.CODEONLY ",
    "\t\t&&",
    "\t\t_this.window.windowstate.state != WindowState.State.CODE",
    "\t\t) {",
    "\t\tGLib.debug(\"windowstate != CODEONLY?\");",
    "\t\t",
    "\t\treturn;",
    "\t} ",
    "",
    "\t ",
    "\tif (_this.file == null) {",
    "\t\tGLib.debug(\"file is null?\");",
    "\t\treturn;",
    "",
    "\t}",
    "\tvar ar = this.file.getErrors(category);",
    "\tif (ar == null || ar.get_n_items() < 1) {",
    "\t\tGLib.debug(\"highlight %s :  %s has no errors\", this.file.relpath, category);",
    "\t\treturn;",
    "\t}",
    " ",
    "",
    " ",
    "\t",
    "\tvar offset = 0;",
    "\t ",
    "",
    "\tvar tlines = buf.get_line_count () +1;",
    "\t",
    "\tif (_this.prop != null) {",
    "\t",
    "\t\ttlines = _this.prop.end_line + 1;",
    "\t\toffset = _this.prop.start_line + 1;",
    "\t",
    "\t}",
    "\t ",
    "\tfor (var i = 0; i < ar.get_n_items();i++) {",
    "\t\tvar err = (Palete.CompileError) ar.get_item(i);",
    "\t\t",
    "\t     Gtk.TextIter iter;",
    "//        print(\"get inter\\n\");",
    "\t    var eline = err.line - offset;",
    "\t    GLib.debug(\"GOT ERROR on line %d -- converted to %d  (offset = %d)\",",
    "\t    \terr.line ,eline, offset);",
    "\t    ",
    "\t    ",
    "\t    if (eline > tlines || eline < 0) {",
    "\t        return;",
    "\t    }",
    "\t   ",
    "\t    ",
    "\t    buf.get_iter_at_line( out iter, eline);",
    "\t   ",
    "\t   ",
    "\t\tvar msg = \"Line: %d %s : %s\".printf(eline+1, err.category, err.msg);",
    "\t    buf.create_source_mark( msg, err.category, iter);",
    "\t    GLib.debug(\"set line %d to %s\", eline, msg);",
    "\t    //this.marks.set(eline, msg);",
    "\t}",
    "\treturn ;",
    "",
    "",
    "",
    " ",
    "",
    "}"
   ]
  }
 ],
 "modOrder" : "",
 "name" : "Editor",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/Editor.bjs",
 "permname" : "",
 "title" : ""
}