{
 "build_module" : "roobuilder",
 "gen_extended" : false,
 "items" : [
  {
   "# Xcls_MainWindow? win" : "null",
   "# int history_pos" : "-1",
   "$ Gee.ArrayList<Palete.Symbol>? history" : "new Gee.ArrayList<Palete.Symbol>()",
   "$ xns" : "Gtk",
   "Gtk.PositionType position" : "Gtk.PositionType.BOTTOM",
   "bool autohide" : true,
   "items" : [
    {
     "$ xns" : "Gtk",
     "* prop" : "child",
     "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
     "bool wide_handle" : true,
     "id" : "pane",
     "items" : [
      {
       "$ xns" : "Gtk",
       "* prop" : "start_child",
       "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
       "bool hexpand" : true,
       "bool vexpand" : true,
       "int spacing" : 0,
       "items" : [
        {
         "$ xns" : "Gtk",
         "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
         "items" : [
          {
           "$ xns" : "Gtk",
           "id" : "back_button",
           "listeners" : {
            "clicked" : [
             "() => {",
             "\t_this.history_pos--;",
             "\t_this.showSymbol(_this.history.get(_this.history_pos));",
             "\t",
             "}"
            ]
           },
           "string icon_name" : "go-previous-symbolic",
           "string tooltip_text" : "Back (previous class)",
           "xtype" : "Button"
          },
          {
           "$ xns" : "Gtk",
           "id" : "next_button",
           "listeners" : {
            "clicked" : [
             "() => {",
             "\t_this.history_pos++;",
             "\t_this.showSymbol(_this.history.get(_this.history_pos));",
             "\t",
             "}"
            ]
           },
           "string icon_name" : "go-next-symbolic",
           "string tooltip_text" : "next class",
           "xtype" : "Button"
          },
          {
           "$ xns" : "Gtk",
           "bool hexpand" : true,
           "xtype" : "Label"
          },
          {
           "$ xns" : "Gtk",
           "bool active" : true,
           "id" : "toggle_method",
           "listeners" : {
            "toggled" : [
             "() => {",
             "\t if (_this.current_filter == null) {",
             " \treturn;",
             "\t}",
             "\t_this.current_filter.el.changed(Gtk.FilterChange.DIFFERENT);",
             "}"
            ]
           },
           "string icon_name" : "format-justify-left-symbolic",
           "string tooltip_text" : "Method",
           "xtype" : "ToggleButton"
          },
          {
           "$ xns" : "Gtk",
           "bool active" : true,
           "id" : "toggle_prop",
           "listeners" : {
            "toggled" : [
             "() => {",
             "if (_this.current_filter == null) {",
             " \treturn;",
             "\t}",
             "\t_this.current_filter.el.changed(Gtk.FilterChange.DIFFERENT);",
             "}"
            ]
           },
           "string icon_name" : "format-text-italic-symbolic",
           "string tooltip_text" : "Properties",
           "xtype" : "ToggleButton"
          },
          {
           "$ xns" : "Gtk",
           "bool active" : true,
           "id" : "toggle_signal",
           "listeners" : {
            "toggled" : [
             "() => {",
             "if (_this.current_filter == null) {",
             " \treturn;",
             "\t}",
             "\t_this.current_filter.el.changed(Gtk.FilterChange.DIFFERENT);",
             "}"
            ]
           },
           "string icon_name" : "alarm-symbolic",
           "string tooltip_text" : "Signal",
           "xtype" : "ToggleButton"
          }
         ],
         "xtype" : "Box"
        },
        {
         "$ xns" : "Gtk",
         "bool hexpand" : true,
         "bool search_mode_enabled" : true,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "child",
           "bool activates_default" : true,
           "bool hexpand" : true,
           "id" : "tree_search",
           "listeners" : {
            "search_changed" : [
             "( ) => {",
             " if (_this.current_filter == null) {",
             " \treturn;",
             "\t}",
             "\t_this.current_filter.el.changed(Gtk.FilterChange.DIFFERENT);",
             "}"
            ]
           },
           "xtype" : "SearchEntry"
          }
         ],
         "xtype" : "SearchBar"
        }
       ],
       "xtype" : "Box"
      },
      {
       "$ xns" : "Gtk",
       "* prop" : "end_child",
       "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
       "items" : [
        {
         "$ xns" : "Gtk",
         "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
         "items" : [
          {
           "$ xns" : "Gtk",
           "listeners" : {
            "clicked" : [
             "() => {",
             "",
             "\tFakeServerCache.clear(); // force refresh",
             "\tif (_this.history_pos > -1) {",
             "\t\tvar sy  = _this.history.get(_this.history_pos);",
             "\t\t",
             "\t\t_this.webview.el.load_uri(",
             "\t\t\t\"doc://localhost/gtk.html#\" + sy.fqn);",
             "\t}",
             "}"
            ]
           },
           "string icon_name" : "view-refresh-symbolic",
           "string tooltip_text" : "Close",
           "xtype" : "Button"
          },
          {
           "$ xns" : "Gtk",
           "bool hexpand" : true,
           "id" : "combo",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* prop" : "model",
             "id" : "dir_model",
             "strings" : "{}",
             "xtype" : "StringList"
            }
           ],
           "xtype" : "DropDown",
           "| void loadClass" : [
            "(Palete.Symbol sy) {",
            "",
            "}"
           ]
          },
          {
           "$ xns" : "Gtk",
           "listeners" : {
            "clicked" : [
             "() => {",
             "\t_this.el.hide();",
             "}"
            ]
           },
           "string icon_name" : "window-close-symbolic",
           "string tooltip_text" : "Close",
           "xtype" : "Button"
          }
         ],
         "xtype" : "Box"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "append",
         "Gtk.PolicyType hscrollbar_policy" : "Gtk.PolicyType.AUTOMATIC",
         "Gtk.PolicyType vscrollbar_policy" : "Gtk.PolicyType.AUTOMATIC",
         "bool hexpand" : true,
         "bool vexpand" : true,
         "id" : "content",
         "items" : [
          {
           "$ xns" : "WebKit",
           "* init" : [
            " {",
            "    // this may not work!?",
            "    var settings =  this.el.get_settings();",
            "    settings.enable_write_console_messages_to_stdout = true;",
            "    settings.enable_page_cache = false;",
            "    ",
            "    ",
            "",
            "     // FIXME - base url of script..",
            "     // we need it so some of the database features work.",
            "    this.el.load_html( \"Render not ready\" , ",
            "            //fixme - should be a config option!",
            "            // or should we catch stuff and fix it up..",
            "          //  \"http://localhost/roojs1/docs/?gtk=1#Gtk.Widget\"",
            "            \"doc://localhost/\"",
            "    );",
            "        ",
            "        ",
            "    ",
            "    ",
            "}",
            ""
           ],
           "* pack" : "set_child",
           "id" : "webview",
           "listeners" : {
            "script_dialog" : [
             "(dlg) => {",
             "\tvar msg = dlg.get_message();",
             "\ttry {",
             "\t\tvar p = new Json.Parser();",
             "\t\tp.load_from_data(msg);",
             "\t\t",
             "\t\tvar r = p.get_root();",
             "\t\tif (r.get_node_type() != Json.NodeType.ARRAY) {",
             "\t\t\tGLib.debug(\"alert got something that was nto an array\");",
             "\t\t}",
             "\t\tvar ar = r.get_array();",
             "\t\tif (ar.get_string_element(0) != \"click\") {",
             "\t\t\tGLib.debug(\"node is not an element\");",
             "\t\t}",
             "\t\tvar cls = ar.get_string_element(1);",
             "\t\t var f = _this.win.windowstate.project.getByPath(cls);",
             "\t\tif (f == null) {",
             "\t\t\tGLib.debug(\"Cant open file %s\", cls);",
             "\t\t}",
             "\t\t",
             "\t\t_this.win.windowstate.fileViewOpen(",
             "\t\t\t\tf, true,  -1);",
             "\t\t_this.el.hide();",
             "\t} catch (GLib.Error e) {",
             "\t",
             "\t\tGLib.debug(\"parsing alert failed\");",
             "\t}",
             "\treturn true;",
             "",
             "}"
            ]
           },
           "xtype" : "WebView"
          }
         ],
         "xtype" : "ScrolledWindow"
        }
       ],
       "xtype" : "Box"
      }
     ],
     "xtype" : "Paned"
    }
   ],
   "xtype" : "Popover",
   "| void navigateTo" : [
    "(Palete.Symbol sy, bool load_page = true) {",
    "\t",
    "\tif (this.history_pos > -1) {",
    "\t\tvar cur = this.history.get(this.history_pos);",
    "\t\tif (sy.fqn == cur.fqn) {",
    "\t\t\treturn; // same url",
    "\t\t}",
    "\t}",
    "\tGLib.debug(\"setting history and showing symbol\");",
    "\tthis.history_pos++; ",
    "\tif (this.history_pos == this.history.size) {",
    "\t\tthis.history.add(sy);",
    "\t} else {",
    "\t\tthis.history.set(this.history_pos, sy);",
    "\t}",
    "\tthis.showSymbol(sy,load_page);",
    "}"
   ],
   "| void show" : [
    "(Gtk.Widget onbtn, string stype_and_name) {",
    "",
    "\t",
    "\tvar sname = stype_and_name.split(\":\")[1];",
    "\tif (this.el.parent != null) {",
    "\t\tthis.el.set_parent(null);",
    "\t}",
    "   \tthis.el.set_parent(onbtn);",
    "\tthis.el.popup();",
    "\tvar win = this.win.el;",
    "\tthis.el.set_size_request( win.get_width() - 50, win.get_height() - 200);",
    "    _this.pane.el.set_position(200); // adjust later?",
    "",
    "\tvar sl = _this.win.windowstate.file.getSymbolLoader();",
    "\tvar sy = sl.singleByFqn(sname);",
    "\tif (sy == null) {",
    "\t\tGLib.debug(\"could not find symbol %s\", sname);",
    "\t\tthis.el.hide();",
    "\t\treturn;",
    "\t}",
    " ",
    " \tthis.navigateTo(sy);",
    "\t",
    "\t",
    "",
    "",
    "\t",
    "}"
   ],
   "| void showSymbol" : [
    "(Palete.Symbol sy, bool load_page = true) {",
    "\t// doesnt deal with history... - caller should do that.",
    "\tvar sl = _this.win.windowstate.file.getSymbolLoader();",
    "\t",
    "\t// can set this multiple times?",
    "\tthis.webview.el.set_data(\"windowstate\", _this.win.windowstate);",
    "\t",
    "\tGLib.debug(\"showing symbol %s\", sy.fqn);",
    "\tswitch(sy.stype) {",
    "\t\tcase Lsp.SymbolKind.Class:",
    "\t\tcase Lsp.SymbolKind.Enum:",
    "\t\t\t//_this.tree.loadClass(sy);",
    "\t\t//\t_this.combo.loadClass(sy);",
    "\t\t//\t_this.content.loadSymbol(sy);",
    "\t\t\tif (load_page) {",
    "\t\t\t\tthis.webview.el.load_uri(\"doc://localhost/gtk.html#\" + sy.fqn);",
    "\t\t\t}",
    "\t\t\tbreak;",
    "\t\t\t",
    "\t\tcase Lsp.SymbolKind.Method:",
    "\t\tcase Lsp.SymbolKind.EnumMember:",
    "\t\t\tvar cls = sl.singleById(sy.parent_id);",
    "\t\t//\t_this.tree.loadClass(cls);",
    "\t//\t\t_this.tree.select(sy);",
    "\t//\t\t_this.combo.loadClass(cls);",
    "\t\t\tif (load_page) {",
    "\t\t\t\tthis.webview.el.load_uri(\"doc://localhost/gtk.html#\" + cls.fqn);",
    "\t\t\t}",
    "\t\t//\t_this.content.loadSymbol(cls);",
    "\t\t\tthis.history.add(sy);",
    "\t\t\tbreak;",
    "",
    "\t\t",
    "\t\t",
    "\t\tdefault:\t",
    "\t\t\tbreak;",
    "\t}",
    "\t_this.back_button.el.sensitive = this.history_pos > 0;",
    "\tGLib.debug(\"hp=%d, hps = %d\", this.history_pos, this.history.size);",
    "\t_this.next_button.el.sensitive = this.history_pos < (this.history.size -1);",
    "\t",
    "}"
   ]
  }
 ],
 "name" : "CodeInfo"
}