{
 "build_module" : "roobuilder",
 "gen_extended" : false,
 "items" : [
  {
   "# Xcls_MainWindow? win" : "null",
   "# int history_pos" : "-1",
   "$ Gee.ArrayList<Palete.Symbol>? history" : "new Gee.ArrayList<Palete.Symbol>()",
   "$ xns" : "Gtk",
   "Gtk.PositionType position" : "Gtk.PositionType.BOTTOM",
   "bool autohide" : true,
   "items" : [
    {
     "$ xns" : "Gtk",
     "* prop" : "child",
     "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
     "bool wide_handle" : true,
     "id" : "pane",
     "items" : [
      {
       "$ xns" : "Gtk",
       "* prop" : "start_child",
       "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
       "bool hexpand" : true,
       "bool vexpand" : true,
       "int spacing" : 0,
       "items" : [
        {
         "$ xns" : "Gtk",
         "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
         "items" : [
          {
           "$ xns" : "Gtk",
           "id" : "back_button",
           "listeners" : {
            "clicked" : [
             "() => {",
             "\t_this.history_pos--;",
             "\t_this.showSymbol(_this.history.get(_this.history_pos));",
             "\t",
             "}"
            ]
           },
           "string icon_name" : "go-previous-symbolic",
           "string tooltip_text" : "Back (previous class)",
           "xtype" : "Button"
          },
          {
           "$ xns" : "Gtk",
           "id" : "next_button",
           "listeners" : {
            "clicked" : [
             "() => {",
             "\t_this.history_pos++;",
             "\t_this.showSymbol(_this.history.get(_this.history_pos));",
             "\t",
             "}"
            ]
           },
           "string icon_name" : "go-next-symbolic",
           "string tooltip_text" : "next class",
           "xtype" : "Button"
          },
          {
           "$ xns" : "Gtk",
           "bool hexpand" : true,
           "xtype" : "Label"
          },
          {
           "$ xns" : "Gtk",
           "bool active" : true,
           "id" : "toggle_method",
           "listeners" : {
            "toggled" : [
             "() => {",
             "\t if (_this.current_filter == null) {",
             " \treturn;",
             "\t}",
             "\t_this.current_filter.el.changed(Gtk.FilterChange.DIFFERENT);",
             "}"
            ]
           },
           "string icon_name" : "format-justify-left-symbolic",
           "string tooltip_text" : "Method",
           "xtype" : "ToggleButton"
          },
          {
           "$ xns" : "Gtk",
           "bool active" : true,
           "id" : "toggle_prop",
           "listeners" : {
            "toggled" : [
             "() => {",
             "if (_this.current_filter == null) {",
             " \treturn;",
             "\t}",
             "\t_this.current_filter.el.changed(Gtk.FilterChange.DIFFERENT);",
             "}"
            ]
           },
           "string icon_name" : "format-text-italic-symbolic",
           "string tooltip_text" : "Properties",
           "xtype" : "ToggleButton"
          },
          {
           "$ xns" : "Gtk",
           "bool active" : true,
           "id" : "toggle_signal",
           "listeners" : {
            "toggled" : [
             "() => {",
             "if (_this.current_filter == null) {",
             " \treturn;",
             "\t}",
             "\t_this.current_filter.el.changed(Gtk.FilterChange.DIFFERENT);",
             "}"
            ]
           },
           "string icon_name" : "alarm-symbolic",
           "string tooltip_text" : "Signal",
           "xtype" : "ToggleButton"
          }
         ],
         "xtype" : "Box"
        },
        {
         "$ xns" : "Gtk",
         "bool hexpand" : true,
         "bool search_mode_enabled" : true,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "child",
           "bool activates_default" : true,
           "bool hexpand" : true,
           "id" : "tree_search",
           "listeners" : {
            "search_changed" : [
             "( ) => {",
             " if (_this.current_filter == null) {",
             " \treturn;",
             "\t}",
             "\t_this.current_filter.el.changed(Gtk.FilterChange.DIFFERENT);",
             "}"
            ]
           },
           "xtype" : "SearchEntry"
          }
         ],
         "xtype" : "SearchBar"
        },
        {
         "$ xns" : "Gtk",
         "bool hexpand" : true,
         "bool vexpand" : true,
         "int height_request" : 500,
         "int width_request" : 200,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "child",
           "id" : "tree",
           "items" : [
            {
             "$ xns" : "Gtk",
             "items" : [
              {
               "$ xns" : "Gtk",
               "* prop" : "factory",
               "listeners" : {
                "bind" : [
                 "(listitem) => {",
                 "\t ",
                 "\t// GLib.debug(\"listitme is is %s\", ((Gtk.ListItem)listitem).get_type().name());",
                 "\t",
                 "\t//var expand = (Gtk.TreeExpander) ((Gtk.ListItem)listitem).get_child();",
                 "\tvar expand = (Gtk.TreeExpander)  ((Gtk.ListItem)listitem).get_child();",
                 "\t ",
                 "\t ",
                 "\tvar hbox = (Gtk.Box) expand.child;",
                 " ",
                 "\t",
                 "\tvar img = (Gtk.Image) hbox.get_first_child();",
                 "\tvar lbl = (Gtk.Label) img.get_next_sibling();",
                 "\t",
                 "\tvar lr = (Gtk.TreeListRow)((Gtk.ListItem)listitem).get_item();",
                 "\tvar sym = (Palete.Symbol) lr.get_item();",
                 "\t",
                 "\tsym.set_data<Gtk.Widget>(\"widget\", expand.get_parent());",
                 "\texpand.get_parent().get_parent().set_data<Palete.Symbol>(\"symbol\", sym);",
                 "\t",
                 "\t  ",
                 "    expand.set_hide_expander( sym.children.get_n_items()  < 1);",
                 " \texpand.set_list_row(lr);",
                 " \t//this.in_bind = true;",
                 " \t// default is to expand",
                 " ",
                 " \t//this.in_bind = false;",
                 " \t",
                 " \tsym.bind_property(\"symbol_icon\",",
                 "                    img, \"icon_name\",",
                 "                   GLib.BindingFlags.SYNC_CREATE);",
                 " \t",
                 " \tvar at_sym = _this.history.get(_this.history_pos);",
                 " \t",
                 " \thbox.css_classes = { sym.symbol_icon , ",
                 " \t\tsym.property_of() == at_sym.fqn ? \"active-symbol\" : \"in-active-symbol\"",
                 " \t};",
                 " \t",
                 " \tsym.bind_property(\"codeinfo_name\",",
                 "                    lbl, \"label\",",
                 "                   GLib.BindingFlags.SYNC_CREATE);",
                 " \t// should be better?- --line no?",
                 " \tsym.bind_property(\"tooltip\",",
                 "                    lbl, \"tooltip_markup\",",
                 "                   GLib.BindingFlags.SYNC_CREATE);",
                 " \t// bind image...",
                 " \t",
                 "}",
                 ""
                ],
                "setup" : [
                 "(listitem) => {",
                 "\t",
                 "\tvar expand = new Gtk.TreeExpander();",
                 "\t ",
                 "\texpand.set_indent_for_depth(true);",
                 "\texpand.set_indent_for_icon(true);",
                 "\tvar hbox = new Gtk.Box(Gtk.Orientation.HORIZONTAL,0);",
                 "\tvar icon = new Gtk.Image();",
                 "\tvar lbl = new Gtk.Label(\"\");",
                 "\tlbl.use_markup = true;",
                 "\tlbl.ellipsize = Pango.EllipsizeMode.END;",
                 "\t",
                 "\ticon.margin_end = 4;",
                 " \tlbl.justify = Gtk.Justification.LEFT;",
                 " \tlbl.xalign = 0;",
                 "",
                 "//\tlistitem.activatable = true; ??",
                 "\t",
                 "\thbox.append(icon);",
                 "\thbox.append(lbl);",
                 "\texpand.set_child(hbox);",
                 "\t((Gtk.ListItem)listitem).set_child(expand);",
                 "\t",
                 "}",
                 ""
                ]
               },
               "xtype" : "SignalListItemFactory"
              }
             ],
             "xtype" : "ColumnViewColumn"
            },
            {
             "$ xns" : "Gtk",
             "* prop" : "model",
             "id" : "navigationselmodel",
             "items" : [
              {
               "$ xns" : "Gtk",
               "* prop" : "model",
               "items" : [
                {
                 "$ Gtk.CustomFilterFunc match_func" : [
                  "(item) => { ",
                  "\tvar tr = ((Gtk.TreeListRow)item).get_item();",
                  "   GLib.debug(\"filter%s =>  %s\", item.get_type().name(), ",
                  " \t\t  tr.get_type().name()",
                  "   );",
                  "   ",
                  "\tvar j =  (Palete.Symbol) tr;",
                  "\tvar txt = _this.tree_search.el.get_text();",
                  "   if (txt != \"\" && !j.name.contains(txt)) {",
                  "   \t\treturn false;",
                  "\t}",
                  "\t",
                  "\tif (!_this.toggle_method.el.active && ",
                  "\t\tj.stype ==  Lsp.SymbolKind.Method",
                  "\t\t) {",
                  "\t\treturn false;",
                  "\t}",
                  "\tif (!_this.toggle_prop.el.active && ",
                  "\t\t(j.stype == Lsp.SymbolKind.Property ||",
                  "\t\tj.stype == Lsp.SymbolKind.Field ",
                  "\t\t)) {",
                  "\t\treturn false;",
                  "\t}",
                  "\tif (!_this.toggle_signal.el.active && ",
                  "\t\tj.stype == Lsp.SymbolKind.Signal ",
                  "\t\t) {",
                  "\t\treturn false;",
                  "\t}",
                  "\tswitch( j.stype) {",
                  "\t",
                  "\t\tcase Lsp.SymbolKind.Namespace:",
                  "\t\tcase Lsp.SymbolKind.Class:",
                  "\t\tcase Lsp.SymbolKind.Method:",
                  "\t\tcase Lsp.SymbolKind.Property:",
                  "\t\t case Lsp.SymbolKind.Field:  //???",
                  "\t\tcase Lsp.SymbolKind.Constructor:",
                  "\t\tcase Lsp.SymbolKind.Interface:",
                  "\t\tcase Lsp.SymbolKind.Enum:",
                  "\t\tcase Lsp.SymbolKind.Constant:",
                  "\t\tcase Lsp.SymbolKind.EnumMember:",
                  "\t\tcase Lsp.SymbolKind.Struct:",
                  "\t\tcase Lsp.SymbolKind.Signal:",
                  "\t\t\t\treturn true;",
                  "\t\t\t",
                  "\t\tdefault : ",
                  "\t\t\tGLib.debug(\"hide %s\", j.stype.to_string());",
                  "\t\t\treturn false;",
                  "\t",
                  "\t}",
                  "",
                  "}"
                 ],
                 "$ xns" : "Gtk",
                 "* prop" : "filter",
                 "id" : "current_filter",
                 "xtype" : "CustomFilter"
                },
                {
                 "$ xns" : "Gtk",
                 "* prop" : "model",
                 "id" : "navigationsort",
                 "items" : [
                  {
                   "$ xns" : "Gtk",
                   "* prop" : "sorter",
                   "items" : [
                    {
                     "$ xns" : "Gtk",
                     "* prop" : "sorter",
                     "items" : [
                      {
                       "$ GLib.Type this_type" : "typeof(Palete.Symbol)",
                       "$ xns" : "Gtk",
                       "* prop" : "expression",
                       "string property_name" : "sort_key",
                       "xtype" : "PropertyExpression"
                      }
                     ],
                     "xtype" : "StringSorter"
                    }
                   ],
                   "xtype" : "TreeListRowSorter"
                  },
                  {
                   "$ Gtk.TreeListModelCreateModelFunc create_func" : [
                    "(item) => {",
                    " ",
                    "\treturn ((Palete.Symbol)item).children;",
                    "}",
                    ""
                   ],
                   "$ xns" : "Gtk",
                   "* prop" : "model",
                   "bool autoexpand" : true,
                   "bool passthrough" : false,
                   "items" : [
                    {
                     "$ GLib.Type item_type" : "typeof(Palete.Symbol)",
                     "$ xns" : "GLib",
                     "* prop" : "root",
                     "xtype" : "ListStore"
                    }
                   ],
                   "xtype" : "TreeListModel"
                  }
                 ],
                 "xtype" : "SortListModel",
                 "| Palete.Symbol? getSymbolAt" : [
                  "(uint row) {",
                  "",
                  "   var tr = (Gtk.TreeListRow)this.el.get_item(row);",
                  "   ",
                  "  // var a = tr.get_item();;   ",
                  "  // GLib.debug(\"get_item (2) = %s\", a.get_type().name());",
                  "  \t",
                  "   ",
                  "   return (Palete.Symbol)tr.get_item();",
                  "\t ",
                  "}"
                 ],
                 "| Palete.Symbol? symbolAtLine" : [
                  "(uint line, uint chr) {",
                  " ",
                  "\tvar tlm = (Gtk.TreeListModel)this.el.get_model();",
                  "\tvar ls = tlm.get_model();",
                  "\t",
                  "\tfor(var i = 0; i < ls.get_n_items();i++) {",
                  "\t\tvar el = (Palete.Symbol)ls.get_item(i);",
                  "\t\t//GLib.debug(\"Check sym %s : %d-%d\",",
                  "\t\t//\tel.name , (int)el.range.start.line,",
                  "\t\t//\t(int)el.range.end.line",
                  "\t\t//);",
                  "\t\tvar ret = el.containsLine(line,chr);",
                  "\t\tif (ret != null) {",
                  "\t\t\treturn ret;",
                  "\t\t}",
                  "\t\t",
                  "\t}",
                  "\t",
                  "\treturn null;",
                  "}"
                 ],
                 "| int getRowFromSymbol" : [
                  "(Palete.Symbol sym) {",
                  "// is this used as we have setdata???",
                  "\tfor (var i=0;i < this.el.get_n_items(); i++) {",
                  "\t\tvar tr = (Gtk.TreeListRow)this.el.get_item(i);",
                  "\t\tvar trs = (Palete.Symbol)tr.get_item();",
                  "\t\tif (sym.id ==  trs.id) {",
                  "\t\t\treturn i;",
                  "\t\t}",
                  "\t}",
                  "   \treturn -1;",
                  "}"
                 ],
                 "| void collapseOnLoad" : [
                  "() {",
                  "/*\tfor (var i=0;i < this.el.get_n_items(); i++) {",
                  "\t\tvar tr = (Gtk.TreeListRow)this.el.get_item(i);",
                  "\t\tvar sym =  (Palete.Symbol)tr.get_item();",
                  "\t\tswitch (sym.stype) {",
                  "\t \t\tcase Lsp.SymbolKind.Enum: ",
                  "\t \t\t\ttr.expanded = false;",
                  "\t \t\t\tbreak;",
                  "\t\t\tdefault:",
                  "\t\t\t\ttr.expanded = true;",
                  "\t\t\t\tbreak;",
                  "\t\t}",
                  "\t}",
                  " */",
                  "\t",
                  "",
                  "",
                  "}"
                 ]
                }
               ],
               "xtype" : "FilterListModel"
              }
             ],
             "xtype" : "NoSelection"
            }
           ],
           "string name" : "codeinfo-tree",
           "xtype" : "ColumnView",
           "| void loadClass" : [
            "(Palete.Symbol sy) {",
            "\tvar sl = _this.win.windowstate.file.getSymbolLoader();",
            "\tsl.getPropertiesFor(sy.fqn, Lsp.SymbolKind.Any);",
            "\t",
            "\tvar tlm = (Gtk.TreeListModel) _this.navigationsort.el.get_model();",
            "\tvar old = (GLib.ListStore)tlm.get_model();",
            "\told.remove_all();",
            "\told.append(sy);",
            "\t//tlm.get_row(0).set_expanded(true);",
            "}"
           ],
           "| void select" : [
            "(Palete.Symbol sym) {",
            "",
            "}"
           ]
          }
         ],
         "xtype" : "ScrolledWindow"
        }
       ],
       "xtype" : "Box"
      },
      {
       "$ xns" : "Gtk",
       "* prop" : "end_child",
       "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
       "items" : [
        {
         "$ xns" : "Gtk",
         "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
         "items" : [
          {
           "$ xns" : "Gtk",
           "listeners" : {
            "clicked" : [
             "() => {",
             "",
             "FakeServerCache.clear(); // force refresh",
             "_this.webview.el.load_uri(\"doc://localhost/gtk.html#Gtk.Widget\");",
             "//for testing.",
             "}"
            ]
           },
           "string icon_name" : "view-refresh-symbolic",
           "string tooltip_text" : "Close",
           "xtype" : "Button"
          },
          {
           "$ xns" : "Gtk",
           "bool hexpand" : true,
           "id" : "combo",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* prop" : "model",
             "id" : "dir_model",
             "strings" : "{}",
             "xtype" : "StringList"
            }
           ],
           "xtype" : "DropDown",
           "| void loadClass" : [
            "(Palete.Symbol sy) {",
            "",
            "}"
           ]
          },
          {
           "$ xns" : "Gtk",
           "listeners" : {
            "clicked" : [
             "() => {",
             "\t_this.el.hide();",
             "}"
            ]
           },
           "string icon_name" : "window-close-symbolic",
           "string tooltip_text" : "Close",
           "xtype" : "Button"
          }
         ],
         "xtype" : "Box"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "append",
         "Gtk.PolicyType hscrollbar_policy" : "Gtk.PolicyType.AUTOMATIC",
         "Gtk.PolicyType vscrollbar_policy" : "Gtk.PolicyType.AUTOMATIC",
         "bool hexpand" : true,
         "bool vexpand" : true,
         "id" : "content",
         "items" : [
          {
           "$ xns" : "WebKit",
           "* init" : [
            " {",
            "    // this may not work!?",
            "    var settings =  this.el.get_settings();",
            "    settings.enable_write_console_messages_to_stdout = true;",
            "    settings.enable_page_cache = false;",
            "    ",
            "    ",
            "",
            "     // FIXME - base url of script..",
            "     // we need it so some of the database features work.",
            "    this.el.load_html( \"Render not ready\" , ",
            "            //fixme - should be a config option!",
            "            // or should we catch stuff and fix it up..",
            "          //  \"http://localhost/roojs1/docs/?gtk=1#Gtk.Widget\"",
            "            \"doc://localhost/\"",
            "    );",
            "        ",
            "        ",
            "    ",
            "    ",
            "}",
            ""
           ],
           "* pack" : "set_child",
           "id" : "webview",
           "xtype" : "WebView"
          }
         ],
         "xtype" : "ScrolledWindow"
        }
       ],
       "xtype" : "Box"
      }
     ],
     "xtype" : "Paned"
    }
   ],
   "xtype" : "Popover",
   "| void show" : [
    "(Gtk.Widget onbtn, string stype_and_name) {",
    "",
    "\t",
    "\tvar sname = stype_and_name.split(\":\")[1];",
    "\tif (this.el.parent != null) {",
    "\t\tthis.el.set_parent(null);",
    "\t}",
    "   \tthis.el.set_parent(onbtn);",
    "\tthis.el.popup();",
    "\tvar win = this.win.el;",
    "\tthis.el.set_size_request( win.get_width() - 50, win.get_height() - 200);",
    "    _this.pane.el.set_position(200); // adjust later?",
    "",
    "\tvar sl = _this.win.windowstate.file.getSymbolLoader();",
    "\tvar sy = sl.singleByFqn(sname);",
    "\tif (sy == null) {",
    "\t\tGLib.debug(\"could not find symbol %s\", sname);",
    "\t\tthis.el.hide();",
    "\t\treturn;",
    "\t}",
    " ",
    "\t",
    "\tGLib.debug(\"setting history and showing symbol\");",
    "\tthis.history_pos++; ",
    "\tif (this.history_pos == this.history.size) {",
    "\t\tthis.history.add(sy);",
    "\t} else {",
    "\t\tthis.history.set(this.history_pos, sy);",
    "\t}",
    "\tthis.showSymbol(sy);",
    "",
    "",
    "\t",
    "}"
   ],
   "| void showSymbol" : [
    "(Palete.Symbol sy) {",
    "\t// doesnt deal with history... - caller should do that.",
    "\tvar sl = _this.win.windowstate.file.getSymbolLoader();",
    "\t",
    "\tGLib.debug(\"showing symbol %s\", sy.fqn);",
    "\tswitch(sy.stype) {",
    "\t\tcase Lsp.SymbolKind.Class:",
    "\t\t\t_this.tree.loadClass(sy);",
    "\t\t\t_this.combo.loadClass(sy);",
    "\t\t//\t_this.content.loadSymbol(sy);",
    "\t\t\tthis.webview.el.load_uri(\"doc://localhost/gtk.html#Gtk.Widget\");",
    "\t\t\tbreak;",
    "\t\tcase Lsp.SymbolKind.Method:",
    "\t\t\tvar cls = sl.singleById(sy.parent_id);",
    "\t\t\t_this.tree.loadClass(cls);",
    "\t\t\t_this.tree.select(sy);",
    "\t\t\t_this.combo.loadClass(cls);",
    "\t\t\tthis.webview.el.load_uri(\"doc://localhost/gtk.html#Gtk.Widget\");",
    "\t\t//\t_this.content.loadSymbol(cls);",
    "\t\t\tthis.history.add(sy);",
    "\t\t\tbreak;",
    "\t\tdefault:\t",
    "\t\t\tbreak;",
    "\t}",
    "\t_this.back_button.el.sensitive = this.history_pos > 0;",
    "\tGLib.debug(\"hp=%d, hps = %d\", this.history_pos, this.history.size);",
    "\t_this.next_button.el.sensitive = this.history_pos < (this.history.size -1);",
    "\t",
    "}"
   ]
  }
 ],
 "name" : "CodeInfo"
}