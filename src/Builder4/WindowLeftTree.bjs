{
 "build_module" : "builder",
 "items" : [
  {
   "# Xcls_MainWindow main_window" : "null",
   "$ xns" : "Gtk",
   "@ bool before_node_change" : "()",
   "@ void changed" : "()",
   "@ void node_selected" : "(JsRender.Node? node, string source)",
   "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
   "bool hexpand" : true,
   "bool vexpand" : true,
   "id" : "WindowLeftTree",
   "items" : [
    {
     "$ xns" : "Gtk",
     "* init" : [
      " this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
      " ",
      ""
     ],
     "bool has_frame" : true,
     "bool hexpand" : true,
     "bool vexpand" : true,
     "id" : "viewwin",
     "items" : [
      {
       "# bool blockChanges" : false,
       "# bool drag_in_motion" : "",
       "# int drag_x" : "",
       "# int drag_y" : "",
       "$ enable_tree_lines" : true,
       "$ string lastEventSource" : "\"\"",
       "$ xns" : "Gtk",
       "* init" : [
        "{",
        "  /*",
        "   this.css = new Gtk.CssProvider();",
        "\ttry {",
        "\t\tthis.css.load_from_data(\"#left-tree-view { font-size: 10px;}\".data);",
        "\t} catch (Error e) {}",
        "\tthis.el.get_style_context().add_provider(this.css,",
        "\t\tGtk.STYLE_PROVIDER_PRIORITY_APPLICATION);",
        "\t ",
        "\t*/ ",
        "  this.css = new Gtk.CssProvider();",
        "//\ttry {",
        "\t\tthis.css.load_from_data(\"",
        ".drag-over  { background-color:#88a3bc; }",
        ".drag-above  {   ",
        " border-bottom-width: 5px; ",
        " border-bottom-style: solid;",
        " border-bottom-color: #88a3bc;",
        "}",
        ".drag-below  {",
        " border-top-width: 5px;",
        " border-top-style: solid;",
        " border-top-color: #88a3bc;",
        "}",
        "",
        "\".data);",
        "",
        "\tGtk.StyleContext.add_provider_for_display(",
        "\t\tthis.el.get_display(),",
        "\t\tthis.css,",
        "\t\tGtk.STYLE_PROVIDER_PRIORITY_APPLICATION",
        "\t);",
        "\t",
        "\t",
        "\t",
        "   ",
        "   ",
        "    ",
        "}",
        ""
       ],
       "* pack" : "set_child",
       "Boolean id" : "view",
       "Gtk.CssProvider css" : "",
       "bool button_is_pressed" : false,
       "bool expand" : true,
       "bool headers_visible" : false,
       "bool hexpand" : true,
       "bool vexpand" : true,
       "items" : [
        {
         "$ xns" : "Gtk",
         "listeners" : {
          "pressed" : [
           "(n_press, x, y) => {",
           " ",
           "    //console.log(\"button press?\");",
           "    _this.view.button_is_pressed = true;",
           "    GLib.debug(\"BUTTON DOWN\");",
           "    ",
           "    _this.view.lastEventSource = \"tree\";",
           "    if (! _this.before_node_change() ) {",
           "    ",
           "       return ;",
           "    }",
           "    ",
           "\t // nothing there -show dialog",
           "    if (_this.model.el.get_n_items() < 1) {",
           "\t    _this.main_window.windowstate.showAddObject(_this.view.el);",
           "\t    return ;",
           "    }",
           "    string pos;",
           "    var row = _this.view.getRowAt(x,y, out pos );",
           "    if (row < 0) {",
           "\t    return;",
           "    }",
           "    ",
           "    var node = (JsRender.Node) _this.model.el.get_item(row);",
           "    if (node == null) {",
           "    \tGLib.warning(\"No node found at row %d\", row);",
           "    \treturn;",
           "\t}",
           "",
           "     ",
           "     ",
           "    if (_this.view.getColAt(x,y) > 0 ) {",
           "    ",
           "        var fqn = node.fqn();",
           "    \tvar cn = _this.main_window.windowstate.project.palete.getChildList(fqn);",
           "  \t\tif (cn.length < 1) {",
           "  \t\t\treturn ;",
           "\t\t}",
           "",
           "\t\t_this.main_window.windowstate.leftTreeBeforeChange();",
           "\t\t//_this.view.el.get_selection().select_path(res);",
           "\t\tGLib.debug(\"Button Pressed - start show window\");",
           "\t\t_this.main_window.windowstate.showAddObject(_this.view.el);",
           "\t\tGLib.debug(\"Button Pressed - finsihed show window\");",
           "     \treturn ;",
           "\t}",
           "    ",
           "\tif (  this.el.button != 3) {",
           "\t\t// regular click... - same as selection change?",
           "\t\t// we handle it here ?? not sure if we need to anymore?",
           "\t\t ",
           "\t\tGLib.debug(\"LEFT TREE Cursor Changed\");",
           "\t \t",
           "\t\t",
           "\t\t",
           "\t\t//if (!this.button_is_pressed && !this.key_is_pressed) {",
           "\t\t\t// then event was started by some other action",
           "\t\t\t// which should manually trigger all the events..",
           "\t\t//\tprint(\"SKIPPING select - no button or key pressed\\n\");",
           "\t\t//\treturn;",
           "\t\t//}",
           "",
           "",
           "\t\t if (_this.view.blockChanges) { // probably not needed.. ",
           "\t\t\tGLib.debug(\"SKIPPING select - blockchanges set..\");     ",
           "\t\t   return  ;",
           "\t\t }",
           "",
           "\t\t  if (!_this.before_node_change( ) ) {",
           "\t\t\t _this.view.blockChanges = true;",
           "\t\t\t _this.selmodel.el.unselect_all();",
           "\t\t\t _this.view.blockChanges = false;",
           "\t\t\t ",
           "\t\t\t return;",
           "\t\t }",
           "\t\t if (_this.main_window.windowstate.file == null) {",
           "\t   \t\tGLib.debug(\"SKIPPING select windowstate file is not set...\");     ",
           "\t\t\treturn;",
           "\t\t } ",
           "\t\t ",
           "\t\t //var render = this.get('/LeftTree').getRenderer();                ",
           "\t\tGLib.debug(\"LEFT TREE -> view -> selection changed called\");",
           "\t\t",
           "\t\t",
           "\t\t// -- it appears that the selection is not updated.",
           "\t\t  ",
           "\t\tGLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {",
           "\t\t\t GLib.debug(\"LEFT TREE -> view -> selection changed TIMEOUT CALLED\");",
           "",
           "\t\t\t    var snode = _this.selmodel.getSelectedNode();",
           "\t\t\t    if (snode == null) {",
           "",
           "\t\t\t         GLib.debug(\"selected rows < 1\");",
           "\t\t\t        //??this.model.load( false);",
           "\t\t\t        _this.node_selected(null, _this.view.lastEventSource);",
           "\t\t\t        ",
           "\t\t\t        return false ;",
           "\t\t\t    }",
           "\t\t\t ",
           "\t\t\t    // why dup_?",
           "\t\t\t    ",
           "",
           "\t\t\t    GLib.debug (\"calling left_tree.node_selected\");",
           "\t\t\t    _this.node_selected(snode, _this.view.lastEventSource);",
           "\t\t\t   ",
           "\t\t\t     ",
           "\t\t\t    ",
           "\t\t\t     ",
           "\t\t\t    // no need to scroll. it's in the view as we clicked on it.",
           "\t\t\t   // _this.view.el.scroll_to_cell(new Gtk.TreePath.from_string(_this.model.activePath), null, true, 0.1f,0.0f);",
           "\t\t\t    ",
           "\t\t\t    return false;",
           "\t\t  });  ",
           "\t\t//_this.after_node_change(node);",
           "",
           "\t//        _this.model.file.changed(node, \"tree\");",
           "\t  ",
           "\t ",
           "\t\treturn  ;",
           "\t",
           "\t",
           "\t ",
           "     }",
           "     /*",
           "    _this.main_window.windowstate.leftTreeBeforeChange();",
           "",
           "    ",
           "     ",
           "    _this.view.el.get_selection().select_path(res);",
           "     ",
           "      ",
           "     ",
           "      //if (!this.get('/LeftTreeMenu').el)  { ",
           "      //      this.get('/LeftTreeMenu').init(); ",
           "      //  }",
           "        ",
           "          var  r = Gdk.Rectangle() {",
           "    \t\t\tx = (int) x, // align left...",
           "    \t\t\ty = (int) y,",
           "    \t\t\twidth = 1,",
           "    \t\t\theight = 1",
           "    \t\t};",
           "    \t\t_this.LeftTreeMenu.el.set_parent(_this.view.el);",
           "    \t\t_this.LeftTreeMenu.el.show();",
           "\t\t _this.LeftTreeMenu.el.set_pointing_to( r);",
           "",
           "     ",
           "     //   print(\"click:\" + res.path.to_string());",
           "      return ;",
           "      */",
           "}",
           ""
          ],
          "released" : [
           "(n_press, x, y) => {",
           " ",
           "    _this.view.button_is_pressed = false;",
           "",
           "",
           "}",
           ""
          ]
         },
         "xtype" : "GestureClick"
        },
        {
         "$ Gdk.DragAction[] actions" : "Gdk.DragAction.COPY   | Gdk.DragAction.MOVE   ",
         "$ xns" : "Gtk",
         "listeners" : {
          "drag_begin" : [
           "( drag )  => {",
           "\t\tGLib.debug(\"SOURCE: drag-begin\");",
           "\t\t",
           " ",
           "        ",
           "        // find what is selected in our tree...",
           "       var data = _this.selmodel.getSelectedNode();",
           "\tif (data == null) {",
           "\t\treturn  ;",
           "\t\t//data.set_text(\"\",0);     ",
           "\t\t// print(\"return empty string - no selection..\");",
           "\t\t//return;",
           "\t}",
           "\t",
           "\t",
           "    ",
           "    ",
           "      ",
           "        var xname = data.fqn();",
           "        GLib.debug (\"XNAME  IS %s\", xname);",
           " ",
           "      //  _this.view.dropList = _this.main_window.windowstate.file.palete().getDropList(xname);",
           "        ",
           " ",
           "        ",
           "",
           "        // make the drag icon a picture of the node that was selected",
           "    ",
           "        ",
           "    // by default returns the path..",
           " ",
           "\t \t//var widget = _this.view.getWidgetAtRow(_this.selmodel.s.selected);",
           "\t \tvar widget = _this.view.getWidgetAtRow(_this.selmodel.el.selected);",
           "        var paintable = new Gtk.WidgetPaintable(widget);",
           "        this.el.set_icon(paintable, 0,0);",
           "                ",
           "   ",
           "        return;",
           "}"
          ],
          "drag_end" : [
           "(drag, delete_data) => {",
           "",
           "",
           "\tGLib.debug(\"got drag end\");",
           " // (drag_context) => {",
           "\t//Seed.print('LEFT-TREE: drag-end');",
           " \t",
           "      //  _this.view.dropList = null;",
           "//        this.targetData = \"\";",
           "    //    _this.view.highlightDropPath(\"\",0);",
           "//        return true;",
           "",
           "}",
           ""
          ],
          "prepare" : [
           "(x, y) => {",
           "",
           "\t",
           "\t",
           "///\t( drag_context, data, info, time) => {",
           "            ",
           "",
           "\t//print(\"drag-data-get\");",
           " \tvar ndata = _this.selmodel.getSelectedNode();",
           "\tif (ndata == null) {",
           "\t \tGLib.debug(\"return empty string - no selection..\");",
           "\t\treturn null;",
           "\t\t//data.set_text(\"\",0);     ",
           "\t\t// print(\"return empty string - no selection..\");",
           "\t\t//return;",
           "\t}",
           "",
           "  ",
           "\t//data.set_text(tp,tp.length);   ",
           "",
           "\tvar \tstr = ndata.toJsonString();",
           "\t\tGLib.debug(\"prepare  store: %s\", str);",
           "\t\tGLib.Value ov = GLib.Value(typeof(string));",
           "\t\tov.set_string(str);",
           "\t \tvar cont = new Gdk.ContentProvider.for_value(ov);",
           "        ",
           "    \tGLib.Value v = GLib.Value(typeof(string));",
           "\t//var str = drop.read_text( [ \"text/plain\" ] 0);",
           "\t ",
           "\tcont.get_value(ref v);",
           "\tGLib.debug(\"set %s\", v.get_string());",
           "        ",
           " \treturn cont;",
           "\t",
           "",
           "\t ",
           "}",
           ""
          ]
         },
         "xtype" : "DragSource"
        },
        {
         "$ xns" : "Gtk",
         "* ctor" : [
          "new Gtk.DropTarget ( typeof(string) ,",
          "\t\tGdk.DragAction.COPY   | Gdk.DragAction.MOVE   )"
         ],
         "Gtk.Widget? highlightWidget" : "null",
         "JsRender.Node? lastDragNode" : "null",
         "id" : "drop",
         "listeners" : {
          "accept" : [
           "(drop) => {",
           "",
           "\tGLib.debug(\"got DropTarget:accept\");",
           " ",
           "// NOT REALLY NEEDED? = put stuff in drop?",
           "",
           "",
           "/* (  ctx, x, y, time)  => {",
           "      //Seed.print(\"TARGET: drag-drop\");",
           "   ",
           "   ",
           "    var src = Gtk.drag_get_source_widget(ctx);",
           "     ",
           "   if (src != this.el) {",
           "   ",
           "    ",
           "       ",
           "       this.drag_in_motion = false;   ",
           "            // request data that will be recieved by the recieve...              ",
           "        Gtk.drag_get_data",
           "        (",
           "                this.el,         // will receive 'drag-data-received' signal ",
           "                ctx,        // represents the current state of the DnD ",
           "                Gdk.Atom.intern(\"application/json\",true),    // the target type we want ",
           "                time            // time stamp ",
           "        );",
           "",
           "         ",
           "        // No target offered by source => error",
           "   ",
           "",
           "         return  false;",
           "     }",
           "     ",
           "     // handle drop around self..",
           "     ",
           "                  ",
           "            ",
           "    //print(\"GETTING POS\");",
           "    var  targetData = \"\";",
           "    ",
           "    Gtk.TreePath path;",
           "    Gtk.TreeViewDropPosition pos;",
           "    var isOver = _this.view.el.get_dest_row_at_pos(this.drag_x,this.drag_y, out path, out pos);",
           "    ",
           "    // if there are not items in the tree.. the we have to set isOver to true for anything..",
           "    var isEmpty = false;",
           "    if (_this.model.el.iter_n_children(null) < 1) {",
           "        print(\"got NO children?\\n\");",
           "        isOver = true; //??? ",
           "        isEmpty = true;",
           "        pos = Gtk.TreeViewDropPosition.INTO_OR_AFTER;",
           "    }",
           "    ",
           "     ",
           "     ",
           "    //var action = Gdk.DragAction.COPY;",
           "        // unless we are copying!!! ctl button..",
           "    ",
           "    var action = (ctx.get_actions() & Gdk.DragAction.MOVE) > 0 ?",
           "                 Gdk.DragAction.COPY  : Gdk.DragAction.MOVE ;",
           "                // Gdk.DragAction.MOVE : Gdk.DragAction.COPY ;",
           "",
           "      ",
           "    if (_this.model.el.iter_n_children(null) < 1) {",
           "        // no children.. -- asume it's ok..",
           "        ",
           "        targetData = \"|%d|\".printf((int)Gtk.TreeViewDropPosition.INTO_OR_AFTER);",
           "         ",
           "        // continue through to allow drop...",
           "",
           "    } else {",
           "                ",
           "                ",
           "    ",
           "                ",
           "                ",
           "                //print(\"ISOVER? \" + isOver);",
           "        if (!isOver) {",
           "            ",
           "            Gtk.drag_finish (ctx, false, false, time);        // drop failed..",
           "            return true; // not over apoint!?! - no action on drop or motion..",
           "        }",
           "                ",
           "        // drag node is parent of child..",
           "        //console.log(\"SRC TREEPATH: \" + src.treepath);",
           "        //console.log(\"TARGET TREEPATH: \" + data.path.to_string());",
           "        ",
           "        // nned to check a  few here..",
           "        //Gtk.TreeViewDropPosition.INTO_OR_AFTER",
           "        //Gtk.TreeViewDropPosition.INTO_OR_BEFORE",
           "        //Gtk.TreeViewDropPosition.AFTER",
           "        //Gtk.TreeViewDropPosition.BEFORE",
           "        ",
           "        // locally dragged items to not really use the ",
           "        var selection_text = this.dragData;",
           "        ",
           "        ",
           "        ",
           "        if (selection_text == null || selection_text.length < 1) {",
           "            //print(\"Error  - drag selection text returned NULL\");",
           "          ",
           "             Gtk.drag_finish (ctx, false, false, time);        // drop failed..",
           "             return true; /// -- fixme -- this is not really correct..",
           "        }                ",
           "                ",
           "                // see if we are dragging into ourself?",
           "                print (\"got selection text of  \" + selection_text);",
           "        ",
           "        var target_path = path.to_string();",
           "        //print(\"target_path=\"+target_path);",
           "",
           "        // ",
           "        if (selection_text  == target_path) {",
           "            print(\"self drag ?? == we should perhaps allow copy onto self..\\n\");",
           "            ",
           "             Gtk.drag_finish (ctx, false, false, time);        // drop failed..",
           "",
           "             return true; /// -- fixme -- this is not really correct..",
           "",
           "        }",
           "                ",
           "        // check that ",
           "        //print(\"DUMPING DATA\");",
           "        //console.dump(data);",
           "        // path, pos",
           "        ",
           "        //print(data.path.to_string() +' => '+  data.pos);",
           "        ",
           "        // dropList is a list of xtypes that this node could be dropped on.",
           "        // it is set up when we start to drag..",
           "        ",
           "        ",
           "        targetData = _this.model.findDropNodeByPath( path.to_string(), this.dropList, pos);",
           "            ",
           "        print(\"targetDAta: \" + targetData +\"\\n\");",
           "        ",
           "        if (targetData.length < 1) {",
           "            //print(\"Can not find drop node path\");",
           "             ",
           "            Gtk.drag_finish (ctx, false, false, time);        // drop failed..",
           "            return true;",
           "        }",
           "                    ",
           "                ",
           "                ",
           "                // continue on to allow drop..",
           "  }",
           "        // at this point, drag is not in motion... -- as checked above... - so it's a real drop event..",
           "",
           "",
           "     var delete_selection_data = false;",
           "        ",
           "    if (action == Gdk.DragAction.ASK)  {",
           "        // Ask the user to move or copy, then set the ctx action. ",
           "    }",
           "",
           "    if (action == Gdk.DragAction.MOVE) {",
           "        delete_selection_data = true;",
           "    }",
           "      ",
           "                // drag around.. - reorder..",
           "    _this.model.moveNode(targetData, action);",
           "        ",
           "       ",
           "        ",
           "        ",
           "        ",
           "        // we can send stuff to souce here...",
           "",
           "",
           "// do we always say failure, so we handle the reall drop?",
           "    Gtk.drag_finish (ctx, false, false,time); //delete_selection_data, time);",
           "",
           "    return true;",
           " ",
           " ",
           " ",
           " ",
           " ",
           " ",
           "}",
           "*/",
           "\treturn true;",
           "}",
           ""
          ],
          "drop" : [
           "(v, x, y) => {",
           "\t",
           "\tthis.addHighlight(null,\"\");",
           " ",
           " ",
           " ",
           " \tvar pos = \"\";",
           " \t// -- get position..",
           " \tif (this.lastDragString != v.get_string() || this.lastDragNode == null) {",
           "\t\t// still dragging same node",
           " ",
           "\t\tthis.lastDragNode = new JsRender.Node(); ",
           "\t\tthis.lastDragNode.loadFromJsonString(v.get_string(), 1);",
           "\t}",
           "    ",
           " \tvar drop_on_to = _this.main_window.windowstate.file.palete().getDropList(this.lastDragNode.fqn());",
           "       ",
           "       ",
           "    var dropNode = new JsRender.Node(); ",
           "\tdropNode.loadFromJsonString(v.get_string(), 1);",
           "\t",
           "    // if there are not items in the tree.. the we have to set isOver to true for anything..",
           " ",
           "    if (_this.model.el.n_items < 1) {",
           "    \t// FIXME check valid drop types?",
           "    \tif (!drop_on_to.contains(\"*top\")) {",
           "\t\t\t ",
           "\t\t\treturn false;\t",
           "\t\t}",
           "\t\t// add new node to top..",
           "\t\t",
           "\t\t",
           "\t\t var m = (GLib.ListStore) this.el.model;",
           "     \t_this.main_window.windowstate.file.tree = dropNode;  ",
           "    ",
           "   ",
           "  \t\tm.append(f.tree);",
           "\t\t",
           "\t\treturn true; // no need to highlight?",
           "     ",
           "    }",
           "",
           "",
           "",
           " \t var row = _this.view.getRowAt(x,y, out pos);",
           " \tif (row < 0) {",
           "\t \t return   false; //Gdk.DragAction.COPY;",
           " \t }",
           "",
           "\t",
           "    ",
           " ",
           "\t//.el.current_drop.drag.drop_done(true);",
           "\t",
           "\t/*(ctx, x, y, sel, info, time)  => {",
           "",
           "\t// THIS CODE ONLY RELATES TO drag  or drop of \"NEW\" elements or \"FROM another tree..\"",
           "",
           "",
           "\t//  print(\"Tree: drag-data-received\\n\");",
           "\tvar selection_text = (string)sel.get_data();",
           "\t//print(\"selection_text= %s\\n\",selection_text);",
           "",
           "\tvar is_drag = this.drag_in_motion;",
           "",
           "",
           "",
           "\tGLib.debug(\"Is Drag %s\\n\", is_drag ? \"Y\": \"N\");",
           "\tvar  targetData = \"\";",
           "",
           "\tGtk.TreePath path;",
           "\tGtk.TreeViewDropPosition pos;",
           "\tvar isOver = _this.view.el.get_dest_row_at_pos(this.drag_x,this.drag_y, out path, out pos);",
           "",
           "\t// if there are not items in the tree.. the we have to set isOver to true for anything..",
           "\tvar isEmpty = false;",
           "\tif (_this.model.el.iter_n_children(null) < 1) {",
           "\t\tGLib.debug(\"got NO children?\\n\");",
           "\t\tisOver = true; //??? ",
           "\t\tisEmpty = true;",
           "\t\tpos = Gtk.TreeViewDropPosition.INTO_OR_AFTER;",
           "\t}",
           "",
           "",
           "\t//console.log(\"LEFT-TREE: drag-motion\");",
           "\tvar src = Gtk.drag_get_source_widget(ctx);",
           "",
           "\t// a drag from self - this should be handled by drop and motion.",
           "\tif (src == this.el) {",
           "\t\tGLib.debug(\"Source == this element should not happen.. ? \\n\");",
           "\t\treturn;",
           "\t}",
           "\t//print(\"drag_data_recieved from another element\");",
           "",
           "\t ",
           "",
           "",
           "\tif (selection_text == null || selection_text.length < 1 || !isOver) {",
           "\t\t// nothing valid foudn to drop...",
           "\t\t   GLib.debug(\"empty sel text or not over\");",
           "\t\tif (is_drag) {",
           "\t\t    Gdk.drag_status(ctx, 0, time);",
           "\t\t    this.highlightDropPath(\"\", (Gtk.TreeViewDropPosition)0);",
           "\t\t    return;",
           "\t\t}",
           "\t\tGtk.drag_finish (ctx, false, false, time);        // drop failed..",
           "\t\t// no drop action...",
           "\t\treturn;            ",
           "",
           "\t}",
           "\tvar dropNode = new JsRender.Node(); ",
           "",
           "\tvar dropNodeType  = selection_text;",
           "\tvar show_templates = true;",
           "\t// for drop",
           "\tif (dropNodeType[0] == '{') {",
           "\t\tvar pa = new Json.Parser();",
           "\t\ttry {",
           "\t\t    pa.load_from_data(dropNodeType);",
           "\t\t} catch (Error e) {",
           "\t\t    Gtk.drag_finish (ctx, false, false, time);        // drop failed..",
           "\t\t    // no drop action...",
           "\t\t    return;   ",
           "\t\t}",
           "\t\t ",
           "\t\tdropNode.loadFromJson( pa.get_root().get_object(), 2);",
           "\t\tdropNodeType = dropNode.fqn();",
           "\t\tshow_templates = false;",
           "\t\t",
           "\t\t",
           "\t} else {",
           "\t\t// drop with property.",
           "\t\tif (selection_text.contains(\":\")) {",
           "\t\t\tvar bits = selection_text.split(\":\");",
           "\t\t    dropNode.setFqn(bits[0]);",
           "\t\t    dropNode.set_prop(new JsRender.NodeProp.special(\"prop\", bits[1]));",
           "\t\t    ",
           "\t\t    ",
           "\t\t    ",
           "\t\t} else {",
           "\t\t    dropNode.setFqn(selection_text);",
           "\t\t}",
           "\t}",
           "",
           "\t ",
           "\t// dropList --- need to gather this ... ",
           "\tGLib.debug(\"get dropList for : %s\\n\",dropNodeType);            ",
           "\tvar dropList = _this.main_window.windowstate.file.palete().getDropList(dropNodeType);",
           "",
           "\tGLib.debug(\"dropList: %s\\n\", string.joinv(\" , \", dropList));",
           "",
           "\t// if drag action is link ... then we can drop it anywahere...",
           "\t if ((ctx.get_actions() & Gdk.DragAction.LINK) > 0) {",
           "\t\t // if path is null?? dragging into an empty tree?",
           "\t\t targetData = (path == null ? \"\" :  path.to_string()) + \"|%d\".printf((int)pos);",
           "\t } else {",
           "",
           "",
           "\t\ttargetData = _this.model.findDropNodeByPath( isEmpty ? \"\" : path.to_string(), dropList, pos);",
           "\t }",
           "",
           "",
           "\t\t",
           "\tGLib.debug(\"targetDAta: %s\", targetData );",
           "",
           "\tif (targetData.length < 1) {",
           "\t ",
           "\t\t// invalid drop path..",
           "\t\tif (this.drag_in_motion) {",
           "\t\t    Gdk.drag_status(ctx, 0, time);",
           "\t\t    this.highlightDropPath(\"\", (Gtk.TreeViewDropPosition)0);",
           "\t\t    return;",
           "\t\t}",
           "\t\tGtk.drag_finish (ctx, false, false, time);        // drop failed..",
           "\t\t// no drop action...",
           "\t\treturn;",
           "\t}",
           "",
           "",
           "",
           "\t var td_ar = targetData.split(\"|\");",
           "\t  ",
           "",
           "\tif (this.drag_in_motion) { ",
           "\t\tGdk.drag_status(ctx, Gdk.DragAction.COPY ,time);",
           "",
           "\t\tthis.highlightDropPath(  td_ar[0]  , (Gtk.TreeViewDropPosition)int.parse(td_ar[1]));",
           "\t\treturn;",
           "\t}",
           "\t// continue on to allow drop..",
           "",
           "",
           "\t// at this point, drag is not in motion... -- as checked above... - so it's a real drop event..",
           "\t//targetData",
           "\t//   {parent}|{pos}|{prop}",
           "",
           "",
           "   _this.model.dropNode(targetData, dropNode, show_templates);",
           "    ",
           "\tGLib.debug(\"ADD new node!!!\\n\");",
           "\t\t",
           "\t///Xcls_DialogTemplateSelect.singleton().show( _this.model.file.palete(), node);",
           "",
           "\tGtk.drag_finish (ctx, false, false,time);",
           "",
           "",
           "\t\t",
           "\t\t",
           "",
           "}",
           "*/",
           "\treturn true; //Gdk.DragAction.COPY; ",
           "}",
           ""
          ],
          "leave" : [
           "( ) => {",
           "\tthis.addHighlight(null,\"\");",
           "",
           "}",
           ""
          ],
          "motion" : [
           "(  x, y) => {",
           " ",
           "\tstring pos; // over / before / after..",
           "",
           "    GLib.debug(\"got drag motion\");",
           "",
           "    GLib.Value v = GLib.Value(typeof(string));",
           "   \t//var str = drop.read_text( [ \"text/plain\" ] 0);",
           "   \tvar cont = this.el.current_drop.get_drag().content ;",
           "  \tcont.get_value(ref v);",
           "",
           "\tGLib.debug(\"got %s\", v.get_string());",
           "\t",
           "\t ",
           "\tif (this.lastDragString != v.get_string() || this.lastDragNode == null) {",
           "\t\t// still dragging same node",
           " ",
           "\t\tthis.lastDragNode = new JsRender.Node(); ",
           "\t\tthis.lastDragNode.loadFromJsonString(v.get_string(), 1);",
           "\t}",
           "    ",
           "",
           "\tvar drop_on_to = _this.main_window.windowstate.file.palete().getDropList(this.lastDragNode.fqn());",
           "       ",
           "    // if there are not items in the tree.. the we have to set isOver to true for anything..",
           " ",
           "    if (_this.model.el.n_items < 1) {",
           "    \t// FIXME check valid drop types?",
           "    \tif (drop_on_to.contains(\"*top\")) {",
           "\t\t\tthis.addHighlight(_this.view.el, \"over\");",
           "\t\t} else {",
           "\t\t\tthis.addHighlight(null, \"\");\t\t",
           "\t\t}",
           "",
           "\t\treturn Gdk.DragAction.COPY; // no need to highlight?",
           "     ",
           "    }",
           "    ",
           "    ",
           " \tGLib.debug(\"check is over\");",
           " \t ",
           "    // if path of source and dest are inside each other..",
           "    // need to add source info to drag?",
           "    // the fail();",
           " \tvar row = _this.view.getRowAt(x,y, out pos);",
           " \t",
           " \tif (row < 0) {",
           "\t\tthis.addHighlight(null, \"\");\t",
           "\t \treturn Gdk.DragAction.COPY;",
           " \t}",
           "\tvar tr = (Gtk.TreeListRow)_this.view.el.model.get_object(row);",
           "\t",
           "\tvar node =  (JsRender.Node)tr.get_item();",
           "",
           " \tif (pos == \"above\" || pos == \"below\") {",
           "\t\tif (node.parent == null) {",
           "\t\t\tGLib.debug(\"no parent try center\");",
           "\t\t\tpos = \"over\";",
           "\t\t} else {",
           "\t \t\t ",
           "\t \t\tif (!drop_on_to.contains(node.parent.fqn())) {",
           "\t\t\t\tGLib.debug(\"drop on does not contain %s - try center\" , node.parent.fqn());",
           "\t \t\t\tpos = \"over\";",
           " \t\t\t} else {",
           "\t\t\t\tGLib.debug(\"drop  contains %s - using %s\" , node.parent.fqn(), pos);",
           "\t\t\t}",
           " \t\t}",
           " \t\t",
           " \t}",
           " \tif (pos == \"over\") {",
           "\t \tif (!drop_on_to.contains(node.fqn())) {",
           "\t\t\tGLib.debug(\"drop on does not contain %s - try center\" , node.fqn());",
           "\t\t\tthis.addHighlight(null, \"\"); ",
           "\t\t\treturn Gdk.DragAction.COPY;\t\t",
           "\t\t}",
           "\t}",
           " \t",
           " \t",
           " \t    // _this.view.highlightDropPath(\"\", (Gtk.TreeViewDropPosition)0);",
           "\tvar w = _this.view.getWidgetAt(x,y);",
           "\tthis.addHighlight(w, pos); ",
           "    return Gdk.DragAction.COPY;\t\t\t",
           "}"
          ]
         },
         "string lastDragString" : "\"\"",
         "xtype" : "DropTarget",
         "| void addHighlight" : [
          "(Gtk.Widget? w, string hl) {",
          "\tif (this.highlightWidget != null) {",
          "\t\tvar ww  = this.highlightWidget;",
          "\t\tGLib.debug(\"clear drag from previous highlight\");",
          "\t\tif (ww.has_css_class(\"drag-below\")) {",
          "\t\t\t ww.remove_css_class(\"drag-below\");",
          "\t\t}",
          "\t\tif (ww.has_css_class(\"drag-above\")) {",
          "\t\t\t ww.remove_css_class(\"drag-above\");",
          "\t\t}",
          "\t\tif (ww.has_css_class(\"drag-over\")) {",
          "\t\t\t ww.remove_css_class(\"drag-over\");",
          "\t\t}",
          "\t}",
          "\tif (w != null) {",
          "\t\tGLib.debug(\"add drag=%s to widget\", hl);\t",
          "\t\tif (!w.has_css_class(\"drag-\" + hl)) {",
          "\t\t\tw.add_css_class(\"drag-\" + hl);",
          "\t\t}",
          "\t}",
          "\tthis.highlightWidget = w;",
          "}"
         ]
        },
        {
         "$ xns" : "Gtk",
         "* prop" : "model",
         "id" : "selmodel",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* ctor" : [
            "new Gtk.TreeListModel(",
            "    new GLib.ListStore(typeof(JsRender.Node)), //..... << that's our store..",
            "    false, // passthru",
            "    true, // autexpand",
            "    (item) => {",
            "    \treturn ((JsRender.Node)item).childstore;",
            "    ",
            "    }",
            "    ",
            "    ",
            ")"
           ],
           "* prop" : "model",
           "id" : "model",
           "xtype" : "TreeListModel",
           "| JsRender.Node? a_pathToNode" : [
            "(string path) {",
            " ",
            " /*    ",
            "     Gtk.TreeIter   iter;",
            "     _this.model.el.get_iter_from_string(out iter, path);",
            "     ",
            "     GLib.Value value;",
            "     _this.model.el.get_value(iter, 2, out value);",
            "     ",
            "     return (JsRender.Node)value.dup_object();",
            "*/",
            "return null;",
            "}"
           ],
           "| string a_treePathFromNode" : [
            "(JsRender.Node node) {",
            "    // iterate through the tree and find the node",
            " /*",
            "    var ret = \"\";",
            "    ",
            "    this.el.foreach((mod, pth, iter) => {",
            "        // get the node..",
            "      ",
            "     ",
            "         GLib.Value value;",
            "         _this.model.el.get_value(iter, 2, out value);",
            "         ",
            "",
            "         ",
            "         var n = (JsRender.Node)value;",
            "",
            "         print(\"compare %s to %s\\n\", n.fqn(), node.fqn());",
            "        if (node == n) {",
            "            ret = pth.to_string();",
            "            return true;",
            "        }",
            "        return false;",
            "    });",
            "    return ret;",
            "*/",
            "return \"\";",
            "}",
            ""
           ],
           "| void a_dropNode" : [
            "(string target_data_str, JsRender.Node node, bool show_templates) {",
            "",
            "/*",
            "//         print(\"drop Node\");",
            "     // console.dump(node);",
            "  //    console.dump(target_data);",
            "  ",
            "  \t\t//target_data_str",
            "  \t\t//   {parent}|{pos}|{prop}",
            "  ",
            "  ",
            "        // 0 = before , 1=after 2/3 onto",
            "  ",
            "  ",
            "  ",
            "    // we only need to show the template if it's come from else where?",
            "         if (show_templates) {",
            "         ",
            "        \tvar ts = _this.main_window.windowstate.template_select;",
            "         ",
            "         \tif (!this.template_connected) { ",
            "\t\t     \tts.complete.connect((node) => {",
            "\t\t     \t\t this.dropNode(target_data_str, node, false);",
            "\t\t     \t\t ",
            "\t\t     \t});",
            "\t\t     \tthis.template_connected = true;",
            "\t     \t}",
            "         \t",
            "            ts.showIt(",
            "                  _this.main_window, // (Gtk.Window) _this.el.get_toplevel (),",
            "                 _this.main_window.windowstate.file.palete(),",
            "                  node,",
            "                  _this.main_window.windowstate.project",
            "          \t);",
            "            return;",
            "              ",
            "        }   ",
            "  ",
            "  \t\tGLib.debug(\"dropNode %s\", target_data_str);",
            "        ",
            "        var target_data = target_data_str.split(\"|\");",
            "  ",
            "        var parent_str = target_data[0].length > 0 ? target_data[0] : \"\";",
            "        var pos = target_data.length > 1 ? int.parse(target_data[1]) : 2; // ontop..",
            "  ",
            "  ",
            "        Gtk.TreePath tree_path  =   parent_str.length > 0 ? new  Gtk.TreePath.from_string( parent_str ) : null;",
            "        ",
            "        ",
            "        ",
            "        //print(\"add \" + tp + \"@\" + target_data[1]  );",
            "        ",
            "     ",
            "       \t// this appears to be done in drag_ddata_recieved as well.",
            "         if (target_data.length == 3 && target_data[2].length > 0) {",
            "\t         node.set_prop(new JsRender.NodeProp.special(\"prop\", target_data[2]));",
            "",
            "        }",
            "",
            "        ",
            "        ",
            "           ",
            "        ",
            "         //print(\"pos is %d  \\n\".printf(pos));",
            "         Gtk.TreePath expand_parent = null;",
            "         JsRender.Node parentNode = null;",
            "       ",
            "         Gtk.TreeIter n_iter; ",
            "         Gtk.TreeIter iter_after;",
            "         Gtk.TreeIter iter_par ;",
            "        ",
            "        ",
            "        ",
            "         if ( parent_str.length < 1) {",
            "              this.el.append(out n_iter, null); // drop at top level..",
            "              node.parent = null;",
            "              _this.main_window.windowstate.file.tree = node;",
            "              ",
            "              ",
            "        } else   if (pos  < 2) {",
            "            //print(target_data[1]  > 0 ? 'insert_after' : 'insert_before');",
            "            ",
            "            this.el.get_iter(out iter_after, tree_path );            ",
            "            this.el.iter_parent(out iter_par, iter_after);",
            "            expand_parent = this.el.get_path(iter_par);",
            "            ",
            "            ",
            "            // not sure why all the 'dup_object()' stuff? did it crash before?",
            "            GLib.Value value;",
            "            this.el.get_value( iter_par, 2, out value);",
            "            parentNode =  (JsRender.Node)value.dup_object();",
            "            ",
            "            ",
            "            this.el.get_value( iter_after, 2, out value);",
            "            var relNode =  (JsRender.Node)value.dup_object();",
            "            ",
            "            if ( pos  > 0 ) {",
            "             \tparentNode.insertAfter(node, relNode);",
            "                ",
            "            } else {",
            "            \tparentNode.insertBefore(node, relNode);;",
            "            }",
            "            node.parent = parentNode;",
            "            ",
            "            ",
            "            ",
            "        } else {",
            "           //  print(\"appending to  \" + parent_str);",
            "            this.el.get_iter(out iter_par, tree_path);",
            "            this.el.append(out n_iter,   iter_par );",
            "            expand_parent = this.el.get_path(iter_par);",
            "            ",
            "            GLib.Value value;",
            "            this.el.get_value( iter_par, 2, out value);",
            "            parentNode =  (JsRender.Node)value.dup_object();",
            "            node.parent = parentNode;",
            "            parentNode.appendChild(node);",
            "        }",
            "        ",
            "        ",
            "        ",
            "        ",
            "        // work out what kind of packing to use.. -- should be in ",
            "       ",
            "            ",
            "            //_this.main_window.windowstate.file.palete().fillPack(node,parentNode);",
            "        _this.main_window.windowstate.file.palete().on_child_added(parentNode,node);",
            "            ",
            "          ",
            "        this.iterSetValues(n_iter, node);",
            "        // add the node...",
            "         ",
            "        ",
            "        ",
            "\t\t// load children - if it has any..",
            "     ",
            "        if (node.items.size > 0) {",
            "            this.load(node.items, n_iter);",
            "            _this.view.el.expand_row(this.el.get_path(n_iter), true);",
            "        } else if (expand_parent != null && !_this.view.el.is_row_expanded(expand_parent)) {",
            "           _this.view.el.expand_row(expand_parent,true);",
            "        }",
            " ",
            "        //if (tp != null && (node.items.length() > 0 || pos > 1)) {",
            "        //    _this.view.el.expand_row(this.el.get_path(iter_par), true);",
            "       // }",
            "        // wee need to get the empty proptypes from somewhere..",
            "        ",
            "        //var olditer = this.activeIter;",
            "        this.activePath = this.el.get_path(n_iter).to_string();",
            "",
            "",
            "        // pretend button was pressed, so that we can trigger select node...",
            "        _this.view.button_is_pressed = true;",
            "        _this.view.lastEventSource = \"\";",
            "        _this.view.el.set_cursor(this.el.get_path(n_iter), null, false);",
            "        _this.view.button_is_pressed = false;",
            "        _this.changed();",
            "     ",
            "        */",
            "            ",
            "}",
            ""
           ],
           "| void a_findDropNode" : [
            " (string treepath_str, string[] targets) {",
            "",
            "   /*",
            "    // this is used by the dragdrop code in the roo version AFAIR..",
            "",
            "    //var path = treepath_str.replace(/^builder-/, '');",
            "    // treemap is depreciated... - should really check if model has any entries..",
            "",
            "    if (this.el.iter_n_children(null) < 1) {",
            "        //print(\"NO KEYS\");",
            "        return \"|%d\".printf((int)Gtk.TreeViewDropPosition.INTO_OR_AFTER);",
            "    }",
            "    //print(\"FIND treepath: \" + path);",
            "    //console.dump(this.treemap);",
            "    ",
            "    //if (!treepath_str.match(/^builder-/)) {",
            "    //    return []; // nothing!",
            "    //}",
            "    if (targets.length > 0 && targets[0] == \"*\") {",
            "        return  treepath_str;",
            "    }",
            "    return this.findDropNodeByPath(treepath_str,targets, -1);",
            "    (/",
            "}",
            ""
           ],
           "| void a_findDropNodeByPath" : [
            " (string treepath_str, string[] targets, int in_pref = -1) {",
            " ",
            "/*",
            "    var path = treepath_str; // dupe it..",
            "    ",
            "    ",
            "    // pref : 3 = ontop - 0 = after, 1 = before",
            "    int pref = in_pref < 0  ?  (int)Gtk.TreeViewDropPosition.INTO_OR_AFTER : in_pref;",
            "    ",
            "    var last = \"\";",
            "    ",
            "    //console.dump(this.treemap);",
            "    ",
            "    GLib.debug(\"findDropNodeByPath : got path length %d / %s \", path.length, path);",
            "    ",
            "    if (path.length == 0) {",
            "        // top drop. // just return empty..",
            "        return \"|%d\".printf((int)pref) ;",
            "        ",
            "    }",
            "    ",
            "    ",
            "    while (path.length > 0) {",
            "    ",
            "        if (path.length == treepath_str.length && pref != Gtk.TreeViewDropPosition.INTO_OR_AFTER) {",
            "            if (path.last_index_of(\":\") < 0 ) {",
            "                return \"\";",
            "            }",
            "            path = path.substring(0, path.last_index_of(\":\"));",
            "            last = treepath_str;",
            "            GLib.debug(\"findDropNodeByPath: DROP  before or after : using %s\\n\",path);",
            "            continue;",
            "        }",
            "    ",
            "        //print(\"LOOKING FOR PATH: \" + path);",
            "        var node_data = this.pathToNode(path);",
            "        ",
            "        if (node_data == null) {",
            "            GLib.debug(\"findDropNodeByPath:node not found\");",
            "            return \"\";",
            "        }",
            "        ",
            "        var xname = node_data.fqn();",
            "        var match = \"\";",
            "        var prop = \"\";",
            "        ",
            "        for (var i =0; i < targets.length; i++)  {",
            "            var tg = targets[i];",
            "            if ((tg == xname)  ) {",
            "                match = tg;",
            "                break;",
            "            }",
            "            // if target is \"xxxx:name\"",
            "            if (tg.contains(xname +\":\")) {",
            "                match = tg;",
            "                var ar = tg.split(\":\");",
            "                prop = ar[1];",
            "                break;",
            "            }",
            "        }",
            "        ",
            "        if (match.length > 0) {",
            "            if (last.length > 0) { // pref is after/before..",
            "                // then it's after last",
            "                //if (pref > 1) {",
            "                //    return \"\";",
            "                //}",
            "                return last + \"|%d\".printf((int)pref) + \"|\" + prop;",
            "",
            "                ",
            "            }",
            "            // we need to add prop - as :store -> needs to bee added when dropping onto.",
            "            return path + \"|%d\".printf( (int) Gtk.TreeViewDropPosition.INTO_OR_AFTER)  + \"|\" + prop;",
            "        }",
            "         ",
            "        break;",
            "",
            "    }",
            "    ",
            "    return \"\";",
            "*/            ",
            "}",
            ""
           ],
           "| void a_moveNode" : [
            "(string target_data, Gdk.DragAction action) ",
            "{",
            "   /*",
            "   /// target_data = \"path|pos\");",
            "   ",
            "   ",
            "    //print(\"MOVE NODE\");",
            "    // console.dump(target_data);",
            "    Gtk.TreeIter old_iter;",
            "    Gtk.TreeModel mod;",
            "    ",
            "    var s = _this.view.el.get_selection();",
            "    s.get_selected(out mod , out old_iter);",
            "    mod.get_path(old_iter);",
            "    ",
            "    var node = this.pathToNode(mod.get_path(old_iter).to_string());",
            "    //console.dump(node);",
            "    if (node == null) {",
            "        GLib.debug(\"moveNode: ERROR - node is null?\");",
            "    }",
            "    ",
            "    ",
            "",
            "    // needs to drop first, otherwise the target_data ",
            "    // treepath will be invalid.",
            "",
            "    ",
            "    if ((action & Gdk.DragAction.MOVE) > 0) {",
            "            GLib.debug(\"REMOVING OLD NODE : \" + target_data + \"\\n\");",
            "            node.remove();",
            "            this.dropNode(target_data, node, false);",
            "            this.el.remove(ref old_iter);",
            "            ",
            "            ",
            "                         ",
            "    } else {",
            "        GLib.debug(\"DROPPING NODE // copy: \" + target_data + \"\\n\");",
            "        node = node.deepClone();",
            "        this.dropNode(target_data, node, false);",
            "    }",
            "    _this.changed();",
            "    this.activePath= \"\";",
            "    //this.updateNode(false,true);",
            "    */",
            "}",
            ""
           ],
           "| void a_updateSelected" : [
            "() {",
            "  ",
            "   /*",
            "    var s = _this.view.el.get_selection();",
            "    ",
            "     Gtk.TreeIter iter;",
            "    Gtk.TreeModel mod;",
            "    ",
            "    ",
            "    ",
            "    if (!s.get_selected(out mod, out iter)) {",
            "        return; // nothing seleted..",
            "    }",
            "  ",
            "  GLib.Value value;",
            "    this.el.get_value(iter, 2, out value);",
            "    var node = (JsRender.Node)(value.get_object());",
            "    ",
            "      this.el.set(iter, 0, node.nodeTitle(),",
            "                1, node.nodeTip(), -1",
            "        );",
            "        */",
            "}",
            ""
           ],
           "| void deleteSelected" : [
            "() {",
            "",
            "",
            "\t",
            "  var s = (Gtk.SingleSelection) _this.view.el.model;",
            "\tif (s.n_items < 1) {",
            "\t\treturn  ;",
            "\t\t//data.set_text(\"\",0);     ",
            "\t\t// print(\"return empty string - no selection..\");",
            "\t\t//return;",
            "\t}",
            "\t",
            "\t",
            "     var node = (JsRender.Node)s.selected_item;",
            "    s.unselect_all();",
            "    ",
            "    node.remove();",
            "    ",
            "/*    ",
            "    print(\"DELETE SELECTED?\");",
            "    //_this.view.blockChanges = true;",
            "    print(\"GET SELECTION?\");",
            "",
            "    var s = _this.view.el.get_selection();",
            "    ",
            "    print(\"GET  SELECTED?\");",
            "   Gtk.TreeIter iter;",
            "    Gtk.TreeModel mod;",
            "",
            "    ",
            "    if (!s.get_selected(out mod, out iter)) {",
            "        return; // nothing seleted..",
            "    }",
            "      ",
            "",
            "",
            "    this.activePath= \"\";      ",
            "    print(\"GET  vnode value?\");",
            "",
            "    GLib.Value value;",
            "    this.el.get_value(iter, 2, out value);",
            "    var data = (JsRender.Node)(value.get_object());",
            "    print(\"removing node from Render\\n\");",
            "    if (data.parent == null) {",
            "       _this.main_window.windowstate.file.tree = null;",
            "    } else {",
            "        data.remove();",
            "    }",
            "    print(\"removing node from Tree\\n\");    ",
            "    s.unselect_all();",
            "    this.el.remove(ref iter);",
            "",
            "    ",
            "    ",
            "    ",
            "    // ",
            "    ",
            "    ",
            "",
            "",
            "    this.activePath= \"\"; // again!?!?      ",
            "    //this.changed(null,true);",
            "    ",
            "    _this.changed();",
            "    ",
            "    _this.view.blockChanges = false;",
            "    */",
            "}",
            ""
           ],
           "| void loadFile" : [
            "(JsRender.JsRender f) {",
            "    //console.dump(f);",
            "    ",
            "    _this.drop.highlightWidget = null;",
            "    ",
            "    var m = (GLib.ListStore) this.el.model;",
            "\tm.remove_all();",
            "    _this.main_window.windowstate.leftTreeNodeSelected(null, \"\");",
            "    // needed???",
            "    _this.main_window.windowstate.file = f;",
            "    ",
            "   ",
            "    if (f.tree == null) {",
            "\t    try {",
            "\t        f.loadItems( );",
            "        } catch (Error e) {",
            "    \t\treturn;",
            "        }",
            "    }",
            "    // if it's still null?",
            "    if (f.tree == null) {",
            "\t\t_this.main_window.windowstate.showAddObject(_this.view.el);",
            "    ",
            "        return;",
            "    }",
            "  \tm.append(f.tree);",
            "  \t// expand???",
            "",
            "/*",
            "    if (f.tree.readItems().size < 1) {",
            "        // single item..",
            "        ",
            "        //this.get('/Window.leftvpaned').el.set_position(80);",
            "        // select first...",
            "        _this.view.el.set_cursor( ",
            "            new  Gtk.TreePath.from_string(\"0\"), null, false);",
            "        ",
            "        ",
            "    } else {",
            "          //this.get('/Window.leftvpaned').el.set_position(200);",
            "    }",
            "  */  ",
            "    ",
            "    ",
            "",
            "    //_this.maincol.el.set_max_width(_this.viewwin.el.get_allocated_width() - 32);",
            " ",
            "    ",
            "   ",
            "    return;",
            " ",
            "            ",
            "}",
            ""
           ],
           "| void selectNode" : [
            "(JsRender.Node node) ",
            "{",
            "\tvar row = -1;",
            "\tvar s = (Gtk.SingleSelection)_this.view.el.model;",
            "\tfor (var i = 0; i < s.n_items; i++) {",
            "\t\tif (((JsRender.Node)s.get_item(i)).oid == node.oid) {",
            "\t\t\trow  = i;",
            "\t\t\tbreak;",
            "\t\t}",
            "\t}",
            "\tif (row < 0) {",
            "\t\t// select none?",
            "\t\treturn;",
            "\t}",
            "\ts.set_selected(row);",
            "\t",
            "\t",
            "",
            "}"
           ]
          }
         ],
         "xtype" : "SingleSelection",
         "| JsRender.Node? getSelectedNode" : [
          "() {",
          "  if (this.el.selected_item == null) {",
          "\t\treturn null;",
          "  }\t\t\t        ",
          "   var tr = (Gtk.TreeListRow)this.el.selected_item;",
          "   return (JsRender.Node)tr.get_item();",
          "\t ",
          "}"
         ]
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "append_column",
         "bool expand" : true,
         "id" : "maincol",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "factory",
           "listeners" : {
            "bind" : [
             "(listitem) => {",
             "\t GLib.debug(\"listitme is is %s\", listitem.get_type().name());",
             "\t",
             "\t//var expand = (Gtk.TreeExpander) ((Gtk.ListItem)listitem).get_child();",
             "\tvar expand = (Gtk.TreeExpander)  listitem.get_child();",
             "\t ",
             "\t ",
             "\tvar hbox = (Gtk.Box) expand.child;",
             " ",
             "\t",
             "\tvar img = (Gtk.Image) hbox.get_first_child();",
             "\tvar lbl = (Gtk.Label) img.get_next_sibling();",
             "\t",
             "\tvar lr = (Gtk.TreeListRow)listitem.get_item();",
             "\tvar node = (JsRender.Node) lr.get_item();",
             "\t",
             "   GLib.debug(\"node is %s\", node.get_type().name());",
             "// was item (1) in old layout",
             "\tlbl.set_markup(node.nodeTitle());",
             " \tlbl.set_tooltip_text( node.nodeTip() );",
             " \t  ",
             " \tvar ic = Gtk.IconTheme.get_for_display(_this.el.get_display());",
             "    var clsname = node.fqn();",
             "    ",
             "    var clsb = clsname.split(\".\");",
             "    var sub = clsb.length > 1 ? clsb[1].down()  : \"\";",
             "     ",
             "    var fn = \"/usr/share/glade/pixmaps/hicolor/16x16/actions/widget-gtk-\" + sub + \".png\";",
             "    try { ",
             "    \t ",
             "    \t\t ",
             "\t\tif (FileUtils.test (fn, FileTest.IS_REGULAR)) {",
             "\t\t    img.set_from_file(fn);",
             "\t\t \t ",
             "\t \t} else {",
             "\t \t\timg.set_from_paintable(",
             "\t\t\t \tic.lookup_icon (",
             "\t\t\t \t\t\"media-playback-stop\", null,  16,1, ",
             "\t    \t\t\t Gtk.TextDirection.NONE, 0",
             "    \t\t\t)",
             "\t\t\t );",
             "\t \t}",
             " \t} catch (GLib.Error e) {}",
             "    ",
             "    expand.set_hide_expander( !node.hasChildren() );",
             " \texpand.set_list_row(lr);",
             "}",
             ""
            ],
            "setup" : [
             "(listitem) => {",
             "\t",
             "\tvar expand = new Gtk.TreeExpander();",
             "\t ",
             "\texpand.set_indent_for_depth(true);",
             "\texpand.set_indent_for_icon(true);",
             "\tvar hbox = new Gtk.Box(Gtk.Orientation.HORIZONTAL,0);",
             "\tvar icon = new Gtk.Image();",
             "\tvar lbl = new Gtk.Label(\"\");",
             "\t",
             "\t",
             "\t",
             " \tlbl.justify = Gtk.Justification.LEFT;",
             " \tlbl.xalign = 0;",
             "",
             "//\tlistitem.activatable = true; ??",
             "\t",
             "\thbox.append(icon);",
             "\thbox.append(lbl);",
             "\texpand.set_child(hbox);",
             "\tlistitem.set_child(expand);",
             "\t",
             "}",
             ""
            ]
           },
           "xtype" : "SignalListItemFactory"
          }
         ],
         "title" : "Property",
         "xtype" : "ColumnViewColumn"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "append_column",
         "int fixed_width" : 25,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "factory",
           "listeners" : {
            "bind" : [
             "(listitem) => {",
             "",
             " \tvar img = (Gtk.Image) ((Gtk.ListItem)listitem).get_child(); ",
             " \tvar lr = (Gtk.TreeListRow)listitem.get_item();",
             "\tvar node = (JsRender.Node) lr.get_item();",
             "\t",
             "  ",
             "    var ic = Gtk.IconTheme.get_for_display(_this.el.get_display());",
             "\timg.set_from_paintable(",
             "\t \tic.lookup_icon (",
             "\t \t\t\"list-add\", null,  16,1, ",
             "\t\t\t Gtk.TextDirection.NONE, 0",
             "\t\t)",
             "\t );",
             "\t ",
             " \tvar fqn = node.fqn();",
             "    var cn = _this.main_window.windowstate.project.palete.getChildList(fqn);",
             "",
             "\timg.set_visible(cn.length > 0 ? true : false);",
             " \t ",
             "}",
             ""
            ],
            "setup" : [
             "(listitem) => {",
             "",
             "\t ",
             "\tvar icon = new Gtk.Image();",
             "\t ",
             "\tlistitem.set_child(icon);",
             "}",
             ""
            ]
           },
           "xtype" : "SignalListItemFactory"
          }
         ],
         "string title" : "Add",
         "xtype" : "ColumnViewColumn"
        }
       ],
       "string name" : "left-tree-view",
       "tooltip_column" : 1,
       "xtype" : "ColumnView",
       "| Gtk.Widget getWidgetAtRow" : [
        "(uint row) {",
        "/*",
        "    \t",
        "from    \thttps://discourse.gnome.org/t/gtk4-finding-a-row-data-on-gtkcolumnview/8465",
        "    \tvar colview = gesture.widget;",
        "    \tvar line_no = check_list_widget(colview, x,y);",
        "         if (line_no > -1) {",
        "    \t\tvar item = colview.model.get_item(line_no);",
        "    \t\t ",
        "    \t}",
        "    \t*/",
        "        var  child = this.el.get_first_child(); ",
        "    \tvar line_no = -1; ",
        "    \tvar reading_header = true;",
        "",
        "    \twhile (child != null) {",
        "\t\t\tGLib.debug(\"Got %s\", child.get_type().name());",
        "    \t    if (reading_header) {",
        "\t\t\t   ",
        "\t\t\t    if (child.get_type().name() == \"GtkListItemWidget\") {",
        "\t\t\t    }",
        "\t\t\t\tif (child.get_type().name() != \"GtkColumnListView\") {",
        "\t\t\t\t\tchild = child.get_next_sibling();",
        "\t\t\t\t\tcontinue;",
        "\t\t\t\t}",
        "\t\t\t\tchild = child.get_first_child(); ",
        "\t\t\t\treading_header = false;",
        "\t        }",
        "\t\t    if (child.get_type().name() != \"GtkListItemWidget\") {",
        "    \t\t    child = child.get_next_sibling();",
        "    \t\t    continue;",
        "\t\t    }",
        "\t\t    line_no++;",
        "\t\t\tif (line_no == row) {",
        "\t\t\t    return (Gtk.Widget)child;",
        "\t\t    }",
        "\t        child = child.get_next_sibling(); ",
        "    \t}",
        "        return null;",
        "",
        " }"
       ],
       "| Gtk.Widget? getWidgetAt" : [
        "(double x,  double y) {",
        "/*",
        "    \t",
        "from    \thttps://discourse.gnome.org/t/gtk4-finding-a-row-data-on-gtkcolumnview/8465",
        "    \tvar colview = gesture.widget;",
        "    \tvar line_no = check_list_widget(colview, x,y);",
        "         if (line_no > -1) {",
        "    \t\tvar item = colview.model.get_item(line_no);",
        "    \t\t ",
        "    \t}",
        "    \t*/",
        "        var  child = this.el.get_first_child(); ",
        "    \tGtk.Allocation alloc = { 0, 0, 0, 0 };",
        "    \tvar line_no = -1; ",
        "    \tvar reading_header = true;",
        "    \tvar curr_y = 0;",
        "    \tvar header_height  = 0;",
        "    \twhile (child != null) {",
        "\t\t\tGLib.debug(\"Got %s\", child.get_type().name());",
        "    \t    if (reading_header) {",
        "\t\t\t   ",
        "\t\t\t    if (child.get_type().name() == \"GtkListItemWidget\") {",
        "\t\t\t        child.get_allocation(out alloc);",
        "\t\t\t    }",
        "\t\t\t\tif (child.get_type().name() != \"GtkColumnListView\") {",
        "\t\t\t\t\tchild = child.get_next_sibling();",
        "\t\t\t\t\tcontinue;",
        "\t\t\t\t}",
        "\t\t\t\tchild = child.get_first_child(); ",
        "\t\t\t\theader_height = alloc.y + alloc.height;",
        "\t\t\t\tcurr_y = header_height; ",
        "\t\t\t\treading_header = false;",
        "\t        }",
        "\t\t    if (child.get_type().name() != \"GtkListItemWidget\") {",
        "    \t\t    child = child.get_next_sibling();",
        "    \t\t    continue;",
        "\t\t    }",
        "\t\t    line_no++;",
        "",
        "\t\t\tchild.get_allocation(out alloc);",
        "\t\t\t//GLib.debug(\"got cell xy = %d,%d  w,h= %d,%d\", alloc.x, alloc.y, alloc.width, alloc.height);",
        "",
        "\t\t    if (y > curr_y && y <= header_height + alloc.height + alloc.y ) {",
        "\t\t\t    return (Gtk.Widget)child;",
        "\t\t    }",
        "\t\t    curr_y = header_height + alloc.height + alloc.y;",
        "",
        "\t\t    if (curr_y > y) {",
        "\t\t    //    return -1;",
        "\t        }",
        "\t        child = child.get_next_sibling(); ",
        "    \t}",
        "        return null;",
        "",
        " }"
       ],
       "| int getColAt" : [
        "(double x,  double y) {",
        "/*",
        "    \t",
        "from    \thttps://discourse.gnome.org/t/gtk4-finding-a-row-data-on-gtkcolumnview/8465",
        "    \t  ",
        "    \t*/",
        "\t\tGtk.Allocation alloc = { 0, 0, 0, 0 };",
        "        var  child = this.el.get_first_child(); ",
        "    \t ",
        "    \tvar col = 0;",
        "    \twhile (child != null) {",
        "\t\t\tGLib.debug(\"Got %s\", child.get_type().name());",
        "\t\t\tchild.get_allocation(out alloc);",
        "\t\t\tif (x <  (alloc.width + alloc.x)) {",
        "\t\t\t\treturn col;",
        "\t\t\t}",
        "\t\t\tcol++;",
        "\t\t\tchild = child.get_next_sibling();",
        "\t\t}",
        "    \t     ",
        "\t\t\t  ",
        "        return -1;",
        "",
        " }"
       ],
       "| int getRowAt" : [
        "(double x,  double y, out string pos) {",
        "/*",
        "    \t",
        "from    \thttps://discourse.gnome.org/t/gtk4-finding-a-row-data-on-gtkcolumnview/8465",
        "    \tvar colview = gesture.widget;",
        "    \tvar line_no = check_list_widget(colview, x,y);",
        "         if (line_no > -1) {",
        "    \t\tvar item = colview.model.get_item(line_no);",
        "    \t\t ",
        "    \t}",
        "    \t*/",
        "        var  child = this.el.get_first_child(); ",
        "    \tGtk.Allocation alloc = { 0, 0, 0, 0 };",
        "    \tvar line_no = -1; ",
        "    \tvar reading_header = true;",
        "    \tvar curr_y = 0;",
        "    \tvar header_height  = 0;",
        "    \tpos = \"over\";",
        "    \t",
        "    \twhile (child != null) {",
        "\t\t\t//GLib.debug(\"Got %s\", child.get_type().name());",
        "    \t    if (reading_header) {",
        "\t\t\t   ",
        "\t\t\t    if (child.get_type().name() == \"GtkListItemWidget\") {",
        "\t\t\t        child.get_allocation(out alloc);",
        "\t\t\t    }",
        "\t\t\t\tif (child.get_type().name() != \"GtkColumnListView\") {",
        "\t\t\t\t\tchild = child.get_next_sibling();",
        "\t\t\t\t\tcontinue;",
        "\t\t\t\t}",
        "\t\t\t\tchild = child.get_first_child(); ",
        "\t\t\t\theader_height = alloc.y + alloc.height;",
        "\t\t\t\tcurr_y = header_height; ",
        "\t\t\t\treading_header = false;",
        "\t        }",
        "\t\t    if (child.get_type().name() != \"GtkListItemWidget\") {",
        "    \t\t    child = child.get_next_sibling();",
        "    \t\t    continue;",
        "\t\t    }",
        "\t\t    line_no++;",
        "",
        "\t\t\tchild.get_allocation(out alloc);",
        "\t\t\t//GLib.debug(\"got cell xy = %d,%d  w,h= %d,%d\", alloc.x, alloc.y, alloc.width, alloc.height);",
        "",
        "\t\t    if (y > curr_y && y <= header_height + alloc.height + alloc.y ) {",
        "\t\t    \tif (y > (header_height + alloc.y + (alloc.height * 0.8))) {",
        "\t\t    \t\tpos = \"above\";",
        "\t    \t\t} else if (y > (header_height + alloc.y + (alloc.height * 0.2))) {",
        "\t    \t\t\tpos = \"over\";",
        "    \t\t\t} else {",
        "    \t\t\t\tpos = \"below\";",
        "\t\t\t\t}",
        "\t\t    \tGLib.debug(\"getRowAt return : %d, %s\", line_no, pos);",
        "\t\t\t    return line_no;",
        "\t\t    }",
        "\t\t    curr_y = header_height + alloc.height + alloc.y;",
        "",
        "\t\t    if (curr_y > y) {",
        "\t\t    //    return -1;",
        "\t        }",
        "\t        child = child.get_next_sibling(); ",
        "    \t}",
        "        return -1;",
        "",
        " }"
       ],
       "| void a_highlightDropPath" : [
        " ( string treepath, Gtk.TreeViewDropPosition pos) {",
        "",
        "\t// highlighting for drag/drop",
        "/*",
        "",
        "\tif (treepath.length > 0) {",
        "",
        "\t\tvar tp = new  Gtk.TreePath.from_string( treepath );",
        "\t\tGLib.debug(\"set drag dest row %s, %i\", treepath, (int) pos);",
        "",
        "\t\tthis.el.set_drag_dest_row( tp , pos);",
        "",
        "\t\tGLib.debug(\"Done set drag dest row\");",
        "\t\treturn;",
        "\t} ",
        "",
        "\tthis.el.set_drag_dest_row(null, Gtk.TreeViewDropPosition.INTO_OR_AFTER);",
        "",
        "  */           ",
        "}"
       ],
       "| void a_selectNode" : [
        "(string treepath_str, string source) {",
        "\t/*",
        "\tthis.lastEventSource = source;",
        "    //this.selection.select_path(new  Gtk.TreePath.from_string( treepath_str));",
        "     var tp = new Gtk.TreePath.from_string(treepath_str);",
        "     ",
        "     this.el.set_cursor(tp, null, false);  ",
        "     this.el.scroll_to_cell(tp, null, false, 0,0);",
        "     */",
        "}",
        ""
       ],
       "| void a_setCursor" : [
        "(string treepath, string sourceEvent)   {",
        "\t/*",
        "\tthis.lastEventSource = sourceEvent;",
        "\t//this.blockChanges = true; << block changes prevents loading of 'node data' and firing of node_selected..",
        "    this.el.set_cursor(new Gtk.TreePath.from_string(treepath), null, false); ",
        "    // fire node_selected..",
        "    //this.blockChanges = false;",
        "\tthis.lastEventSource = \"\";",
        "\t*/",
        "}",
        ""
       ]
      },
      {
       "$ xns" : "Gtk",
       "* pack" : false,
       "id" : "LeftTreeMenu",
       "items" : [
        {
         "$ xns" : "Gtk",
         "* prop" : "child",
         "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
         "int spacing" : 0,
         "items" : [
          {
           "$ xns" : "Gtk",
           "label" : "Delete Element",
           "listeners" : {
            "activate" : [
             "  ( ) => {",
             "    ",
             "    print(\"ACTIVATE?\");",
             "    ",
             "  ",
             "     _this.model.deleteSelected();",
             "}"
            ]
           },
           "xtype" : "Button"
          },
          {
           "$ xns" : "Gtk",
           "label" : "Save as Template",
           "listeners" : {
            "activate" : [
             "  () => {",
             "",
             "     DialogSaveTemplate.singleton().showIt(",
             "            (Gtk.Window) _this.el.get_root (), ",
             "            _this.main_window.windowstate.file.palete(), ",
             "            _this.getActiveElement()",
             "    );",
             "     ",
             "    ",
             "}"
            ]
           },
           "xtype" : "Button"
          },
          {
           "$ xns" : "Gtk",
           "label" : "Save as Module",
           "listeners" : {
            "activate" : [
             "  () => {",
             "    var node = _this.getActiveElement();",
             "      ",
             "     ",
             "     var sm = DialogSaveModule.singleton();",
             "     ",
             "     ",
             "    sm.showIt(",
             "            (Gtk.Window) _this.el.get_root (), ",
             "            _this.main_window.windowstate.project, ",
             "            node",
             "     );",
             "     /*",
             "     gtk4 migration - disabled this part.. probably not used muchanyway",
             "     ",
             "     ",
             "     if (name.length < 1) {",
             "            return;",
             "  ",
             "     }",
             "     node.set_prop( new JsRender.NodeProp.special(\"xinclude\", name));",
             "     node.items.clear();",
             "",
             "",
             "    var s = _this.view.el.get_selection();",
             "    ",
             "    print(\"GET  SELECTED?\");",
             "    Gtk.TreeIter iter;",
             "    Gtk.TreeModel mod;",
             "",
             "    ",
             "    if (!s.get_selected(out mod, out iter)) {",
             "        return; // nothing seleted..",
             "    }",
             "    Gtk.TreeIter citer;",
             "    var n_cn = mod.iter_n_children(iter) -1;",
             "    for (var i = n_cn; i > -1; i--) {",
             "        mod.iter_nth_child(out citer, iter, i);",
             "        ",
             "",
             "        print(\"removing node from Tree\\n\");    ",
             "    ",
             "        _this.model.el.remove(ref citer);",
             "    }",
             "    _this.changed();",
             "    _this.node_selected(node, \"tree\");",
             "     */",
             "    ",
             "}"
            ]
           },
           "xtype" : "Button"
          }
         ],
         "xtype" : "Box"
        }
       ],
       "xtype" : "Popover"
      }
     ],
     "xtype" : "ScrolledWindow"
    }
   ],
   "xtype" : "Box",
   "| JsRender.JsRender getActiveFile" : [
    "() {",
    "    return this.main_window.windowstate.file;",
    "}",
    ""
   ],
   "| JsRender.Node? getActiveElement" : [
    " () { // return path to actie node.",
    "",
    "     var ret = ((Gtk.SingleSelection) this.view.el.model).get_selected_item();",
    "    if (ret == null) {",
    "    \treturn null;",
    "\t}",
    "\treturn (JsRender.Node) ret;",
    "    ",
    "    ",
    "}",
    ""
   ],
   "| void onresize" : [
    "() {",
    " ",
    "\t ",
    "\t//GLib.debug(\"Got allocation width of scrolled view %d\", allocation.width );",
    "//\t_this.maincol.el.set_max_width( _this.viewwin.el.get_width()  - 32 );",
    "}",
    "",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "WindowLeftTree",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/WindowLeftTree.bjs",
 "permname" : "",
 "title" : ""
}