{
 "build_module" : "builder",
 "items" : [
  {
   "# Gtk.Widget lastObj" : "null",
   "# JsRender.JsRender file" : "null",
   "# Xcls_MainWindow main_window" : "",
   "$ xns" : "Gtk",
   "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
   "Gtk.SourceSearchContext searchcontext" : "",
   "bool hexpand" : true,
   "bool vexpand" : true,
   "id" : "GtkView",
   "int height" : 0,
   "int last_search_end" : 0,
   "int width" : 0,
   "items" : [
    {
     "$ xns" : "Gtk",
     "* pack" : "pack_start,true,true,0",
     "id" : "notebook",
     "items" : [
      {
       "$ xns" : "Gtk",
       "* pack" : false,
       "id" : "label_preview",
       "utf8 label" : "Preview",
       "xtype" : "Label"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : false,
       "id" : "label_code",
       "utf8 label" : "Preview Generated Code",
       "xtype" : "Label"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "append_page,_this.label_preview.el",
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : "add",
         "id" : "view_layout",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "put,10,10",
           "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
           "id" : "container",
           "xtype" : "Box"
          }
         ],
         "xtype" : "Layout"
        }
       ],
       "xtype" : "ScrolledWindow"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "append_page,_this.label_code.el",
       "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
       "int spacing" : 0,
       "items" : [
        {
         "$ xns" : "Gtk",
         "bool vexpand" : true,
         "items" : [
          {
           "# JsRender.Node? node_selected" : "",
           "# string prop_selected" : "\"\"",
           "$ xns" : "Gtk",
           "* init" : [
            "{",
            "   ",
            "    var description =   Pango.FontDescription.from_string(\"monospace\");",
            "    description.set_size(8000);",
            "    this.el.override_font(description);",
            "",
            "    this.loading = true;",
            "    var buf = this.el.get_buffer();",
            "    buf.notify.connect((ps) => {",
            "        if (this.loading) {",
            "            return;",
            "        }",
            "        if (ps.name != \"cursor-position\") {",
            "            return;",
            "        }",
            "        print(\"cursor changed : %d\\n\", buf.cursor_position);",
            "        Gtk.TextIter cpos;",
            "        buf.get_iter_at_offset(out cpos, buf.cursor_position);",
            "        ",
            "        var ln = cpos.get_line();",
            " ",
            "        var node = _this.file.lineToNode(ln);",
            " ",
            "        if (node == null) {",
            "            print(\"can not find node\\n\");",
            "            return;",
            "        }",
            "        var ltree = _this.main_window.windowstate.left_tree;",
            "        var tp = ltree.model.treePathFromNode(node);",
            "        print(\"got tree path %s\\n\", tp);",
            "        if (tp != \"\") {",
            "\t       this.allow_node_scroll = false;        ",
            "\t       print(\"changing cursor on tree..\\n\");",
            "            ltree.view.el.set_cursor(new Gtk.TreePath.from_string(tp), null, false);",
            "            // scrolling is disabled... as node selection calls scroll 10ms after it changes.",
            "            GLib.Timeout.add_full(GLib.Priority.DEFAULT,100 , () => {",
            "\t            this.allow_node_scroll = true;",
            "\t            return false;",
            "            });",
            "        }",
            "        ",
            "        // highlight the node..",
            "        ",
            "    });",
            "  ",
            "  ",
            "  ",
            "    var attrs = new Gtk.SourceMarkAttributes();",
            "    var  pink =   Gdk.RGBA();",
            "    pink.parse ( \"pink\");",
            "    attrs.set_background ( pink);",
            "    attrs.set_icon_name ( \"process-stop\");    ",
            "    attrs.query_tooltip_text.connect(( mark) => {",
            "        //print(\"tooltip query? %s\\n\", mark.name);",
            "        return mark.name;",
            "    });",
            "    ",
            "    this.el.set_mark_attributes (\"ERR\", attrs, 1);",
            "    ",
            "     var wattrs = new Gtk.SourceMarkAttributes();",
            "    var  blue =   Gdk.RGBA();",
            "    blue.parse ( \"#ABF4EB\");",
            "    wattrs.set_background ( blue);",
            "    wattrs.set_icon_name ( \"process-stop\");    ",
            "    wattrs.query_tooltip_text.connect(( mark) => {",
            "        //print(\"tooltip query? %s\\n\", mark.name);",
            "        return mark.name;",
            "    });",
            "    ",
            "    this.el.set_mark_attributes (\"WARN\", wattrs, 1);",
            "    ",
            " ",
            "    ",
            "     var dattrs = new Gtk.SourceMarkAttributes();",
            "    var  purple =   Gdk.RGBA();",
            "    purple.parse ( \"#EEA9FF\");",
            "    dattrs.set_background ( purple);",
            "    dattrs.set_icon_name ( \"process-stop\");    ",
            "    dattrs.query_tooltip_text.connect(( mark) => {",
            "        //print(\"tooltip query? %s\\n\", mark.name);",
            "        return mark.name;",
            "    });",
            "    ",
            "    this.el.set_mark_attributes (\"DEPR\", dattrs, 1);",
            "    ",
            "    ",
            "    var gattrs = new Gtk.SourceMarkAttributes();",
            "    var  grey =   Gdk.RGBA();",
            "    grey.parse ( \"#ccc\");",
            "    gattrs.set_background ( grey);",
            " ",
            "    ",
            "    this.el.set_mark_attributes (\"grey\", gattrs, 1);",
            "    ",
            "    ",
            "    ",
            "    ",
            "    ",
            "    ",
            "}",
            " "
           ],
           "* pack" : "add",
           "bool allow_node_scroll" : true,
           "bool loading" : true,
           "gboolean editable" : false,
           "gboolean show_line_marks" : true,
           "gboolean show_line_numbers" : true,
           "id" : "sourceview",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "set_buffer",
             "bool dirty" : false,
             "id" : "buffer",
             "int error_line" : "-1",
             "xtype" : "SourceBuffer"
            }
           ],
           "listeners" : {
            "key_press_event" : [
             "(event) => {",
             "\t",
             "\t if (event.keyval == Gdk.Key.g && (event.state & Gdk.ModifierType.CONTROL_MASK ) > 0 ) {",
             "\t    GLib.debug(\"SAVE: ctrl-g  pressed\");",
             "\t\t_this.forwardSearch(true);",
             "\t    return true;",
             "\t}",
             "    ",
             "\t ",
             "\treturn false;",
             "}\t ",
             ""
            ]
           },
           "xtype" : "SourceView",
           "| string toString" : [
            "() {",
            "   Gtk.TextIter s;",
            "    Gtk.TextIter e;",
            "    this.el.get_buffer().get_start_iter(out s);",
            "    this.el.get_buffer().get_end_iter(out e);",
            "    var ret = this.el.get_buffer().get_text(s,e,true);",
            "    //print(\"TO STRING? \" + ret);",
            "    return ret;",
            "}",
            ""
           ],
           "| void highlightErrorsJson" : [
            " (string type, Json.Object obj) {",
            "      Gtk.TextIter start;",
            "     Gtk.TextIter end;   ",
            "     ",
            "     var buf =  this.el.get_buffer();",
            "       var sbuf = (Gtk.SourceBuffer)buf;",
            "        buf.get_bounds (out start, out end);",
            "        ",
            "        sbuf.remove_source_marks (start, end, type);",
            "                 ",
            "     ",
            "     // we should highlight other types of errors..",
            "    ",
            "    if (!obj.has_member(type)) {",
            "        print(\"Return has no errors\\n\");",
            "        return  ;",
            "    }",
            "    var err = obj.get_object_member(type);",
            "    ",
            "    if (_this.file == null) { ",
            "        return; // just in case the file has not loaded yet?",
            "    }",
            " ",
            "",
            "    var valafn = \"\";",
            "      try {             ",
            "           var  regex = new Regex(\"\\\\.bjs$\");",
            "        ",
            "         ",
            "            valafn = regex.replace(_this.file.path,_this.file.path.length , 0 , \".vala\");",
            "         } catch (GLib.RegexError e) {",
            "            return;",
            "        }   ",
            "",
            "   if (!err.has_member(valafn)) {",
            "        print(\"File path has no errors\\n\");",
            "        return  ;",
            "    }",
            "    var lines = err.get_object_member(valafn);",
            "    ",
            "   ",
            "    ",
            "    var tlines = buf.get_line_count () +1;",
            "    ",
            "    lines.foreach_member((obj, line, node) => {",
            "        ",
            "             Gtk.TextIter iter;",
            "    //        print(\"get inter\\n\");",
            "            var eline = int.parse(line) -1  ;",
            "            print(\"GOT ERROR on line %s -- converted to %d\\n\", line,eline);",
            "            ",
            "            ",
            "            if (eline > tlines || eline < 0) {",
            "                return;",
            "            }",
            "            sbuf.get_iter_at_line( out iter, eline);",
            "            //print(\"mark line\\n\");",
            "            var msg  = type + \" on line: %d - %s\".printf(eline+1, valafn);",
            "            var ar = lines.get_array_member(line);",
            "            for (var i = 0 ; i < ar.get_length(); i++) {",
            "\t\t    msg += (msg.length > 0) ? \"\\n\" : \"\";",
            "\t\t    msg += ar.get_string_element(i);",
            "\t    }",
            "            ",
            "            ",
            "            sbuf.create_source_mark(msg, type, iter);",
            "        } );",
            "        return  ;",
            "    ",
            " ",
            "",
            "",
            "}"
           ],
           "| void loadFile" : [
            "( ) {",
            "    this.loading = true;",
            "    var buf = this.el.get_buffer();",
            "    buf.set_text(\"\",0);",
            "    var sbuf = (Gtk.SourceBuffer) buf;",
            "",
            "    ",
            "",
            "    if (_this.file == null || _this.file.xtype != \"Gtk\") {",
            "        print(\"xtype != Gtk\");",
            "        this.loading = false;",
            "        return;",
            "    }",
            "    ",
            "    var valafn = \"\";",
            "      try {             ",
            "           var  regex = new Regex(\"\\\\.bjs$\");",
            "        ",
            "         ",
            "            valafn = regex.replace(_this.file.path,_this.file.path.length , 0 , \".vala\");",
            "         } catch (GLib.RegexError e) {",
            "             this.loading = false;",
            "            return;",
            "        }   ",
            "    ",
            "",
            "   if (!FileUtils.test(valafn,FileTest.IS_REGULAR) ) {",
            "        print(\"File path has no errors\\n\");",
            "        this.loading = false;",
            "        return  ;",
            "    }",
            "    ",
            "    string str;",
            "    try {",
            "    ",
            "        GLib.FileUtils.get_contents (valafn, out str);",
            "    } catch (Error e) {",
            "        this.loading = false;",
            "        return  ;",
            "    }",
            "",
            "//    print(\"setting str %d\\n\", str.length);",
            "    buf.set_text(str, str.length);",
            "    var lm = Gtk.SourceLanguageManager.get_default();",
            "     ",
            "    //?? is javascript going to work as js?",
            "    ",
            "    ((Gtk.SourceBuffer)(buf)) .set_language(lm.get_language(_this.file.language));",
            "  ",
            "    ",
            "    Gtk.TextIter start;",
            "    Gtk.TextIter end;     ",
            "        ",
            "    sbuf.get_bounds (out start, out end);",
            "    sbuf.remove_source_marks (start, end, null); // remove all marks..",
            "    ",
            "    ",
            "    if (_this.main_window.windowstate.last_compile_result != null) {",
            "        var obj = _this.main_window.windowstate.last_compile_result;",
            "        this.highlightErrorsJson(\"ERR\", obj);",
            "        this.highlightErrorsJson(\"WARN\", obj);",
            "        this.highlightErrorsJson(\"DEPR\", obj);\t\t\t",
            "    }",
            "    //while (Gtk.events_pending()) {",
            "     //   Gtk.main_iteration();",
            "   // }",
            "    ",
            "    this.loading = false; ",
            "}",
            ""
           ],
           "| void nodeSelected" : [
            "(JsRender.Node? sel, bool scroll) {",
            "  ",
            "    ",
            "  ",
            "    // this is connected in widnowstate",
            "    print(\"Roo-view - node selected\\n\");",
            "    var buf = this.el.get_buffer();",
            " ",
            "    var sbuf = (Gtk.SourceBuffer) buf;",
            "",
            "   ",
            "    while(Gtk.events_pending()) {",
            "        Gtk.main_iteration();",
            "    }",
            "    ",
            "   ",
            "    // clear all the marks..",
            "     Gtk.TextIter start;",
            "    Gtk.TextIter end;     ",
            "        ",
            "    sbuf.get_bounds (out start, out end);",
            "    sbuf.remove_source_marks (start, end, \"grey\");",
            "    ",
            "        this.node_selected = sel;",
            "     if (sel == null) {",
            "        // no highlighting..",
            "        return;",
            "    }",
            "    Gtk.TextIter iter;   ",
            "    sbuf.get_iter_at_line(out iter,  sel.line_start);",
            "    ",
            "    ",
            "    Gtk.TextIter cur_iter;",
            "    sbuf.get_iter_at_offset(out cur_iter, sbuf.cursor_position);",
            "    ",
            "    //var cur_line = cur_iter.get_line();",
            "    //if (cur_line > sel.line_start && cur_line < sel.line_end) {",
            "    ",
            "    //} else {",
            "    if (this.allow_node_scroll) {",
            "\t\t ",
            "    \tthis.el.scroll_to_iter(iter,  0.1f, true, 0.0f, 0.5f);",
            "\t}",
            "    ",
            "     ",
            "    ",
            "    for (var i = 0; i < buf.get_line_count();i++) {",
            "        if (i < sel.line_start || i > sel.line_end) {",
            "           ",
            "            sbuf.get_iter_at_line(out iter, i);",
            "            sbuf.create_source_mark(null, \"grey\", iter);",
            "            ",
            "        }",
            "    ",
            "    }",
            "    ",
            "",
            "}",
            ""
           ]
          }
         ],
         "xtype" : "ScrolledWindow"
        },
        {
         "$ xns" : "Gtk",
         "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
         "bool homogeneous" : false,
         "bool vexpand" : false,
         "int spacing" : 0,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* init" : [
            "var description =   Pango.FontDescription.from_string(\"monospace\");",
            "\tdescription.set_size(8000);",
            "\t this.el.override_font(description);",
            "",
            ""
           ],
           "bool hexpand" : true,
           "id" : "search_entry",
           "int width_request" : 300,
           "listeners" : {
            "changed" : [
             "() => {",
             "\t/*",
             "\tif (this.el.text == \"\") {",
             "\t\t_this.search_results.el.hide();",
             "\t\treturn;",
             "\t}",
             "\tvar res = 0;",
             "\tswitch(_this.windowstate.state) {",
             "\t\tcase WindowState.State.CODEONLY:",
             "\t\t///case WindowState.State.CODE:",
             "\t\t\t// search the code being edited..",
             "\t\t\tres = _this.windowstate.code_editor_tab.search(this.el.text);",
             "\t\t\t",
             "\t\t\tbreak;",
             "\t\tcase WindowState.State.PREVIEW:",
             "\t\t\tif (_this.windowstate.file.xtype == \"Gtk\") {",
             "\t\t\t\t res = _this.windowstate.window_gladeview.search(this.el.text);",
             "\t\t\t} else { ",
             "\t\t\t\t res = _this.windowstate.window_rooview.search(this.el.text);\t\t\t",
             "\t\t\t}",
             "\t\t",
             "\t\t",
             "\t\t\tbreak;",
             "\t}",
             "\t_this.search_results.el.show();",
             "\tif (res > 0) {",
             "\t\t_this.search_results.el.label = \"%d Matches\".printf(res);",
             "\t} else {",
             "\t\t_this.search_results.el.label = \"No Matches\";",
             "\t}",
             "\t\t",
             "\t*/",
             "\t",
             "}",
             ""
            ],
            "key_press_event" : [
             "(event) => {",
             "     if (event.keyval == Gdk.Key.g && (event.state & Gdk.ModifierType.CONTROL_MASK ) > 0 ) {",
             "\t    GLib.debug(\"SAVE: ctrl-g  pressed\");",
             "\t\t_this.forwardSearch(true);",
             "\t    return true;",
             "\t}",
             "    ",
             "  ",
             " \tif (event.keyval == Gdk.Key.Return && this.el.text.length > 0) {",
             "\t\tvar res = _this.search(this.el.text);",
             "\t\t _this.search_results.updateResults();",
             "",
             "\t\tGLib.Timeout.add_seconds(2,() => {",
             "\t\t\t _this.search_results.updateResults();",
             "\t\t\t return false;",
             "\t\t });",
             "\t ",
             "\t\t",
             "\t    return true;",
             "",
             "\t}    ",
             "   // print(event.key.keyval)",
             "   ",
             "    return false;",
             "",
             "} "
            ]
           },
           "string placeholder_text" : "Press enter to search",
           "xtype" : "SearchEntry",
           "| void forwardSearch" : [
            "(bool change_focus) {",
            "",
            "",
            "\t_this.forwardSearch(change_focus);",
            "",
            "/*",
            "",
            "\tswitch(_this.windowstate.state) {",
            "\t\tcase WindowState.State.CODEONLY:",
            "\t\t//case WindowState.State.CODE:",
            "\t\t\t// search the code being edited..",
            "\t\t\t_this.windowstate.code_editor_tab.forwardSearch(change_focus);",
            "\t\t\t ",
            "\t\t\tbreak;",
            "\t\tcase WindowState.State.PREVIEW:",
            "\t\t\tif (_this.windowstate.file.xtype == \"Gtk\") {",
            "\t\t\t\t_this.windowstate.window_gladeview.forwardSearch(change_focus);",
            "\t\t\t} else { ",
            "\t\t\t\t _this.windowstate.window_rooview.forwardSearch(change_focus);",
            "\t\t\t}",
            "\t\t",
            "\t\t\tbreak;",
            "\t}",
            "\t*/",
            "\t",
            "}",
            ""
           ]
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "add",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "add",
             "bool always_show_image" : true,
             "bool visible" : false,
             "id" : "search_results",
             "listeners" : {
              "button_press_event" : [
               "() => {",
               "/*",
               "    if (this.popup == null) {",
               "        this.popup = new Xcls_ValaCompileErrors();",
               "        this.popup.window = _this;",
               "    }",
               "   ",
               "    ",
               "    this.popup.show(this.notices, this.el);",
               "    */",
               "    return true;",
               "}"
              ]
             },
             "xtype" : "ImageMenuItem",
             "| void updateResults" : [
              "() {",
              "\tthis.el.visible = true;",
              "\t",
              "\tvar res = _this.searchcontext.get_occurrences_count();",
              "\tif (res < 0) {",
              "\t\t_this.search_results.el.label = \"??? Matches\";\t\t",
              "\t\treturn;",
              "\t}",
              "",
              "\t_this.nextBtn.el.sensitive = false;",
              "\t_this.backBtn.el.sensitive = false;\t",
              "",
              "\tif (res > 0) {",
              "\t\t_this.search_results.el.label = \"%d Matches\".printf(res);",
              "\t\t_this.nextBtn.el.sensitive = true;",
              "\t\t_this.backBtn.el.sensitive = true;",
              "\t\treturn;",
              "\t} ",
              "\t_this.search_results.el.label = \"No Matches\";",
              "\t",
              "}"
             ]
            }
           ],
           "xtype" : "MenuBar"
          },
          {
           "$ xns" : "Gtk",
           "bool always_show_image" : true,
           "bool sensitive" : false,
           "id" : "nextBtn",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* prop" : "image",
             "string icon_name" : "go-down",
             "xtype" : "Image"
            }
           ],
           "listeners" : {
            "button_press_event" : [
             "(event) => {",
             "",
             "\t_this.forwardSearch(true);",
             "\t",
             "\treturn true;",
             "}",
             ""
            ]
           },
           "string label" : "Next",
           "xtype" : "Button"
          },
          {
           "$ xns" : "Gtk",
           "bool always_show_image" : true,
           "bool sensitive" : false,
           "id" : "backBtn",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* prop" : "image",
             "string icon_name" : "go-up",
             "xtype" : "Image"
            }
           ],
           "listeners" : {
            "button_press_event" : [
             "(event) => {",
             "",
             "\t_this.backSearch(true);",
             "\t",
             "\treturn true;",
             "}",
             ""
            ]
           },
           "string label" : "Previous",
           "xtype" : "Button"
          },
          {
           "$ xns" : "Gtk",
           "bool always_show_image" : true,
           "items" : [
            {
             "$ xns" : "Gtk",
             "* prop" : "image",
             "string icon_name" : "emblem-system",
             "xtype" : "Image"
            },
            {
             "$ xns" : "Gtk",
             "* prop" : "popup",
             "id" : "search_settings",
             "items" : [
              {
               "$ xns" : "Gtk",
               "* init" : [
                "{",
                "\tthis.el.show();",
                "}",
                ""
               ],
               "id" : "case_sensitive",
               "string label" : "Case Sensitive",
               "xtype" : "CheckMenuItem"
              },
              {
               "$ xns" : "Gtk",
               "* init" : [
                "{",
                "\tthis.el.show();",
                "}",
                ""
               ],
               "id" : "regex",
               "string label" : "Regex",
               "xtype" : "CheckMenuItem"
              },
              {
               "$ xns" : "Gtk",
               "* init" : [
                "{",
                "\tthis.el.show();",
                "}",
                ""
               ],
               "id" : "multiline",
               "string label" : "Multi-line (add \\n)",
               "xtype" : "CheckMenuItem"
              }
             ],
             "xtype" : "Menu"
            }
           ],
           "string label" : "Settings",
           "xtype" : "MenuButton"
          }
         ],
         "xtype" : "Box"
        }
       ],
       "xtype" : "Box"
      }
     ],
     "xtype" : "Notebook"
    }
   ],
   "listeners" : {
    "size_allocate" : [
     "(aloc) => {",
     " ",
     "    this.width = aloc.width;",
     "    this.height =aloc.height;",
     "}",
     " "
    ]
   },
   "xtype" : "Box",
   "| int search" : [
    "(string in_txt) {",
    "\tthis.notebook.el.page = 1;",
    "\t",
    " ",
    "   ",
    "\tvar s = new Gtk.SourceSearchSettings();",
    "\ts.case_sensitive = _this.case_sensitive.el.active;",
    "\ts.regex_enabled = _this.regex.el.active;\t",
    "\ts.wrap_around = false;",
    "\t",
    "\tthis.searchcontext = new Gtk.SourceSearchContext(this.buffer.el,s);",
    "\tthis.searchcontext.set_highlight(true);",
    "\tvar txt = in_txt;",
    "\t",
    "\tif (_this.multiline.el.active) {",
    "\t\ttxt = in_txt.replace(\"\\\\n\", \"\\n\");",
    "\t}",
    "\t",
    "\ts.set_search_text(txt);",
    "\tGtk.TextIter beg, st,en;",
    "\t ",
    "\tthis.buffer.el.get_start_iter(out beg);",
    "\tthis.searchcontext.forward(beg, out st, out en);",
    "\tthis.last_search_end = 0;",
    "\t",
    "\treturn this.searchcontext.get_occurrences_count();",
    "",
    " ",
    "    ",
    "",
    "}",
    ""
   ],
   "| void backSearch" : [
    "(bool change_focus) {",
    "",
    "\tif (this.searchcontext == null) {",
    "\t\treturn;",
    "\t} ",
    "\t",
    "\tGtk.TextIter beg, st,en;",
    "\tbool has_wrapped_around;",
    "\tthis.buffer.el.get_iter_at_offset(out beg, this.last_search_end -1 );",
    "\t",
    "\tif (!this.searchcontext.backward2(beg, out st, out en, out has_wrapped_around)) {",
    "\t",
    "\t\tthis.last_search_end = 0;",
    "\t\treturn;",
    "\t}",
    "\tthis.last_search_end = en.get_offset();",
    "\tif (change_focus) {",
    "\t\tthis.sourceview.el.grab_focus();",
    "\t}",
    "\tthis.buffer.el.place_cursor(st);",
    "\tthis.sourceview.el.scroll_to_iter(st,  0.1f, true, 0.0f, 0.5f);",
    "\tvar ln = st.get_line();",
    "\tthis.highlightNodeAtLine(ln);",
    "\t",
    " ",
    "}",
    ""
   ],
   "| void createThumb" : [
    "() {",
    "    ",
    "    ",
    "    if (this.file == null) {",
    "        return;",
    "    }",
    "    // only screenshot the gtk preview..",
    "    if (this.notebook.el.page > 0 ) {",
    "        return;",
    "    }",
    "    ",
    "    ",
    "    var filename = this.file.getIconFileName(false);",
    "    ",
    "    var  win = this.el.get_parent_window();",
    "    var width = win.get_width();",
    "    var height = win.get_height();",
    "    try {",
    "         Gdk.Pixbuf screenshot = Gdk.pixbuf_get_from_window(win, 0, 0, width, height); // this.el.position?",
    "         screenshot.save(filename,\"png\");",
    "    } catch (Error e) {",
    "        ",
    "    }",
    "",
    "   ",
    "    return;",
    "    ",
    "    ",
    "     ",
    "     ",
    "    ",
    "    // should we hold until it's printed...",
    "    ",
    "      ",
    "",
    "    ",
    "    ",
    "",
    "",
    "    ",
    "     ",
    "}",
    ""
   ],
   "| void forwardSearch" : [
    "(bool change_focus) {",
    "",
    "\tif (this.searchcontext == null) {",
    "\t\treturn;",
    "\t}",
    "\tthis.notebook.el.page = 1;",
    "\tGtk.TextIter beg, st,en, stl;",
    "\t",
    "\tvar buf = this.sourceview.el.get_buffer();",
    "\tbuf.get_iter_at_offset(out beg, this.last_search_end);",
    "\tif (!this.searchcontext.forward(beg, out st, out en)) {",
    "\t\tthis.last_search_end = 0;",
    "\t\treturn;",
    "\t}",
    "\tthis.last_search_end = en.get_offset();",
    "\tif (change_focus) {",
    "\t\tthis.sourceview.el.grab_focus();",
    "\t}",
    "\tbuf.place_cursor(st);",
    "\t",
    " ",
    "\t ",
    "\tthis.sourceview.el.scroll_to_iter(st,  0.0f, true, 0.0f, 0.5f);",
    "\t",
    "\t",
    "\tvar ln = st.get_line();",
    "\t",
    "\tthis.highlightNodeAtLine(ln);",
    "}\t",
    "  "
   ],
   "| void highlightNodeAtLine" : [
    "(int ln) {",
    "",
    "",
    "\t ",
    "\t// highlight node...",
    "\t",
    "\t\t",
    "    var node = _this.file.lineToNode(ln+1);",
    " ",
    "    if (node == null) {",
    "        //print(\"can not find node\\n\");",
    "        return;",
    "    }",
    "    var prop = node.lineToProp(ln+1);",
    "    print(\"prop : %s\", prop == null ? \"???\" : prop);",
    "        ",
    "        ",
    "    // ---------- this selects the tree's node...",
    "    ",
    "    var ltree = _this.main_window.windowstate.left_tree;",
    "    var tp = ltree.model.treePathFromNode(node);",
    "    print(\"got tree path %s\\n\", tp);",
    "    if (tp == \"\") {",
    "\t\treturn;",
    "\t}",
    "    //_this.sourceview.allow_node_scroll = false; /// block node scrolling..",
    "\t       ",
    "   ",
    "    //print(\"changing cursor on tree..\\n\");",
    "   ",
    "",
    "    ",
    "    // let's try allowing editing on the methods.",
    "    // a little klunky at present..",
    "\t_this.sourceview.prop_selected = \"\";",
    "    if (prop != null) {",
    "\t\t//see if we can find it..",
    "\t\tvar kv = prop.split(\":\");",
    "\t\tif (kv[0] == \"p\") {",
    "\t\t",
    "    \t\t//var k = prop.get_key(kv[1]);",
    "    \t\t// fixme -- need to determine if it's an editable property...",
    "    \t\t_this.sourceview.prop_selected = prop;",
    "    \t\t",
    "\t\t} else if (kv[0] == \"l\") {",
    "\t\t\t _this.sourceview.prop_selected = prop;",
    "\t\t\t",
    "\t\t}",
    "    }",
    "    ltree.view.setCursor(tp, \"editor\");",
    "   // ltree.view.el.set_cursor(new Gtk.TreePath.from_string(tp), null, false); ",
    "   _this.sourceview.nodeSelected(node,false);",
    "    ",
    "            // scrolling is disabled... as node selection calls scroll 10ms after it changes.",
    "      //      GLib.Timeout.add_full(GLib.Priority.DEFAULT,100 , () => {",
    "\t  //          this.allow_node_scroll = true;",
    "\t  //          return false;",
    "      //      });",
    "      //  }",
    "\t\t",
    "\t\t",
    "\t\t",
    "\t\t",
    "\t\t",
    "\t\t",
    "\t\t",
    "\t\t",
    "\t\t",
    "\t\t ",
    "",
    "}",
    " "
   ],
   "| void loadFile" : [
    "(JsRender.JsRender file) ",
    "{",
    "        this.file = null;",
    "        ",
    "        if (file.tree == null) {",
    "            return;",
    "        }",
    "        this.notebook.el.page = 0;// gtk preview ",
    "   ",
    "  ",
    "        ",
    "       this.file = file;     ",
    "        this.sourceview.loadFile();",
    "        this.searchcontext = null;",
    "        ",
    "",
    "        if (this.lastObj != null) {",
    "            this.container.el.remove(this.lastObj);",
    "        }",
    "        ",
    "        // hide the compile view at present..",
    "          ",
    "        ",
    "        var w = this.width;",
    "        var h = this.height;",
    "        ",
    "        print(\"ALLOC SET SIZES %d, %d\\n\", w,h); ",
    "        ",
    "        // set the container size min to 500/500 or 20 px less than max..",
    "        w = int.max (w-20, 500);",
    "        h = int.max (h-20, 500); ",
    "        ",
    "        print(\"SET SIZES %d, %d\\n\", w,h);       ",
    "        _this.container.el.set_size_request(w,h);",
    "        ",
    "        _this.view_layout.el.set_size(w,h); // should be baded on calc.. -- see update_scrolled.",
    "        var rgba = Gdk.RGBA ();",
    "        rgba.parse (\"#ccc\");",
    "        _this.view_layout.el.override_background_color(Gtk.StateFlags.NORMAL, rgba);",
    "        ",
    "        ",
    "\tvar x = new JsRender.NodeToGtk((Project.Gtk) file.project, file.tree);",
    "    var obj = x.munge() as Gtk.Widget;",
    "    this.lastObj = null;",
    "\tif (obj == null) {",
    "        \treturn;",
    "\t}",
    "\tthis.lastObj = obj;",
    "        ",
    "        this.container.el.add(obj);",
    "        obj.show_all();",
    "        ",
    "         ",
    "        ",
    "}",
    " "
   ],
   "| void scroll_to_line" : [
    "(int line) {",
    "   this.notebook.el.page = 1;// code preview...",
    "   ",
    "   GLib.Timeout.add(500, () => {",
    "   ",
    "   ",
    "\t   ",
    "\t   ",
    "\t\t  var buf = this.sourceview.el.get_buffer();",
    "\t ",
    "\t\tvar sbuf = (Gtk.SourceBuffer) buf;",
    "",
    "",
    "\t\tGtk.TextIter iter;   ",
    "\t\tsbuf.get_iter_at_line(out iter,  line);",
    "\t\tthis.sourceview.el.scroll_to_iter(iter,  0.1f, true, 0.0f, 0.5f);",
    "\t\treturn false;",
    "\t});   ",
    "",
    "   ",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "GtkView",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/GtkView.bjs",
 "permname" : "",
 "title" : ""
}