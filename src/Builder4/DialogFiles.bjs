{
 "build_module" : "builder",
 "items" : [
  {
   "# Xcls_MainWindow win" : "",
   "$ xns" : "Gtk",
   "Gdk.Pixbuf missing_thumb_pixbuf" : "",
   "Gee.HashMap<string,Gdk.Pixbuf> image_cache" : "",
   "Project.Project selectedProject" : "",
   "bool in_onprojectselected" : false,
   "bool is_loaded" : false,
   "bool is_loading" : false,
   "bool modal" : true,
   "bool new_window" : false,
   "items" : [
    {
     "$ homogeneous" : false,
     "$ xns" : "Gtk",
     "* prop" : "child",
     "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
     "bool expand" : true,
     "int margin_bottom" : 10,
     "int margin_end" : 10,
     "int margin_start" : 10,
     "int margin_top" : 10,
     "items" : [
      {
       "$ xns" : "Gtk",
       "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
       "bool hexpand" : true,
       "int spacing" : 0,
       "items" : [
        {
         "$ Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
         "$ xns" : "Gtk",
         "items" : [
          {
           "$ xns" : "Gtk",
           "items" : [
            {
             "$ Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
             "$ xns" : "Gtk",
             "* prop" : "child",
             "items" : [
              {
               "$ Gtk.IconSize icon_size" : "Gtk.IconSize.NORMAL",
               "$ xns" : "Gtk",
               "int margin_end" : 4,
               "string icon_name" : "folder-new",
               "xtype" : "Image"
              },
              {
               "$ xns" : "Gtk",
               "string label" : "New Project",
               "xtype" : "Label"
              }
             ],
             "xtype" : "Box"
            }
           ],
           "listeners" : {
            "clicked" : [
             "  ( ) => {",
             "  ",
             "    // create a new file in project..",
             "    //Xcls_DialogNewComponent.singleton().show(",
             "   var  pe =      EditProject.singleton();",
             "   pe.el.application = _this.win.el.application;",
             "    pe.el.set_transient_for( _this.el );",
             " ",
             "  ",
             "    pe.selected.connect((pr) => {",
             "     \t",
             "\t     _this.is_loaded = false;",
             "\t     _this.show(  pr, _this.new_window);",
             "",
             "    });",
             "    ",
             "      ",
             "    pe.show();",
             "   ",
             "",
             "}"
            ]
           },
           "string label" : "New Project",
           "xtype" : "Button"
          },
          {
           "$ xns" : "Gtk",
           "listeners" : {
            "clicked" : [
             "  ( ) => {",
             "  // should disable the button really.",
             "   if (_this.selectedProject == null) {",
             "\t   return;",
             "   }",
             "\t_this.win.windowstate.projectPopoverShow(_this.el, _this.selectedProject);",
             " }"
            ]
           },
           "string icon_name" : "emblem-system",
           "string label" : "Project Properties",
           "xtype" : "Button"
          },
          {
           "$ xns" : "Gtk",
           "listeners" : {
            "clicked" : [
             "  ( ) => {",
             "  /*",
             "   var cd = DialogConfirm.singleton();",
             "     cd.el.set_transient_for(_this.el);",
             "    cd.el.set_modal(true);",
             "",
             "     var project =   _this.windowstate.left_projects.getSelectedProject();",
             "    if (project == null) {",
             "        print(\"SKIP - no project\\n\");",
             "        return;",
             "    }",
             "    ",
             "        ",
             "     if (Gtk.ResponseType.YES != cd.show(\"Confirm\", ",
             "        \"Are you sure you want to delete project %s\".printf(project.name))) {",
             "        return;",
             "    }",
             "     ",
             "",
             "    // confirm?",
             "    Project.Project.remove(project);",
             "    _this.project = null;",
             "    ",
             "    _this.windowstate.left_projects.is_loaded =  false;",
             "    _this.windowstate.left_projects.load();",
             "    _this.windowstate.clutterfiles.clearFiles();",
             "*/",
             "",
             "}"
            ]
           },
           "string icon_name" : "user-trash",
           "string label" : "Delete Project",
           "xtype" : "Button"
          },
          {
           "$ xns" : "Gtk",
           "listeners" : {
            "clicked" : [
             " () => {",
             "    // create a new file in project..",
             "    print(\"add file selected\\n\");",
             "    ",
             "    if (_this.selectedProject == null) {",
             "    \treturn;",
             "    }",
             "    try {",
             "    \tvar f = JsRender.JsRender.factory(_this.selectedProject.xtype,  _this.selectedProject, \"\");",
             "     \t_this.win.windowstate.file_details.show( f, _this.el, _this.new_window );",
             "     } catch (JsRender.Error e) {}",
             "",
             "}"
            ]
           },
           "string icon_name" : "document-new",
           "string label" : "New File",
           "xtype" : "Button"
          }
         ],
         "xtype" : "Box"
        }
       ],
       "xtype" : "Box"
      },
      {
       "$ xns" : "Gtk",
       "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
       "bool hexpand" : true,
       "bool homogeneous" : false,
       "bool vexpand" : true,
       "int spacing" : 0,
       "items" : [
        {
         "$ xns" : "Gtk",
         "* init" : [
          "  this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
          " "
         ],
         "bool expand" : true,
         "bool has_frame" : true,
         "bool hexpand" : true,
         "bool vexpand" : true,
         "int width_request" : 150,
         "items" : [
          {
           "$ enable_tree_lines" : true,
           "$ headers_visible" : true,
           "$ xns" : "Gtk",
           "* init" : [
            "   ",
            "        ",
            "this.css = new Gtk.CssProvider();",
            "try {",
            "\tthis.css.load_from_data(\"#popover-files-view { font-size: 10px;}\".data);",
            "} catch (Error e) {}",
            "this.el.get_style_context().add_provider(this.css,Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);",
            "        ",
            "        ",
            "        ",
            "        ",
            "var selection = this.el.get_selection();",
            "selection.set_mode( Gtk.SelectionMode.SINGLE);",
            "",
            "",
            "    ",
            "   ",
            " "
           ],
           "* pack" : "set_child",
           "Gtk.CssProvider css" : "",
           "bool hexpand" : true,
           "bool vexpand" : true,
           "id" : "view",
           "items" : [
            {
             "$ columns" : "typeof(string), typeof(Object)",
             "$ xns" : "Gtk",
             "* init" : [
              "{",
              "   this.el.set_sort_func(0, (mod,a,b) => {",
              "       GLib.Value ga, gb;",
              "       mod.get_value(a,0, out ga);",
              "       mod.get_value(b,0, out gb);",
              "        ",
              "        if ((string)ga == (string)gb) {",
              "            return 0;",
              "        }",
              "        return (string)ga > (string)gb ? 1 : -1;",
              "   }); ",
              "",
              "",
              "}",
              ""
             ],
             "* pack" : "set_model",
             "id" : "model",
             "n_columns" : 2,
             "xtype" : "ListStore"
            },
            {
             "$ xns" : "Gtk",
             "* init" : [
              "",
              "    this.el.add_attribute(_this.namecol.el , \"markup\", 0  );",
              " "
             ],
             "* pack" : "append_column",
             "items" : [
              {
               "$ xns" : "Gtk",
               "* pack" : "pack_start,true",
               "id" : "namecol",
               "xtype" : "CellRendererText"
              }
             ],
             "utf8 title" : "Projects",
             "xtype" : "TreeViewColumn"
            }
           ],
           "listeners" : {
            "cursor_changed" : [
             " () => {",
             "    if (_this.is_loading) {",
             "        return;",
             "    }",
             "    ",
             "    Gtk.TreeIter iter;",
             "    Gtk.TreeModel mod;",
             "            ",
             "    var s = this.el.get_selection();",
             "    if (!s.get_selected(out mod, out iter)) {",
             "        return;",
             "    }",
             "    ",
             "    GLib.Value gval;",
             "",
             "    mod.get_value(iter, 1 , out gval);",
             "    var project = (Project.Project)gval.get_object();",
             "    ",
             "    _this.onProjectSelected(project);",
             "    ",
             "}  "
            ]
           },
           "string name" : "popover-files-view",
           "xtype" : "TreeView"
          }
         ],
         "xtype" : "ScrolledWindow"
        },
        {
         "$ xns" : "Gtk",
         "* prop" : "child",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "model",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* prop" : "model",
             "items" : [
              {
               "$ xns" : "GLib",
               "* prop" : "model",
               "GLib.Type item_type" : "typeof(JsRender.JsRender)",
               "xtype" : "ListStore"
              }
             ],
             "xtype" : "SortListModel"
            }
           ],
           "xtype" : "SingleSelection"
          },
          {
           "$ xns" : "Gtk",
           "* prop" : "factory",
           "listeners" : {
            "bind" : [
             "(listitem) => {",
             " ",
             "\tvar box = (Gtk.Box)  ((Gtk.ListItem)listitem).get_child();",
             "\t   ",
             "\tvar img = (Gtk.Image) box.get_first_child();",
             "\tvar lbl = img.get_next_sibling();",
             "",
             "\tvar item = (JsRender.JsRender)  ((Gtk.ListItem)listitem).get_item();",
             "",
             "\titem.bind_property(\"name\",",
             "                lbl, \"label\",",
             "           GLib.BindingFlags.SYNC_CREATE);",
             "",
             "\t",
             "    img.set_from_file(item.getIconFileName());",
             "    ",
             "\t  ",
             "}",
             ""
            ],
            "setup" : [
             "(item) => {",
             "\t//var j = (JsRender.JsRender) item;",
             "\tvar gi = (Gtk.ListItem)item;",
             "\tvar b  = new Gtk.Box(Gtk.Orientation.VERTICAL,4);",
             "\tvar i = new Gtk.Image();",
             "\ti.pixel_size = 96;",
             "\tvar t = new Gtk.Label(\"\");",
             "\tb.append(i);",
             "\tb.append(t);",
             "\t",
             "\tgi.set_child(b);",
             "\tb.has_tooltip = true;",
             "\tb.query_tooltip.connect((x, y, keyboard_tooltip, tooltip) => {",
             "\t\tvar j = (JsRender.JsRender) gi.get_item();",
             "\t\t",
             "\t\tvar ti = new Gtk.Image.from_file ( j.getIconFileName());",
             "\t\tti.pixel_size = 368;",
             "\t\ttooltip.set_custom( ti );",
             "\t\treturn true;",
             "\t});",
             "",
             "",
             "}",
             ""
            ]
           },
           "xtype" : "SignalListItemFactory"
          }
         ],
         "xtype" : "GridView"
        },
        {
         "$ xns" : "Gtk",
         "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
         "bool hexpand" : true,
         "bool vexpand" : true,
         "int spacing" : 0,
         "int width_request" : 600,
         "items" : [
          {
           "$ xns" : "Gtk",
           "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
           "bool hexpand" : true,
           "int spacing" : 0,
           "items" : [
            {
             "$ xns" : "Gtk",
             "* init" : [
              " ",
              "",
              "this.css = new Gtk.CssProvider();",
              "try {",
              "\tthis.css.load_from_data(\"#popover-files-iconsearch { font:  10px monospace;}\".data);",
              "} catch (Error e) {}",
              "this.el.get_style_context().add_provider(this.css,Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);",
              "        ",
              "        ",
              ""
             ],
             "Gtk.CssProvider css" : "",
             "bool hexpand" : true,
             "id" : "iconsearch",
             "listeners" : {
              "changed" : [
               "( ) => {",
               "\tGLib.debug(\"Got '%s'\", this.el.text);",
               "\t",
               "\t//if (this.el.text.down() != _this.lastfilter) {",
               "\t//\t_this.loadIconView();",
               "\t//\t_this.loadTreeView();",
               "\t//}",
               "}",
               ""
              ]
             },
             "string name" : "popover-files-iconsearch",
             "string placeholder_text" : "type to filter results",
             "xtype" : "SearchEntry"
            }
           ],
           "xtype" : "Box"
          },
          {
           "$ xns" : "Gtk",
           "* init" : [
            "  this.el.set_policy (Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC);",
            "  "
           ],
           "bool has_frame" : true,
           "bool hexpand" : true,
           "bool vexpand" : true,
           "id" : "iconscroll",
           "int width_request" : 600,
           "items" : [
            {
             "$ xns" : "Gtk",
             "* prop" : "child",
             "items" : [
              {
               "$ xns" : "Gtk",
               "* prop" : "model",
               "items" : [
                {
                 "$ xns" : "Gtk",
                 "* prop" : "model",
                 "items" : [
                  {
                   "$ xns" : "Gtk",
                   "* prop" : "model",
                   "items" : [
                    {
                     "$ xns" : "GLib",
                     "* prop" : "model",
                     "GLib.Type item_type" : "typeof(JsRender.JsRender)",
                     "id" : "gridmodel",
                     "xtype" : "ListStore"
                    },
                    {
                     "$ xns" : "Gtk",
                     "* prop" : "sorter",
                     "items" : [
                      {
                       "$ xns" : "Gtk",
                       "* prop" : "expression",
                       "GLib.Type this_type" : "typeof(JsRender.JsRender)",
                       "string property_name" : "name",
                       "xtype" : "PropertyExpression"
                      }
                     ],
                     "xtype" : "StringSorter"
                    }
                   ],
                   "xtype" : "SortListModel"
                  },
                  {
                   "$ xns" : "Gtk",
                   "* prop" : "filter",
                   "Gtk.CustomFilterFunc match_func" : [
                    "(item) => { ",
                    "\t",
                    "\tvar j =  ((JsRender.JsRender) item);",
                    "\treturn j.xtype == \"Roo\" || j.xtype == \"Gtk\";",
                    "",
                    "}"
                   ],
                   "xtype" : "CustomFilter"
                  }
                 ],
                 "xtype" : "FilterListModel"
                }
               ],
               "xtype" : "SingleSelection"
              },
              {
               "$ xns" : "Gtk",
               "* prop" : "factory",
               "listeners" : {
                "bind" : [
                 "(listitem) => {",
                 " ",
                 "\tvar box = (Gtk.Box)  ((Gtk.ListItem)listitem).get_child();",
                 "\t   ",
                 "\tvar img = (Gtk.Image) box.get_first_child();",
                 "\tvar lbl = img.get_next_sibling();",
                 "",
                 "\tvar item = (JsRender.JsRender)  ((Gtk.ListItem)listitem).get_item();",
                 "",
                 "\titem.bind_property(\"name\",",
                 "                lbl, \"label\",",
                 "           GLib.BindingFlags.SYNC_CREATE);",
                 "",
                 "\t",
                 "    img.set_from_file(item.getIconFileName());",
                 "    ",
                 "\t  ",
                 "}",
                 ""
                ],
                "setup" : [
                 "(item) => {",
                 "\t//var j = (JsRender.JsRender) item;",
                 "\tvar gi = (Gtk.ListItem)item;",
                 "\tvar b  = new Gtk.Box(Gtk.Orientation.VERTICAL,4);",
                 "\tvar i = new Gtk.Image();",
                 "\ti.pixel_size = 96;",
                 "\tvar t = new Gtk.Label(\"\");",
                 "\tb.append(i);",
                 "\tb.append(t);",
                 "\t",
                 "\tgi.set_child(b);",
                 "\tb.has_tooltip = true;",
                 "\tb.query_tooltip.connect((x, y, keyboard_tooltip, tooltip) => {",
                 "\t\tvar j = (JsRender.JsRender) gi.get_item();",
                 "\t\t",
                 "\t\tvar ti = new Gtk.Image.from_file ( j.getIconFileName());",
                 "\t\tti.pixel_size = 368;",
                 "\t\ttooltip.set_custom( ti );",
                 "\t\treturn true;",
                 "\t});",
                 "",
                 "",
                 "}",
                 ""
                ]
               },
               "xtype" : "SignalListItemFactory"
              }
             ],
             "xtype" : "GridView"
            }
           ],
           "xtype" : "ScrolledWindow"
          }
         ],
         "xtype" : "Box"
        },
        {
         "$ xns" : "Gtk",
         "* init" : "  this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
         "bool has_frame" : true,
         "bool hexpand" : true,
         "bool vexpand" : true,
         "bool visible" : false,
         "id" : "file_container",
         "int width_request" : 200,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "child",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* prop" : "model",
             "items" : [
              {
               "$ xns" : "Gtk",
               "* prop" : "model",
               "items" : [
                {
                 "$ xns" : "Gtk",
                 "* prop" : "model",
                 "items" : [
                  {
                   "$ xns" : "Gtk",
                   "* ctor" : [
                    "new Gtk.TreeListModel( ",
                    "\tnew GLib.ListStore(",
                    "\t\ttypeof(JsRender.JsRender) ), ",
                    "\t\ttrue,",
                    "\t\ttrue, ",
                    "\t\t(item) => {",
                    "\t\t\treturn ((JsRender.JsRender)item).childfiles;",
                    "\t",
                    "\t\t} ",
                    ")",
                    "",
                    ""
                   ],
                   "* prop" : "model",
                   "id" : "treelistmodel",
                   "xtype" : "TreeListModel"
                  },
                  {
                   "$ xns" : "Gtk",
                   "* prop" : "sorter",
                   "items" : [
                    {
                     "$ xns" : "Gtk",
                     "* prop" : "expression",
                     "GLib.Type this_type" : "typeof(JsRender.JsRender)",
                     "string property_name" : "name",
                     "xtype" : "PropertyExpression"
                    }
                   ],
                   "xtype" : "StringSorter"
                  }
                 ],
                 "xtype" : "SortListModel"
                },
                {
                 "$ xns" : "Gtk",
                 "* prop" : "filter",
                 "Gtk.CustomFilterFunc match_func" : [
                  "(item) => { ",
                  "\t",
                  "\tvar j =  ((JsRender.JsRender) item);",
                  "\treturn j.xtype == \"PlainFile\" || j.xtype == \"Dir\";",
                  "",
                  "}"
                 ],
                 "xtype" : "CustomFilter"
                }
               ],
               "xtype" : "FilterListModel"
              }
             ],
             "xtype" : "SingleSelection"
            },
            {
             "$ xns" : "Gtk",
             "* init" : [
              "{",
              "\t// this.el.set_sorter(  new Gtk.StringSorter(",
              "\t// \tnew Gtk.PropertyExpression(typeof(JsRender.NodeProp), null, \"name\")",
              " //\t));",
              "\t\t",
              "}",
              ""
             ],
             "* pack" : "append_column",
             "bool expand" : true,
             "bool resizable" : true,
             "id" : "name",
             "items" : [
              {
               "$ xns" : "Gtk",
               "* prop" : "factory",
               "listeners" : {
                "bind" : [
                 "(listitem) => {",
                 "\t //GLib.debug(\"listitme is is %s\", ((Gtk.ListItem)listitem).get_type().name());",
                 "\t",
                 "\t",
                 "\t",
                 "\t//var expand = (Gtk.TreeExpander) ((Gtk.ListItem)listitem).get_child();",
                 "\tvar expand = (Gtk.TreeExpander)  ((Gtk.ListItem)listitem).get_child();",
                 "\t  ",
                 " ",
                 "\tvar lbl = (Gtk.Label) expand.child;",
                 "\t",
                 "\t if (lbl.label != \"\") { // do not update",
                 "\t \treturn;",
                 " \t}",
                 "\t",
                 "",
                 "\tvar lr = (Gtk.TreeListRow)((Gtk.ListItem)listitem).get_item();",
                 "\tvar jr = (JsRender.JsRender) lr.get_item();",
                 "\t//GLib.debug(\"change  %s to %s\", lbl.label, np.name);",
                 "\tlbl.label = jr.name; // for dir's we could hsow the sub path..",
                 "\tlbl.tooltip_markup = jr.path;",
                 "\t ",
                 "    expand.set_hide_expander(  jr.childfiles.n_items < 1);",
                 " \texpand.set_list_row(lr);",
                 " ",
                 " \t ",
                 " \t// bind image...",
                 " \t",
                 "}",
                 ""
                ],
                "setup" : [
                 "(listitem) => {",
                 "\t",
                 "\tvar expand = new Gtk.TreeExpander();",
                 "\t ",
                 "\texpand.set_indent_for_depth(true);",
                 "\texpand.set_indent_for_icon(true);",
                 "\t ",
                 "\tvar lbl = new Gtk.Label(\"\");",
                 "\tlbl.use_markup = true;",
                 "\t",
                 "\t",
                 " \tlbl.justify = Gtk.Justification.LEFT;",
                 " \tlbl.xalign = 0;",
                 "",
                 " ",
                 "\texpand.set_child(lbl);",
                 "\t((Gtk.ListItem)listitem).set_child(expand);",
                 "\t((Gtk.ListItem)listitem).activatable = false;",
                 "}",
                 ""
                ]
               },
               "xtype" : "SignalListItemFactory"
              }
             ],
             "string title" : "Other Files",
             "xtype" : "ColumnViewColumn"
            }
           ],
           "xtype" : "ColumnView"
          }
         ],
         "xtype" : "ScrolledWindow"
        }
       ],
       "xtype" : "Box"
      }
     ],
     "xtype" : "Box"
    },
    {
     "$ xns" : "Gtk",
     "* prop" : "titlebar",
     "* title" : "Select Project / File",
     "bool show_title_buttons" : false,
     "xtype" : "HeaderBar"
    }
   ],
   "name" : "DialogFiles",
   "string lastfilter" : "",
   "title" : "Select Project / File",
   "xtype" : "Window",
   "| void load" : [
    "() {",
    "     // clear list...",
    "    ",
    "     if (_this.is_loaded) {",
    "         return;",
    "     }",
    "     _this.is_loading = true;",
    "        ",
    "     _this.is_loaded = true;",
    "     ",
    "     Project.Project.loadAll();",
    "     var projects = Project.Project.allProjectsByName();",
    "     ",
    "     Gtk.TreeIter iter;",
    "     var m = this.model.el;",
    "     m.clear();",
    "          ",
    "     for (var i = 0; i < projects.size; i++) {",
    "        m.append(out iter);",
    "        m.set(iter,   0,projects.get(i).name );",
    "        ",
    "        var o =  GLib.Value(typeof(Object));",
    "        o.set_object((Object)projects.get(i));",
    "                   ",
    "        m.set_value(iter, 1, o);",
    "     ",
    "     }",
    "     m.set_sort_column_id(0, Gtk.SortType.ASCENDING);",
    "     _this.is_loading = false;      ",
    "}",
    ""
   ],
   "| void onProjectSelected" : [
    "(Project.Project project) ",
    "{",
    "\tif (this.in_onprojectselected) { ",
    "\t\treturn;",
    "\t}",
    "\tthis.in_onprojectselected = true;",
    "\t",
    "\t",
    "\tthis.selectedProject = project;",
    "\tproject.load();",
    "\t//this.clutterfiles.loadProject(proj);",
    "\t",
    "\t",
    "\t",
    "\t_this.iconsearch.el.text = \"\";",
    "\t",
    "\t ",
    "\t",
    "    ",
    "    ",
    "    //this.project_title_name.el.text = pr.name;",
    "    //this.project_title_path.el.text = pr.firstPath();",
    "    ",
    "    // file items contains a reference until we reload ...",
    "\tthis.selectedProject.loadFilesIntoStore(_this.gridmodel.el);",
    "  \t ",
    "  \t ",
    "  \t GLib.Timeout.add(500, () => {",
    "\t     _this.iconsearch.el.grab_focus();",
    "\t     return false;",
    "     });",
    "    ",
    "    ",
    "\tthis.selectedProject.loadDirsIntoStore((GLib.ListStore)_this.treelistmodel.el.model);",
    " ",
    "\tthis.in_onprojectselected = false;\t",
    "}",
    ""
   ],
   "| void selectProject" : [
    "(Project.Project project) {",
    "    ",
    "    var sel = _this.view.el.get_selection();",
    "    ",
    "    sel.unselect_all();",
    "    ",
    "    var found = false;",
    "    _this.model.el.foreach((mod, path, iter) => {",
    "        GLib.Value val;",
    "    ",
    "        mod.get_value(iter, 1, out val);",
    "        if ( ( (Project.Project)val.get_object()).fn != project.fn) {",
    "            print(\"SKIP %s != %s\\n\", ((Project.Project)val.get_object()).name , project.name);",
    "            return false;//continue",
    "        }",
    "        sel.select_iter(iter);",
    "\t\tthis.selectedProject = project;",
    "        this.onProjectSelected(project);",
    "        found = true;",
    "        return true;",
    "        ",
    "    ",
    "    });",
    "     if (!found) {",
    "\t    print(\"tried to select %s, could not find it\", project.name);",
    "    }",
    "}",
    ""
   ],
   "| void show" : [
    "(Project.Project? project, bool new_window) {",
    "      ",
    " \tthis.new_window = new_window;",
    " \tthis.load();",
    "   ",
    "    if (project != null) {",
    "\t",
    "\t\tthis.selectProject(project);",
    "\t}",
    "\t// var win = this.win.el;",
    "    // var  w = win.get_width();",
    "//     var h = win.get_height();",
    "//     GLib.debug(\"SET SIZE %d , %d\", w - 100, h - 100);",
    "\t this.el.set_size_request( 1100, 750); ",
    "\t this.el.show();",
    "}"
   ]
  }
 ],
 "modOrder" : "",
 "name" : "DialogFiles",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/DialogFiles.bjs",
 "permname" : "",
 "title" : ""
}