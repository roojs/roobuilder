{
 "build_module" : "builder",
 "items" : [
  {
   "# bool is_loaded" : false,
   "# bool is_loading" : false,
   "$ homogeneous" : false,
   "$ xns" : "Gtk",
   "* pack" : "add",
   "@ void project_selectedx" : "(Project.Project project)",
   "@ void show_new_project" : "()",
   "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
   "id" : "WindowLeftProjects",
   "items" : [
    {
     "$ shadow_type" : "Gtk.ShadowType.IN",
     "$ xns" : "Gtk",
     "* init" : [
      "  this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
      ""
     ],
     "* pack" : "pack_end,true,true,0",
     "items" : [
      {
       "$ enable_tree_lines" : true,
       "$ headers_visible" : true,
       "$ xns" : "Gtk",
       "* init" : [
        "  var description = new Pango.FontDescription();",
        "     description.set_size(8000);",
        "    this.el.override_font(description);     ",
        "                    ",
        "    var selection = this.el.get_selection();",
        "    selection.set_mode( Gtk.SelectionMode.SINGLE);",
        " ",
        "",
        "    ",
        "   ",
        " "
       ],
       "* pack" : "add",
       "id" : "view",
       "items" : [
        {
         "$ columns" : "typeof(string), typeof(Object)",
         "$ xns" : "Gtk",
         "* init" : [
          "{",
          "   this.el.set_sort_func(0, (mod,a,b) => {",
          "       GLib.Value ga, gb;",
          "       mod.get_value(a,0, out ga);",
          "       mod.get_value(b,0, out gb);",
          "        ",
          "        if ((string)ga == (string)gb) {",
          "            return 0;",
          "        }",
          "        return (string)ga > (string)gb ? 1 : -1;",
          "   }); ",
          "",
          "",
          "}",
          ""
         ],
         "* pack" : "set_model",
         "id" : "model",
         "n_columns" : 2,
         "xtype" : "ListStore"
        },
        {
         "$ xns" : "Gtk",
         "* init" : [
          "",
          "    this.el.add_attribute(_this.namecol.el , \"markup\", 0  );",
          " "
         ],
         "* pack" : "append_column",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "pack_start,true",
           "id" : "namecol",
           "xtype" : "CellRendererText"
          }
         ],
         "utf8 title" : "Projects",
         "xtype" : "TreeViewColumn"
        }
       ],
       "listeners" : {
        "cursor_changed" : [
         " () => {",
         "    if (_this.is_loading) {",
         "        return;",
         "    }",
         "    ",
         "    Gtk.TreeIter iter;",
         "    Gtk.TreeModel mod;",
         "            ",
         "    var s = this.el.get_selection();",
         "    if (!s.get_selected(out mod, out iter)) {",
         "        return;",
         "    }",
         "    ",
         "    GLib.Value gval;",
         "",
         "    mod.get_value(iter, 1 , out gval);",
         "    var project = (Project.Project)gval.get_object();",
         "    ",
         "    _this.project_selected(project);",
         "    ",
         "}  "
        ]
       },
       "xtype" : "TreeView"
      }
     ],
     "xtype" : "ScrolledWindow"
    }
   ],
   "listeners" : {
    "show" : [
     "  ( ) => {",
     "    this.load(); ",
     "}"
    ]
   },
   "xtype" : "Box",
   "|  Project.Project? getSelectedProject" : [
    "() {    ",
    "    Gtk.TreeIter iter;",
    "    Gtk.TreeModel mod;",
    "            ",
    "    var s = this.view.el.get_selection();",
    "    if (!s.get_selected(out mod, out iter)) {",
    "        return null;",
    "    }",
    "    ",
    "    GLib.Value gval;",
    "",
    "    mod.get_value(iter, 1 , out gval);",
    "    var project = (Project.Project)gval.get_object();",
    "    ",
    "    return project;",
    "}"
   ],
   "|  void load" : [
    "() {",
    "     // clear list...",
    "    ",
    "     if (_this.is_loaded) {",
    "         return;",
    "     }",
    "     _this.is_loading = true;",
    "        ",
    "     _this.is_loaded = true;",
    "     ",
    "     Project.Project.loadAll();",
    "     var projects = Project.Project.allProjectsByName();",
    "     ",
    "     Gtk.TreeIter iter;",
    "     var m = this.model.el;",
    "     m.clear();",
    "          ",
    "     for (var i = 0; i < projects.size; i++) {",
    "        m.append(out iter);",
    "        m.set(iter,   0,projects.get(i).name );",
    "        ",
    "        var o =  GLib.Value(typeof(Object));",
    "        o.set_object((Object)projects.get(i));",
    "                   ",
    "        m.set_value(iter, 1, o);",
    "     ",
    "     }",
    "     m.set_sort_column_id(0, Gtk.SortType.ASCENDING);",
    "     _this.is_loading = false;      ",
    "}",
    ""
   ],
   "|  void selectProject" : [
    "(Project.Project project) {",
    "    ",
    "    var sel = _this.view.el.get_selection();",
    "    ",
    "    sel.unselect_all();",
    "    ",
    "    var found = false;",
    "    _this.model.el.foreach((mod, path, iter) => {",
    "        GLib.Value val;",
    "    ",
    "        mod.get_value(iter, 1, out val);",
    "        if ( ( (Project.Project)val.get_object()).fn != project.fn) {",
    "            print(\"SKIP %s != %s\\n\", ((Project.Project)val.get_object()).name , project.name);",
    "            return false;//continue",
    "        }",
    "        sel.select_iter(iter);",
    "        this.project_selected(project);",
    "        found = true;",
    "        return true;",
    "        ",
    "    ",
    "    });",
    "     if (!found) {",
    "\t    print(\"tried to select %s, could not find it\", project.name);",
    "    }",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "WindowLeftProjects",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/WindowLeftProjects.bjs",
 "permname" : "",
 "title" : ""
}