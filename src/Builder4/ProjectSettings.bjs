{
 "build_module" : "builder",
 "items" : [
  {
   "# Project.Project project" : "",
   "$ homogeneous" : false,
   "$ xns" : "Gtk",
   "@ void buttonPressed" : "(string btn)",
   "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
   "border_width" : 5,
   "id" : "RooProjectSettings",
   "items" : [
    {
     "$ homogeneous" : true,
     "$ xns" : "Gtk",
     "* pack" : "pack_start,false,false,0",
     "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
     "gboolean expand" : false,
     "gboolean vexpand" : false,
     "items" : [
      {
       "$ xns" : "Gtk",
       "* pack" : "add",
       "label" : "Apply",
       "listeners" : {
        "button_press_event" : [
         "() => {",
         "    _this.save();",
         "          ",
         "    _this.buttonPressed(\"apply\");",
         "        return false;",
         "}"
        ]
       },
       "xtype" : "Button"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "add",
       "label" : "Save",
       "listeners" : {
        "button_press_event" : [
         "() => {",
         "       _this.save();",
         "          ",
         "    _this.buttonPressed(\"save\");",
         "        return false;",
         "}"
        ]
       },
       "xtype" : "Button"
      }
     ],
     "xtype" : "Box"
    },
    {
     "$ xns" : "Gtk",
     "* pack" : "pack_end,true,true,0",
     "items" : [
      {
       "$ xns" : "Gtk",
       "* pack" : false,
       "id" : "label_global",
       "utf8 label" : "Global",
       "xtype" : "Label"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : false,
       "id" : "label_database",
       "utf8 label" : "Database",
       "xtype" : "Label"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "append_page,_this.label_global.el",
       "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
       "gboolean homogeneous" : false,
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,false,false,0",
         "gint margin" : 3,
         "id" : "path",
         "label" : "filename",
         "xalign" : 0,
         "xtype" : "Label"
        },
        {
         "$ homogeneous" : false,
         "$ xns" : "Gtk",
         "* pack" : "pack_start,false,false,0",
         "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
         "gboolean expand" : false,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "pack_start,false,false,0",
           "gint margin" : 3,
           "label" : "HTML template file",
           "xtype" : "Label"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "add",
           "id" : "base_template",
           "xtype" : "Entry"
          }
         ],
         "xtype" : "Box"
        },
        {
         "$ homogeneous" : false,
         "$ xns" : "Gtk",
         "* pack" : "pack_start,false,false,0",
         "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
         "gboolean expand" : false,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "pack_start,false,false,0",
           "gint margin" : 3,
           "label" : "root URL",
           "xtype" : "Label"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "add",
           "id" : "rootURL",
           "xtype" : "Entry"
          }
         ],
         "xtype" : "Box"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,false,false,0",
         "label" : "HTML To insert at end of <HEAD>",
         "xtype" : "Label"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,true,true,0",
         "items" : [
          {
           "$ xns" : "GtkSource",
           "* init" : [
            " ",
            "    var description =   Pango.FontDescription.from_string(\"monospace\");",
            "    description.set_size(9000);",
            "    this.el.override_font(description);"
           ],
           "* pack" : "add",
           "id" : "view",
           "listeners" : {
            "key_release_event" : [
             " ( event) =>{",
             "    if (event.keyval != 115) {",
             "        return false;",
             "         ",
             "    }",
             "    if   ( (event.state & Gdk.ModifierType.CONTROL_MASK ) < 1 ) {",
             "        return false;",
             "    }",
             "     var buf =    this.el.get_buffer();",
             "    Gtk.TextIter s;",
             "    Gtk.TextIter e;",
             "    buf.get_start_iter(out s);",
             "    buf.get_end_iter(out e);",
             "    _this.project.runhtml = buf.get_text(s,e,true);",
             "    ",
             "          ",
             "    _this.buttonPressed(\"save\");",
             "     ",
             "    return false;",
             "         ",
             "}"
            ]
           },
           "xtype" : "View"
          }
         ],
         "xtype" : "ScrolledWindow"
        }
       ],
       "xtype" : "Box"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "append_page,_this.label_database.el",
       "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
       "gboolean homogeneous" : false,
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,false,false,0",
         "label" : "Type (eg. MySQL or PostgreSQL)",
         "xalign" : 0,
         "xtype" : "Label"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,false,false,0",
         "id" : "database_DBTYPE",
         "listeners" : {
          "key_press_event" : [
           "(ev) => {",
           "",
           "    if (ev.keyval == Gdk.Key.Tab) {",
           "        _this.database_DBNAME.el.grab_focus();",
           "        return true;",
           "    }",
           "",
           "",
           "    return false;",
           "}",
           ""
          ]
         },
         "xtype" : "Entry"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,false,false,0",
         "label" : "Name",
         "xalign" : 0,
         "xtype" : "Label"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,false,false,0",
         "id" : "database_DBNAME",
         "listeners" : {
          "key_press_event" : [
           "(ev) => {",
           "",
           "    if (ev.keyval == Gdk.Key.Tab) {",
           "        _this.database_DBUSERNAME.el.grab_focus();",
           "        return true;",
           "    }",
           "",
           "",
           "    return false;",
           "}",
           ""
          ]
         },
         "xtype" : "Entry"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,false,false,0",
         "label" : "Username",
         "xalign" : 0,
         "xtype" : "Label"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,false,false,0",
         "id" : "database_DBUSERNAME",
         "listeners" : {
          "key_press_event" : [
           "(ev) => {",
           "",
           "    if (ev.keyval == Gdk.Key.Tab) {",
           "        _this.database_DBPASSWORD.el.grab_focus();",
           "        return true;",
           "    }",
           "",
           "",
           "    return false;",
           "}",
           ""
          ]
         },
         "xtype" : "Entry"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,false,false,0",
         "label" : "Password",
         "xalign" : 0,
         "xtype" : "Label"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,false,false,0",
         "id" : "database_DBPASSWORD",
         "xtype" : "Entry"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,false,false,0",
         "listeners" : {
          "clicked" : [
           "() => {",
           "",
           "",
           "  _this.database_ERROR.el.label    = \"\";",
           "    Gda.Connection cnc;",
           "    try {",
           "        // assumes localhost...",
           "         cnc = Gda.Connection.open_from_string (",
           "\t\t\t_this.database_DBTYPE.el.get_text(),",
           "\t\t\t\"DB_NAME=\" + _this.database_DBNAME.el.get_text(), ",
           "\t\t\t\"USERNAME=\" + _this.database_DBUSERNAME.el.get_text() + ",
           "\t\t\t\";PASSWORD=\" + _this.database_DBPASSWORD.el.get_text(),",
           "\t\t\tGda.ConnectionOptions.NONE",
           "\t\t);",
           "   //} catch (Gda.ConnectionError ce) { ",
           "   //   _this.database_ERROR.el.label = ce.message;        ",
           "   } catch(Gda.ConnectionError ue) {",
           "      _this.database_ERROR.el.label = ue.message;",
           "        return;",
           "   }  catch(Gda.ConfigError ue) {",
           "      _this.database_ERROR.el.label = ue.message;",
           "        return;",
           "   }",
           "  _this.database_ERROR.el.label = \"Connection Succeeded\";",
           "   cnc.close();",
           "}"
          ]
         },
         "utf8 label" : "Check Connection",
         "xtype" : "Button"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,false,false,0",
         "gint margin" : 3,
         "id" : "database_ERROR",
         "label" : " ",
         "xalign" : 0,
         "xtype" : "Label"
        }
       ],
       "xtype" : "Box"
      }
     ],
     "xtype" : "Notebook"
    }
   ],
   "xtype" : "Box",
   "| void save" : [
    "()",
    "{",
    "   var buf =    _this.view.el.get_buffer();",
    "   Gtk.TextIter s;",
    "     Gtk.TextIter e;",
    "    buf.get_start_iter(out s);",
    "    buf.get_end_iter(out e);",
    "      _this.project.runhtml = buf.get_text(s,e,true);",
    "      ",
    "    _this.project.rootURL = _this.rootURL.el.get_text();",
    "    _this.project.base_template = _this.base_template.el.get_text();    ",
    "    ",
    "    var js = _this.project.json_project_data;",
    "    js.set_string_member(\"DBTYPE\", _this.database_DBTYPE.el.get_text());",
    "   js.set_string_member(\"DBNAME\", _this.database_DBNAME.el.get_text());",
    "    js.set_string_member(\"DBUSERNAME\", _this.database_DBUSERNAME.el.get_text());",
    "    js.set_string_member(\"DBPASSWORD\", _this.database_DBPASSWORD.el.get_text());",
    "//    _this.project.set_string_member(\"DBHOST\", _this.DBTYPE.el.get_text());    ",
    "    ",
    "    // need to re-init the database ",
    "    ",
    "    _this.project.initRooDatabase();",
    "      ",
    "}"
   ],
   "| void show" : [
    " (Project.Project project) {",
    "    _this.project = project;",
    "    _this.path.el.label = project.firstPath();",
    "    // get the active project.",
    "     var lm = Gtk.SourceLanguageManager.get_default();",
    "                ",
    "    ((Gtk.SourceBuffer)(_this.view.el.get_buffer())) .set_language(",
    "    ",
    "        lm.get_language(\"html\"));",
    "  ",
    "    //print (project.fn);",
    "    //project.runhtml = project.runhtml || '';",
    "    _this.view.el.get_buffer().set_text(project.runhtml);",
    "    ",
    "       ",
    "    _this.rootURL.el.set_text( _this.project.rootURL );",
    "    _this.base_template.el.set_text(_this.project.base_template);    ",
    "     var js = _this.project;",
    "    _this.database_DBTYPE.el.set_text(     js.get_string_member(\"DBTYPE\") );",
    "    _this.database_DBNAME.el.set_text(    js.get_string_member(\"DBNAME\") );",
    "    _this.database_DBUSERNAME.el.set_text(    js.get_string_member(\"DBUSERNAME\") );",
    "    _this.database_DBPASSWORD.el.set_text(    js.get_string_member(\"DBPASSWORD\") );",
    "    //this.el.show_all();",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "ProjectSettings",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/ProjectSettings.bjs",
 "permname" : "",
 "title" : ""
}