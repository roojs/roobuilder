{
 "build_module" : "builder",
 "items" : [
  {
   "# JsRender.NodeProp? prop" : "",
   "$ xns" : "Gtk",
   "@ void success" : "(Project.Project pr, JsRender.JsRender file)",
   "Gtk.PositionType position" : "Gtk.PositionType.LEFT",
   "JsRender.Node node" : "",
   "Xcls_MainWindow mainwindow" : "null",
   "bool done" : false,
   "bool is_new" : false,
   "bool modal" : true,
   "id" : "PopoverProperty",
   "items" : [
    {
     "$ pack" : "add",
     "$ xns" : "Gtk",
     "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
     "bool homogeneous" : false,
     "items" : [
      {
       "$ xns" : "Gtk",
       "* pack" : "pack_start,false,true,0",
       "id" : "header",
       "string title" : "Modify / Create Property",
       "xtype" : "HeaderBar"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "add",
       "Gtk.Align halign" : "Gtk.Align.START",
       "Gtk.Justification justify" : "Gtk.Justification.LEFT",
       "int margin_top" : 12,
       "label" : "Special Flags",
       "x_options" : 4,
       "xtype" : "Label"
      },
      {
       "$ xns" : "Gtk",
       "* init" : "this.el.add_attribute(_this.dbcellrenderer.el , \"markup\", 1 );",
       "* pack" : "add",
       "id" : "kflag",
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,true",
         "id" : "dbcellrenderer",
         "xtype" : "CellRendererText"
        },
        {
         "$ columns" : "typeof(JsRender.NodePropType),typeof(string)",
         "$ xns" : "Gtk",
         "* pack" : "set_model",
         "id" : "dbmodel",
         "n_columns" : 2,
         "xtype" : "ListStore",
         "| void loadData" : [
          "  (JsRender.NodeProp prop) {",
          "    this.el.clear();                                    ",
          "    Gtk.TreeIter iter;",
          "    var el = this.el;",
          "    ",
          "    ",
          "    // vala signal.. '@'",
          "    // raw value '$'",
          "    // user defined property '#'",
          "    // user defined method '|'",
          "    // special property '*' => prop  |args|ctor|init",
          "    ",
          "    ",
          "    ",
          "   /// el.append(out iter);",
          "    ",
          "     ",
          "   // el.set_value(iter, 0, \"\");",
          "   // el.set_value(iter, 1, \"aaa  - Just add Element - aaa\");",
          "",
          "    ",
          "\tif (prop.ptype == JsRender.NodePropType.LISTENER) { ",
          "\t\tel.append(out iter);",
          "\t\tel.set(iter, 0, JsRender.NodePropType.LISTENER, 1,   \"Event Handler / Listener\", -1);",
          "\t}\t ",
          "\telse if (_this.mainwindow.windowstate.file.xtype == \"Gtk\") {",
          "\t\t el.append(out iter);",
          "\t    el.set(iter, 0, JsRender.NodePropType.PROP, 1,   \"Normal Property\", -1);",
          "\t",
          "\t\t",
          "\t\tel.append(out iter);",
          "\t\tel.set(iter, 0, JsRender.NodePropType.RAW, 1,   \"Raw Property (not escaped)\", -1);",
          "\t\t ",
          "\t\t",
          "\t\tel.append(out iter);",
          "\t\tel.set(iter, 0, JsRender.NodePropType.USER, 1,   \"User defined property\", -1);",
          "\t\t ",
          "\t\tel.append(out iter);",
          "\t\tel.set(iter, 0, JsRender.NodePropType.METHOD, 1,   \"User defined method\", -1);",
          "\t\t ",
          "\t\tel.append(out iter);",
          "\t\tel.set(iter, 0, JsRender.NodePropType.SPECIAL, 1,   \"Special property (eg. prop | args | ctor | init )\", -1);",
          "\t\t ",
          "\t\t",
          "\t\tel.append(out iter);",
          "\t    el.set(iter, 0, JsRender.NodePropType.SIGNAL, 1,   \"Vala Signal\", -1);",
          "\t\t ",
          "\t\t",
          "\t} else { ",
          "\t\t// javascript",
          "\t    el.append(out iter);",
          "\t    el.set(iter, 0, JsRender.NodePropType.PROP, 1,   \"Normal Property\", -1);",
          "\t",
          "\t\tel.append(out iter);",
          "\t\tel.set(iter, 0, JsRender.NodePropType.RAW, 1,   \"Raw Property (not escaped)\", -1);",
          "\t\t ",
          "\t\tel.append(out iter);",
          "\t\tel.set(iter, 0, JsRender.NodePropType.METHOD, 1,   \"User defined method\", -1);",
          "\t ",
          "\t\tel.append(out iter);",
          "\t\tel.set(iter, 0,  JsRender.NodePropType.SPECIAL, 1,   \"(*) Special property (eg. prop )\", -1);",
          "\t\t ",
          "\t",
          "\t}",
          "\t// set selected, based on arg",
          "\tel.foreach((tm, tp, titer) => {",
          "\t\tGLib.Value val;",
          "\t\tel.get_value(titer, 0, out val);",
          "\t\t ",
          "\t\t//print(\"check %s against %s\\n\", (string)val, _this.prop.ptype);",
          "\t\tif (((JsRender.NodePropType)val) == prop.ptype) {",
          "\t\t\t_this.kflag.el.set_active_iter(titer);",
          "\t\t\treturn true;",
          "\t\t}",
          "\t\treturn false;",
          "\t});",
          "\t",
          "",
          "                                     ",
          "}",
          ""
         ]
        }
       ],
       "xtype" : "ComboBox"
      },
      {
       "$ visible" : true,
       "$ xns" : "Gtk",
       "* pack" : "add",
       "Gtk.Align halign" : "Gtk.Align.START",
       "Gtk.Justification justify" : "Gtk.Justification.LEFT",
       "int margin_top" : 12,
       "label" : "Type or Return Type",
       "x_options" : 4,
       "xtype" : "Label"
      },
      {
       "$ visible" : true,
       "$ xns" : "Gtk",
       "* pack" : "add",
       "id" : "ktype",
       "xtype" : "Entry"
      },
      {
       "$ visible" : true,
       "$ xns" : "Gtk",
       "* pack" : "add",
       "Gtk.Align halign" : "Gtk.Align.START",
       "Gtk.Justification justify" : "Gtk.Justification.LEFT",
       "int margin_top" : 12,
       "label" : "Name",
       "tooltip_text" : "center, north, south, east, west",
       "x_options" : 4,
       "xtype" : "Label"
      },
      {
       "$ visible" : true,
       "$ xns" : "Gtk",
       "* pack" : "add",
       "id" : "kname",
       "listeners" : {
        "focus_out_event" : [
         "()=>{",
         "\t_this.error.setError(\"\");",
         "\tvar val = this.el.get_text().strip(); ",
         "\tif (val.length < 1) {",
         "\t\t_this.error.setError(\"Name can not be empty\");",
         "\t}",
         "\treturn true;",
         "}",
         "",
         ""
        ],
        "key_release_event" : [
         "()=>{",
         "\t_this.error.setError(\"\");",
         "\tvar val = this.el.get_text().strip(); ",
         "\tif (val.length < 1) {",
         "\t\t_this.error.setError(\"Name can not be empty\");",
         "\t}",
         "\treturn true;",
         "}",
         "",
         ""
        ]
       },
       "xtype" : "Entry"
      },
      {
       "$ visible" : true,
       "$ xns" : "Gtk",
       "* pack" : "add",
       "Gtk.Align halign" : "Gtk.Align.START",
       "Gtk.Justification justify" : "Gtk.Justification.LEFT",
       "bool use_markup" : true,
       "id" : "error",
       "int margin_top" : 0,
       "label" : "<span color=\"red\">Error Message</span>",
       "tooltip_text" : "center, north, south, east, west",
       "x_options" : 4,
       "xtype" : "Label",
       "| void setError" : [
        "(string err)   {",
        "\tif (err == \"\") {",
        "\t\tthis.el.hide();",
        "\t} else {",
        "\t\tthis.el.show();",
        "\t\t",
        "\t\tthis.el.label = \"<span color=\\\"red\\\">\" + err + \"</span>\";",
        "\t}",
        "}",
        ""
       ]
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "add",
       "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
       "id" : "buttonbar",
       "int margin_top" : 20,
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : "add",
         "bool always_show_image" : true,
         "bool hexpand" : true,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "composite_name",
           "* prop" : "image",
           "string icon_name" : "window-close",
           "xtype" : "Image"
          }
         ],
         "listeners" : {
          "pressed" : [
           "() => { ",
           "",
           "\t_this.prop = null;",
           "\t_this.is_new = false;",
           "\t_this.kname.el.set_text(\"Cancel\");",
           "\t_this.el.hide();",
           "",
           "}"
          ]
         },
         "string label" : "Cancel",
         "xtype" : "Button"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "add",
         "bool always_show_image" : true,
         "bool hexpand" : true,
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "image",
           "string icon_name" : "list-add",
           "xtype" : "Image"
          }
         ],
         "listeners" : {
          "pressed" : [
           "() => {",
           "\t// check if text is not empty..",
           "\tif ( _this.kname.el.get_text().strip().length < 1) {",
           "\t\t// error should already be showing?",
           "\t\treturn;",
           "\t}",
           "\t_this.updateProp();",
           "\t",
           "\t// since we can't add listeners?!?!?",
           "\t// only check props.",
           "\t// check if property already exists in node.\t",
           "\tvar prop = _this.prop;",
           "\tif (_this.node.props.has_key(prop.to_index_key())) {",
           "\t\t_this.error.setError(\"Property already exists\");",
           "\t\treturn;\t",
           "\t}",
           "\t",
           "\t",
           "\t ",
           "\t_this.is_new = false;\t",
           "\t  ",
           "\t// hide self",
           "\t_this.prop = null; // skip checks..",
           "\t_this.el.hide();",
           "",
           "// add it, ",
           "\t// trigger editing of property.",
           "\t// allow hide to work?",
           "\twhile (Gtk.events_pending()) {",
           "\t\tGtk.main_iteration();",
           "\t}",
           "\t",
           "\t_this.mainwindow.windowstate.left_props.addProp(prop);\t\t",
           "\t",
           "",
           "}"
          ]
         },
         "string label" : "Add Property",
         "xtype" : "Button"
        }
       ],
       "xtype" : "Box"
      }
     ],
     "xtype" : "Box"
    }
   ],
   "listeners" : {
    "closed" : [
     "() => {",
     " \tGLib.debug(\"popover closed\");",
     "\tif (_this.is_new) {",
     "\t\t// dont allow hiding if we are creating a new one.",
     "\t\t// on.hide will reshow it.",
     "\t\treturn;",
     "",
     "\t}",
     "\tif (_this.prop == null) {",
     "\t\t// hide and dont update.",
     "\t\treturn;",
     "\t}",
     "\tif (this.kname.el.get_text().strip().length < 1) {",
     "\t\treturn;",
     "\t}",
     "",
     "\tthis.updateProp();",
     "",
     "\t_this.mainwindow.windowstate.left_props.reload();",
     "",
     "",
     "  ",
     "} "
    ],
    "hide" : [
     "() => {",
     "  \tGLib.debug(\"popover hidden\");",
     "\tif (_this.is_new || this.kname.el.get_text().strip().length < 1) {",
     "\t\t// dont allow hiding if we are creating a new one.",
     "\t\tGLib.debug(\"prevent hiding as its new or text is empty\"); ",
     "\t\tthis.el.show_all();",
     "\t\treturn;",
     "",
     "\t}",
     "\t",
     "}"
    ]
   },
   "string key_type" : "",
   "string old_keyname" : "",
   "uint border_width" : 0,
   "xtype" : "Popover",
   "| void show" : [
    "(",
    "\tGtk.Widget btn, ",
    "\tJsRender.Node node, ",
    "\tJsRender.NodeProp prop, ",
    "\tint y,",
    "\tbool is_new = false",
    "\t ) ",
    "{",
    "\t",
    "   ",
    "\tthis.is_new = is_new; ",
    "\tvar pref = is_new ? \"Add \" : \"Modify \";",
    "\tif (prop.ptype == JsRender.NodePropType.LISTENER) {",
    "\t\tthis.header.el.title = pref + \"Event Listener\"; // cant really happen yet?",
    "\t} else {",
    "\t\tthis.header.el.title = pref + \"Property\";",
    "\t}",
    "\tthis.prop = prop;",
    "\tthis.node = node;",
    "\t",
    "\t_this.kname.el.set_text(prop.name);",
    "\t_this.ktype.el.set_text(prop.rtype);",
    "\t",
    "\t_this.dbmodel.loadData(prop );",
    "\t// does node have this property...",
    "",
    "",
    "\t_this.node = node;",
    "\t//console.log('show all');",
    "\tthis.el.set_modal(true);",
    "\tthis.el.set_relative_to(btn);",
    "\tif (y > -1) {",
    "\t\tvar  r = Gdk.Rectangle() {",
    "\t\t\tx = 0, // align left...",
    "\t\t\ty = y,",
    "\t\t\twidth = 1,",
    "\t\t\theight = 1",
    "\t\t};",
    "\t\tthis.el.set_pointing_to( r);",
    "\t}",
    "\t",
    "\t",
    "",
    "\t//this.el.set_position(Gtk.PositionType.TOP);",
    "",
    "\t// window + header?",
    "\t print(\"SHOWALL - POPIP\\n\");",
    "\tthis.el.show_all();",
    "\tthis.kname.el.grab_focus();",
    "\tthis.buttonbar.el.hide();",
    "\tif (this.is_new) {",
    "\t\tthis.buttonbar.el.show();",
    "\t}",
    "\t this.error.setError(\"\");",
    "",
    "\t//this.success = c.success;",
    " ",
    "}"
   ],
   "| void updateProp" : [
    "() {",
    "\tvar newtext = \"\";",
    "\tGtk.TreeIter citer;",
    "\tGLib.Value gval;",
    "\tthis.kflag.el.get_active_iter(out citer);",
    "\tthis.dbmodel.el.get_value(citer, 0, out  gval);",
    "",
    "",
    "\t_this.prop.name = this.kname.el.get_text().strip(); ",
    "\t_this.prop.rtype = this.ktype.el.get_text().strip(); ",
    "\t_this.prop.ptype =  (JsRender.NodePropType) gval;",
    "",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "PopoverProperty",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/PopoverProperty.bjs",
 "permname" : "",
 "title" : ""
}