{
 "build_module" : "builder",
 "items" : [
  {
   "$ xns" : "Gtk",
   "@ void success" : "(Project.Project pr, JsRender.JsRender file)",
   "Gtk.PositionType position" : "Gtk.PositionType.RIGHT",
   "JsRender.Node node" : "",
   "Xcls_MainWindow mainwindow" : "null",
   "bool done" : false,
   "bool modal" : true,
   "id" : "PopoverProperty",
   "items" : [
    {
     "$ pack" : "add",
     "$ xns" : "Gtk",
     "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
     "bool homogeneous" : false,
     "items" : [
      {
       "$ xns" : "Gtk",
       "* pack" : "pack_start,false,true,0",
       "id" : "header",
       "string title" : "Modify / Create Property",
       "xtype" : "HeaderBar"
      },
      {
       "$ homogeneous" : true,
       "$ xns" : "Gtk",
       "* pack" : "pack_start,false,false,4",
       "int margin_left" : 4,
       "int margin_right" : 4,
       "items" : [
        {
         "$ justify" : "Gtk.Justification.RIGHT",
         "$ xns" : "Gtk",
         "* pack" : "attach_defaults,0,1,0,1",
         "label" : "Special Flags",
         "x_options" : 4,
         "xalign" : 0.90000000000000002,
         "xtype" : "Label"
        },
        {
         "$ xns" : "Gtk",
         "* init" : "this.el.add_attribute(_this.dbcellrenderer.el , \"markup\", 1 );",
         "* pack" : "attach_defaults,1,2,0,1",
         "id" : "kflag",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "pack_start,true",
           "id" : "dbcellrenderer",
           "xtype" : "CellRendererText"
          },
          {
           "$ columns" : "typeof(string),typeof(string)",
           "$ xns" : "Gtk",
           "* pack" : "set_model",
           "id" : "dbmodel",
           "n_columns" : 2,
           "xtype" : "ListStore",
           "| void loadData" : [
            "  (string kflag) {",
            "    this.el.clear();                                    ",
            "    Gtk.TreeIter iter;",
            "    var el = this.el;",
            "    ",
            "    ",
            "    // vala signal.. '@'",
            "    // raw value '$'",
            "    // user defined property '#'",
            "    // user defined method '|'",
            "    // special property '*' => prop  |args|ctor|init",
            "    ",
            "    ",
            "    ",
            "   /// el.append(out iter);",
            "    ",
            "     ",
            "   // el.set_value(iter, 0, \"\");",
            "   // el.set_value(iter, 1, \"aaa  - Just add Element - aaa\");",
            "",
            "    el.append(out iter);",
            "    el.set(iter, 0, \"\", 1,   \"Normal Property\", -1);",
            "\t ",
            "\tif (_this.mainwindow.windowstate.file.xtype == \"Gtk\") {",
            "\t\tel.append(out iter);",
            "\t\tel.set(iter, 0, \"$\", 1,   \"($) Raw Property (not escaped)\", -1);",
            "\t\t ",
            "\t\t",
            "\t\tel.append(out iter);",
            "\t\tel.set(iter, 0, \"#\", 1,   \"(#) User defined property\", -1);",
            "\t\t ",
            "\t\tel.append(out iter);",
            "\t\tel.set(iter, 0, \"|\", 1,   \"(|) User defined method\", -1);",
            "\t\t ",
            "\t\tel.append(out iter);",
            "\t\tel.set(iter, 0, \"*\", 1,   \"(*) Special property (eg. prop | args | ctor | init )\", -1);",
            "\t\t ",
            "\t\t",
            "\t\tel.append(out iter);",
            "\t    el.set(iter, 0, \"@\", 1,   \"(@) Vala Signal\", -1);",
            "\t\t ",
            "\t\t",
            "\t} else { ",
            "\t\t// javascript",
            "\t\tel.append(out iter);",
            "\t\tel.set(iter, 0, \"$\", 1,   \"($) Raw Property (not escaped)\", -1);",
            "\t\t ",
            "\t\tel.append(out iter);",
            "\t\tel.set(iter, 0, \"|\", 1,   \"(|) User defined method\", -1);",
            "\t ",
            "\t\tel.append(out iter);",
            "\t\tel.set(iter, 0, \"*\", 1,   \"(*) Special property (eg. prop )\", -1);",
            "\t\t ",
            "\t",
            "\t}",
            "\tel.foreach((tm, tp, titer) => {",
            "\t\tGLib.Value val;",
            "\t\tel.get_value(titer, 0, out val);",
            "\t\t ",
            "\t\tprint(\"check %s against %s\\n\", (string)val, kflag);",
            "\t\tif (((string)val) == kflag) {",
            "\t\t\t_this.kflag.el.set_active_iter(titer);",
            "\t\t\treturn true;",
            "\t\t}",
            "\t\treturn false;",
            "\t});",
            "\t",
            "",
            "                                     ",
            "}",
            ""
           ]
          }
         ],
         "xtype" : "ComboBox"
        },
        {
         "$ justify" : "Gtk.Justification.RIGHT",
         "$ visible" : true,
         "$ xns" : "Gtk",
         "* pack" : "attach_defaults,0,1,1,2",
         "label" : "Type or Return Type",
         "x_options" : 4,
         "xalign" : 0.90000000000000002,
         "xtype" : "Label"
        },
        {
         "$ visible" : true,
         "$ xns" : "Gtk",
         "* pack" : "attach_defaults,1,2,1,2",
         "id" : "ktype",
         "xtype" : "Entry"
        },
        {
         "$ justify" : "Gtk.Justification.RIGHT",
         "$ visible" : true,
         "$ xns" : "Gtk",
         "* pack" : "attach_defaults,0,1,2,3",
         "label" : "Name",
         "tooltip_text" : "center, north, south, east, west",
         "x_options" : 4,
         "xalign" : 0.90000000000000002,
         "xtype" : "Label"
        },
        {
         "$ visible" : true,
         "$ xns" : "Gtk",
         "* pack" : "attach_defaults,1,2,2,3",
         "id" : "kname",
         "xtype" : "Entry"
        }
       ],
       "n_columns" : 2,
       "n_rows" : 3,
       "uint row_spacing" : 2,
       "xtype" : "Table"
      }
     ],
     "xtype" : "Box"
    }
   ],
   "listeners" : {
    "closed" : [
     "() => {",
     " ",
     "  ",
     "  var newtext = \"\";",
     "  Gtk.TreeIter citer;",
     "  GLib.Value gval;",
     "  this.kflag.el.get_active_iter(out citer);",
     "  this.dbmodel.el.get_value(citer, 0, out  gval);",
     "  ",
     "  var ktype = this.ktype.el.get_text().strip(); ",
     "  var kname = this.kname.el.get_text().strip(); ",
     "  newtext += ((string)gval).strip();  ",
     "  newtext += ktype.length > 0 && newtext.length > 0 ? \" \" :\"\";",
     "  newtext += ktype;",
     "  newtext += kname.length > 0 && newtext.length > 0 ? \" \" :\"\";",
     "  newtext += kname;",
     "  ",
     "  ",
     "   var lp =  _this.mainwindow.windowstate.left_props;",
     "    ",
     "    switch(this.key_type) {",
     "        case \"listener\":",
     "            var ov = _this.node.listeners.get(this.old_keyname);",
     "            _this.node.listeners.set(newtext, ov);",
     "            if (this.old_keyname != newtext) { ",
     "\t            _this.node.listeners.unset(this.old_keyname);",
     "            }",
     "            ",
     "            ",
     "            lp.updateKey(this.old_keyname, this.key_type, newtext);",
     "            ",
     "            break;",
     "        case \"props\":",
     "            var ov = _this.node.props.get(this.old_keyname);",
     "            _this.node.props.set(newtext, ov);",
     "\t\t\tif (this.old_keyname != newtext) { ",
     "\t            _this.node.props.unset(this.old_keyname);",
     "            }",
     "            lp.updateKey(this.old_keyname, this.key_type, newtext);",
     "            break;",
     "     }",
     "   ",
     "  ",
     "  ",
     "} "
    ]
   },
   "string key_type" : "",
   "string old_keyname" : "",
   "uint border_width" : 0,
   "xtype" : "Popover",
   "|   void updateNodeFromValues" : [
    "() {",
    "",
    "     /*   _this.file.title = _this.title.el.get_text();",
    "        _this.file.region = _this.region.el.get_text();            ",
    "        _this.file.parent = _this.parent.el.get_text();                        ",
    "        _this.file.permname = _this.permname.el.get_text();                                    ",
    "        _this.file.modOrder = _this.modOrder.el.get_text();",
    "        ",
    "        if (_this.file.name.length  > 0 && _this.file.name != _this.name.el.get_text()) {",
    "            _this.file.renameTo(_this.name.el.get_text());",
    "        }",
    "        // store the module...",
    "        _this.file.build_module = \"\";        ",
    "         Gtk.TreeIter iter; ",
    "        if (_this.build_module.el.get_active_iter (out iter)) {",
    "             Value vfname;",
    "             this.dbmodel.el.get_value (iter, 0, out vfname);",
    "             if (((string)vfname).length > 0) {",
    "                 _this.file.build_module = (string)vfname;",
    "             }",
    "    ",
    "        }",
    "        */",
    "        ",
    "        ",
    "",
    "                                                    ",
    "}    "
   ],
   "| void show" : [
    "(Gtk.Widget btn, JsRender.Node node, string key_type,  string key) ",
    "\t{",
    "\t",
    "\tstring kname = \"\", kflag = \"\", ktype = \"\";",
    "\tif (key.length > 0) {",
    "\t\tnode.normalize_key( key, out  kname, out  kflag, out ktype);",
    "\t}",
    "",
    "\tif (key_type == \"listener\") {",
    "\t\tthis.header.el.title = \"Modify Event Listener\";",
    "\t} else {",
    "\t\tthis.header.el.title = \"Modify Property\";",
    "\t}",
    "\t",
    "\tthis.key_type = key_type;",
    "\tthis.old_keyname = key;",
    "\tthis.node = node;",
    "\t",
    "\t_this.kname.el.set_text(kname);",
    "\t_this.ktype.el.set_text(ktype);",
    "\t",
    "\t_this.dbmodel.loadData(kflag);",
    "\t// does node have this property...",
    "",
    "",
    "\t ",
    "",
    "\t_this.node = node;",
    "\t//console.log('show all');",
    "\tthis.el.set_modal(true);",
    "\tthis.el.set_relative_to(btn);",
    "",
    "\tthis.el.set_position(Gtk.PositionType.TOP);",
    "",
    "\t// window + header?",
    "\t print(\"SHOWALL - POPIP\\n\");",
    "\tthis.el.show_all();",
    "\tthis.kname.el.grab_focus();",
    "",
    "\t//this.success = c.success;",
    " ",
    "}"
   ]
  }
 ],
 "modOrder" : "",
 "name" : "PopoverProperty",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/PopoverProperty.bjs",
 "permname" : "",
 "title" : ""
}