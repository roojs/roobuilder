{
 "build_module" : "builder",
 "items" : [
  {
   "$ xns" : "Gtk",
   "* pack" : "add",
   "@ void after_node_change(JsRender.Node? node)" : "",
   "@ void before_node_change(JsRender.Node? node)" : "",
   "@ void drag_end()" : "",
   "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
   "id" : "RightPalete",
   "items" : [
    {
     "$ xns" : "Gtk",
     "* pack" : "pack_start,true,true,0",
     "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
     "id" : "viewbox",
     "items" : [
      {
       "$ shadow_type" : "Gtk.ShadowType.IN",
       "$ xns" : "Gtk",
       "* init" : [
        "  this.el.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
        "   this.el.set_size_request(-1,200);",
        " ",
        ""
       ],
       "* pack" : "pack_start,true,true,0",
       "items" : [
        {
         "# string dragData" : "",
         "$ enable_tree_lines" : true,
         "$ headers_visible" : true,
         "$ xns" : "Gtk",
         "* init" : [
          " {",
          "    this.el.set_size_request(150,-1);",
          "                          //  set_reorderable: [1]",
          "                                  ",
          "    var description = new Pango.FontDescription();",
          "    description.set_size(8000);",
          "    this.el.override_font(description);",
          "    ",
          "    var selection = this.el.get_selection();",
          "    selection.set_mode( Gtk.SelectionMode.SINGLE);",
          "   // this.selection.signal['changed'].connect(function() {",
          "    //    _view.listeners['cursor-changed'].apply(_view, [ _view, '']);",
          "    //});",
          "    // see: http://live.gnome.org/GnomeLove/DragNDropTutorial",
          "     ",
          "    Gtk.drag_source_set (",
          "            this.el,            /* widget will be drag-able */",
          "            Gdk.ModifierType.BUTTON1_MASK,       /* modifier that will start a drag */",
          "            BuilderApplication.targetList,            /* lists of target to support */",
          "            Gdk.DragAction.COPY         /* what to do with data after dropped */",
          "    );",
          "    //Gtk.drag_source_set_target_list(this.el, LeftTree.targetList);",
          "   ",
          "   // Gtk.drag_source_set_target_list(this.el, Application.targetList);",
          "   // Gtk.drag_source_add_text_targets(this.el); ",
          " ",
          "}",
          ""
         ],
         "* pack" : "add",
         "items" : [
          {
           "$ columns" : "typeof(string),typeof(string)",
           "$ xns" : "Gtk",
           "* pack" : "set_model",
           "id" : "model",
           "n_columns" : 2,
           "xtype" : "ListStore",
           "| string getValue" : [
            " (Gtk.TreeIter iter, int col)  {",
            "    GLib.Value gval;",
            "     this.el.get_value(iter, col , out gval);",
            "    return  (string)gval;",
            "    ",
            "    ",
            "}"
           ]
          },
          {
           "$ xns" : "Gtk",
           "* init" : [
            " this.el.add_attribute(_this.txtrender.el , \"markup\",  1 );",
            " ",
            ""
           ],
           "* pack" : "append_column",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "pack_start,true",
             "id" : "txtrender",
             "xtype" : "CellRendererText"
            }
           ],
           "utf8 title" : "Drag to add Object",
           "xtype" : "TreeViewColumn"
          }
         ],
         "listeners" : {
          "button_press_event" : [
           " ( event) => {",
           "",
           " //\tif (!this.get('/Editor').save()) {",
           " //\t    // popup!! - click handled.. ",
           "// \t    return true;",
           "//        }",
           "    return false;",
           "}"
          ],
          "drag_begin" : [
           "  ( ctx) => {",
           "    // we could fill this in now...",
           "//        Seed.print('SOURCE: drag-begin');",
           "        ",
           "        ",
           "        ",
           "        Gtk.TreeIter iter;",
           "        var s = this.el.get_selection();",
           "        ",
           "        Gtk.TreeModel mod;",
           "        s.get_selected(out mod, out iter);",
           "        var path = mod.get_path(iter);",
           "        ",
           "        /// pix is a surface..",
           "        var pix = this.el.create_row_drag_icon ( path);",
           "            ",
           "                ",
           "        Gtk.drag_set_icon_surface (ctx, pix);",
           "        GLib.Value value;",
           "        ",
           "",
           "        _this.model.el.get_value(iter, 0, out value);",
           "        ",
           "        this.dragData = (string) value;",
           "         ",
           "        ",
           "        return;",
           "}"
          ],
          "drag_data_get" : [
           "(drag_context, selection_data, info, time) => {",
           " \t//Seed.print('Palete: drag-data-get: ' + target_type);",
           "    if (this.dragData.length < 1 ) {",
           "        return; ",
           "    }",
           "    ",
           "    GLib.debug(\"setting drag data to %s\\n\", this.dragData);",
           "   // selection_data.set_text(this.dragData ,this.dragData.length);",
           "   selection_data.set (selection_data.get_target (), 8, (uchar[]) this.dragData.to_utf8 ());",
           "",
           "        //this.el.dragData = \"TEST from source widget\";",
           "        ",
           "        ",
           "}"
          ],
          "drag_end" : [
           "( drag_context)  => {",
           " \t GLib.debug(\"SOURCE: drag-end (call listener on this)\\n\");",
           "\t",
           "\tthis.dragData = \"\";",
           "\t//this.dropList = null;",
           "\t_this.drag_end(); // call signal..",
           "\t//this.get('/LeftTree.view').highlight(false);",
           "\t ",
           "}"
          ]
         },
         "xtype" : "TreeView"
        }
       ],
       "xtype" : "ScrolledWindow"
      }
     ],
     "xtype" : "Box"
    }
   ],
   "xtype" : "Box",
   "| void clear" : [
    "() {",
    "   this.model.el.clear();",
    "} "
   ],
   "| void load" : [
    " (Palete.Palete pal, string cls ) {",
    "   ",
    "   // this.get('model').expanded();",
    "    ",
    "    var tr = pal.getChildList(cls);",
    "    this.model.el.clear();",
    "",
    "",
    "    Gtk.TreeIter citer;",
    "",
    "    for(var i =0 ; i < tr.length; i++) {",
    "         this.model.el.append(out citer);   ",
    "         var dname = tr[i];",
    "         if (dname.contains(\":\")) {",
    "\t\t\tvar ar = dname.split(\":\");",
    "\t\t\tdname = \"<b>\" + ar[1] +\"</b> - <i>\"+ar[0]+\"</i>\";",
    "\t\t}",
    "         ",
    "        this.model.el.set_value(citer, 0,   tr[i] ); // used data. ",
    "        this.model.el.set_value(citer, 1,   dname ); // displayed value.",
    "        ",
    "    }",
    "    this.model.el.set_sort_column_id(1,Gtk.SortType.ASCENDING);",
    "    ",
    "} ",
    "",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "WindowRightPalete",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/WindowRightPalete.bjs",
 "permname" : "",
 "title" : ""
}