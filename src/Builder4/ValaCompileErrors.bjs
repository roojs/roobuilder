{
 "build_module" : "builder",
 "items" : [
  {
   "$ xns" : "Gtk",
   "Gtk.PositionType position" : "Gtk.PositionType.TOP",
   "JsRender.JsRender? file" : "",
   "Json.Object notices" : "",
   "Xcls_MainWindow window" : "",
   "bool active" : false,
   "bool hexpand" : false,
   "bool modal" : true,
   "id" : "ValaCompileErrors",
   "int height_request" : 800,
   "int width_request" : 900,
   "items" : [
    {
     "$ xns" : "Gtk",
     "* pack" : "add",
     "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
     "bool hexpand" : false,
     "gboolean homogeneous" : false,
     "id" : "compile_view",
     "items" : [
      {
       "$ xns" : "Gtk",
       "* pack" : "pack_start,false,false,0",
       "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : "pack_start,true,true,0",
         "utf8 label" : "Compile and Run ",
         "xtype" : "Button"
        }
       ],
       "xtype" : "Box"
      },
      {
       "$ xns" : "Gtk",
       "* init" : [
        "{",
        " this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
        " ",
        "",
        "}",
        ""
       ],
       "* pack" : "pack_end,true,true,0",
       "items" : [
        {
         "$ xns" : "Gtk",
         "* init" : [
          "{",
          " var description = new Pango.FontDescription();",
          "    description.set_size(8000);",
          "    this.el.override_font(description);",
          "",
          "}",
          ""
         ],
         "* pack" : "add",
         "id" : "compile_tree",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "set_model",
           "columns" : "  typeof(string), typeof(int), typeof(string), typeof(string) ",
           "gint n_columns" : 4,
           "id" : "compile_result_store",
           "xtype" : "TreeStore"
          },
          {
           "$ xns" : "Gtk",
           "* init" : [
            "{",
            "  this.el.add_attribute(_this.renderer.el , \"markup\", 2 );",
            " ",
            "}",
            ""
           ],
           "* pack" : "append_column",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* pack" : "pack_start,true",
             "id" : "renderer",
             "xtype" : "CellRendererText"
            }
           ],
           "string id" : "column",
           "utf8 title" : "Compile output",
           "xtype" : "TreeViewColumn"
          }
         ],
         "listeners" : {
          "button_press_event" : [
           "  ( ev)  => {",
           " ",
           "    Gtk.TreeViewColumn col;",
           "    int cell_x;",
           "    int cell_y;",
           "    Gtk.TreePath path;",
           "    if (!this.el.get_path_at_pos((int)ev.x, (int) ev.y, out path, out col, out cell_x, out cell_y )) {",
           "        print(\"nothing selected on click\");",
           "        ",
           "        return false; //not on a element.",
           "    }",
           "    ",
           "     ",
           "     // right click.",
           "     if (ev.type != Gdk.EventType.2BUTTON_PRESS  || ev.button != 1  ) {    ",
           "        // show popup!.   ",
           "            ",
           "         ",
           "        return false;",
           "    }",
           "    Gtk.TreeIter iter;",
           "     var mod = _this.compile_result_store.el;",
           "    mod.get_iter (out iter, path);",
           "    ",
           "      ",
           "    ",
           "    // var val = \"\";",
           "    GLib.Value value;",
           "    _this.compile_result_store.el.get_value(iter, 3, out value);",
           "    var fname = (string)value;",
           "    GLib.Value lvalue;",
           "    _this.compile_result_store.el.get_value(iter, 1, out lvalue);",
           "    var line = (int) lvalue;",
           "    ",
           "    print(\"open %s @ %d\\n\", fname, line);",
           "    ",
           "    ",
           "   var  bjsf = \"\";",
           "    try {             ",
           "       var  regex = new Regex(\"\\\\.vala$\");",
           "    ",
           "     ",
           "        bjsf = regex.replace(fname,fname.length , 0 , \".bjs\");",
           "     } catch (GLib.RegexError e) {",
           "        return false;",
           "    }   ",
           "    var p = _this.window.project;",
           "        ",
           "        ",
           "        ",
           "    var jsr = p.getByPath(bjsf);",
           "    if (jsr != null) {",
           "        _this.window.windowstate.fileViewOpen(jsr, line);",
           "        ",
           "        return false;",
           "    ",
           "    }",
           "    ",
           "    var pf = JsRender.JsRender.factory(\"PlainFile\", p, fname);",
           "    _this.window.windowstate.fileViewOpen(pf,line);",
           "    ",
           "    // try hiding the left nav..",
           " ",
           "    return false;",
           "    ",
           "  }",
           "    "
          ]
         },
         "xtype" : "TreeView"
        }
       ],
       "xtype" : "ScrolledWindow"
      }
     ],
     "xtype" : "Box"
    }
   ],
   "xtype" : "Popover",
   "| void show" : [
    "(Json.Object tree, Gtk.Widget onbtn) {",
    "",
    "    ",
    "    this.file = null;",
    "    this.notices = tree;",
    "   ",
    "     //print(\"looking for %s\\n\", id);",
    "    // loop through parent childnre",
    "      ",
    "    ",
    "    var store = this.compile_result_store.el;    ",
    "    ",
    "    store.clear();",
    " ",
    "    ",
    "    tree.foreach_member((obj, file, node) => {",
    "        // id line \"display text\", file",
    "        ",
    "        var title = GLib.Path.get_basename(GLib.Path.get_dirname( file)) + \"/\" +  GLib.Path.get_basename( file) ;",
    "        Gtk.TreeIter iter;",
    "        print(\"Add file %s\", title);",
    "        store.append(out iter, null);",
    "        var lines = tree.get_object_member(file);",
    "        title += \" (\" + lines.get_size().to_string() + \")\";",
    "        store.set(iter, 0, file, 1, -1, 2, title, 3, file,-1);",
    "        ",
    "        lines.foreach_member((obja, line, nodea) => {",
    "            var msg  = \"\";",
    "            var ar = lines.get_array_member(line);",
    "            for (var i = 0 ; i < ar.get_length(); i++) {",
    "\t\t    msg += (msg.length > 0) ? \"\\n\" : \"\";",
    "\t\t    msg += ar.get_string_element(i);",
    "        }",
    "            Gtk.TreeIter citer;  ",
    "            print(\"Add line %s\", line);",
    "            store.append(out citer, iter);",
    "            store.set(citer, ",
    "                0, file + \":\" + line, ",
    "                1, int.parse(line), ",
    "                2, GLib.Markup.escape_text(line + \": \" + msg), ",
    "                3, file,-1);",
    "        ",
    "        });",
    "        ",
    "        ",
    "    ",
    "    });",
    "        ",
    "    int w,h;",
    "    this.window.el.get_size(out w, out h);",
    "    ",
    "    // left tree = 250, editor area = 500?",
    "    ",
    "    // min 450?",
    "    var new_w = int.min(450, w-100);",
    "    if (new_w > (w-100)) {",
    "        new_w = w-100;",
    "    }",
    "    this.el.set_size_request( int.max(100, new_w), int.max(100, h-120));",
    "",
    "    ",
    "",
    "    if (this.el.relative_to == null) {",
    "        this.el.set_relative_to(onbtn);",
    "    }",
    "    this.el.show_all();",
    "   ",
    "    while(Gtk.events_pending()) { ",
    "            Gtk.main_iteration();",
    "    }       ",
    " //   this.hpane.el.set_position( 0);",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "ValaCompileErrors",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/ValaCompileErrors.bjs",
 "permname" : "",
 "title" : ""
}