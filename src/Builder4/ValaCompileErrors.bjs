{
 "build_module" : "builder",
 "items" : [
  {
   "# Json.Object notices" : "",
   "# Xcls_MainWindow window" : "",
   "$ xns" : "Gtk",
   "* ctor" : "new Gtk.Popover()",
   "Gtk.PositionType position" : "Gtk.PositionType.TOP",
   "bool active" : false,
   "bool autohide" : true,
   "bool hexpand" : false,
   "id" : "ValaCompileErrors",
   "int height_request" : 800,
   "int width_request" : 900,
   "items" : [
    {
     "$ xns" : "Gtk",
     "* pack" : "set_child",
     "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
     "bool hexpand" : false,
     "gboolean homogeneous" : false,
     "id" : "compile_view",
     "items" : [
      {
       "$ xns" : "Gtk",
       "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
       "items" : [
        {
         "$ xns" : "Gtk",
         "utf8 label" : "Compile and Run ",
         "xtype" : "Button"
        }
       ],
       "xtype" : "Box"
      },
      {
       "$ xns" : "Gtk",
       "* init" : [
        "{",
        " this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
        " ",
        "",
        "}",
        ""
       ],
       "items" : [
        {
         "$ xns" : "Gtk",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "model",
           "id" : "selmodel",
           "items" : [
            {
             "$ xns" : "Gtk",
             "* prop" : "model",
             "id" : "sortmodel",
             "items" : [
              {
               "$ xns" : "Gtk",
               "* ctor" : [
                "new Gtk.TreeListModel(",
                "    new GLib.ListStore(typeof(Json.Object)), //..... << that's our store..",
                "    false, // passthru",
                "    false, // autexpand",
                "    (item) => {",
                "    ",
                "    \treturn  new GLib.ListStore(typeof(Json.Object));",
                "    \t",
                "    \t//return ((Json.Object)item).childstore;",
                "    ",
                "    }",
                "    ",
                "    ",
                ")"
               ],
               "* prop" : "model",
               "id" : "model",
               "xtype" : "TreeListModel"
              }
             ],
             "xtype" : "SortListModel",
             "| Json.Object getNodeAt" : [
              "(uint row) {",
              "",
              "   var tr = (Gtk.TreeListRow)this.el.get_item(row);",
              "   ",
              "   var a = tr.get_item();;   ",
              "  // GLib.debug(\"get_item (2) = %s\", a.get_type().name());",
              "  \t",
              "   ",
              "   return (Json.Object)tr.get_item();",
              "\t ",
              "}"
             ]
            }
           ],
           "xtype" : "SingleSelection",
           "| Json.Object getNodeAt" : [
            "(uint row) {",
            "",
            "   var tr = (Gtk.TreeListRow)this.el.get_item(row);",
            "   ",
            "   var a = tr.get_item();;   ",
            "   GLib.debug(\"get_item (2) = %s\", a.get_type().name());",
            "    ",
            "   return (Json.Object)tr.get_item();",
            "\t ",
            "}"
           ]
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "append_column",
           "bool expand" : true,
           "bool resizable" : true,
           "items" : [
            {
             "$ xns" : "Gtk",
             "* prop" : "factory",
             "@ bind" : [
              "(listitem) => {",
              "\t //GLib.debug(\"listitme is is %s\", ((Gtk.ListItem)listitem).get_type().name());",
              "\t",
              "\t",
              "\t",
              "\t//var expand = (Gtk.TreeExpander) ((Gtk.ListItem)listitem).get_child();",
              "\tvar expand = (Gtk.TreeExpander)  ((Gtk.ListItem)listitem).get_child();",
              "\t  ",
              " ",
              "\tvar lbl = (Gtk.Label) expand.child;",
              "\t",
              "\t if (lbl.label != \"\") { // do not update",
              "\t \treturn;",
              " \t}",
              "\t",
              "",
              "\tvar lr = (Gtk.TreeListRow)((Gtk.ListItem)listitem).get_item();",
              "\tvar np = (Json.Object) lr.get_item();",
              "\t//GLib.debug(\"change  %s to %s\", lbl.label, np.name);",
              "//\tlbl.label = np.to_property_option_markup(np.propertyof == _this.node.fqn());",
              "\t//lbl.tooltip_markup = np.to_property_option_tooltip();",
              "\t ",
              "  //  expand.set_hide_expander(  np.childstore.n_items < 1);",
              "// \texpand.set_list_row(lr);",
              " ",
              " \t ",
              " \t// bind image...",
              " \t",
              "}",
              ""
             ],
             "@ setup" : [
              "(listitem) => {",
              "\t",
              "\tvar expand = new Gtk.TreeExpander();",
              "\t ",
              "\texpand.set_indent_for_depth(true);",
              "\texpand.set_indent_for_icon(true);",
              "\t ",
              "\tvar lbl = new Gtk.Label(\"\");",
              "\tlbl.use_markup = true;",
              "\t",
              "\t",
              " \tlbl.justify = Gtk.Justification.LEFT;",
              " \tlbl.xalign = 0;",
              "",
              " ",
              "\texpand.set_child(lbl);",
              "\t((Gtk.ListItem)listitem).set_child(expand);",
              "\t((Gtk.ListItem)listitem).activatable = false;",
              "}",
              ""
             ],
             "xtype" : "SignalListItemFactory"
            }
           ],
           "string title" : "Compile Result",
           "xtype" : "ColumnViewColumn"
          },
          {
           "$ xns" : "Gtk",
           "@ pressed" : [
            "(n_press, x, y) => {",
            "\tGtk.TreeViewColumn col;",
            "    int cell_x;",
            "    int cell_y;",
            "    Gtk.TreePath path;",
            "    if (!_this.compile_tree.el.get_path_at_pos((int)x, (int) y, out path, out col, out cell_x, out cell_y )) {",
            "        print(\"nothing selected on click\");",
            "        ",
            "        return; //not on a element.",
            "    }",
            "    var ev = this.el.get_current_event();",
            "     ",
            "     // right click.",
            "   //  if (ev.get_event_type != Gdk.EventType.2BUTTON_PRESS  || ev.button != 1  ) {    ",
            "        // show popup!.   ",
            "            ",
            "         ",
            "     //   return;",
            "   // }",
            "    Gtk.TreeIter iter;",
            "     var mod = _this.compile_result_store.el;",
            "    mod.get_iter (out iter, path);",
            "    ",
            "      ",
            "    ",
            "    // var val = \"\";",
            "    GLib.Value value;",
            "    _this.compile_result_store.el.get_value(iter, 3, out value);",
            "    var fname = (string)value;",
            "    GLib.Value lvalue;",
            "    _this.compile_result_store.el.get_value(iter, 1, out lvalue);",
            "    var line = (int) lvalue;",
            "    ",
            "    print(\"open %s @ %d\\n\", fname, line);",
            "    ",
            "    ",
            "   var  bjsf = \"\";",
            "    try {             ",
            "       var  regex = new Regex(\"\\\\.vala$\");",
            "    ",
            "     ",
            "        bjsf = regex.replace(fname,fname.length , 0 , \".bjs\");",
            "     } catch (GLib.RegexError e) {",
            "        return;",
            "    }   ",
            "    var p = _this.window.project;",
            "        ",
            "        ",
            "        ",
            "    var jsr = p.getByPath(bjsf);",
            "    if (jsr != null) {",
            "        _this.window.windowstate.fileViewOpen(jsr, true, line);",
            "        ",
            "        return;",
            "    ",
            "    }",
            "    try {",
            "\t\tvar pf = JsRender.JsRender.factory(\"PlainFile\", p, fname);",
            "\t\t_this.window.windowstate.fileViewOpen(pf, true, line);",
            "    } catch (JsRender.Error e) {}",
            "    // try hiding the left nav..",
            " ",
            "    return;",
            "",
            "}",
            ""
           ],
           "uint button" : 0,
           "xtype" : "GestureClick"
          }
         ],
         "xtype" : "ColumnView"
        }
       ],
       "xtype" : "ScrolledWindow"
      }
     ],
     "xtype" : "Box"
    }
   ],
   "xtype" : "Popover",
   "| void show" : [
    "(Json.Object tree, Gtk.Widget onbtn) {",
    "",
    "    ",
    " ",
    "    this.notices = tree;",
    "   ",
    "     //print(\"looking for %s\\n\", id);",
    "    // loop through parent childnre",
    "      ",
    "    ",
    "    var store = this.compile_result_store.el;    ",
    "    ",
    "    store.clear();",
    " \tGtk.TreeIter? expand = null;",
    "    ",
    "    tree.foreach_member((obj, file, node) => {",
    "        // id line \"display text\", file",
    "        ",
    "        var title = GLib.Path.get_basename(GLib.Path.get_dirname( file)) + \"/\" +  GLib.Path.get_basename( file) ;",
    "        Gtk.TreeIter iter;",
    "        GLib.debug(\"Add file %s\", title);",
    "        store.append(out iter, null);",
    "        var lines = tree.get_object_member(file);",
    "        title += \" (\" + lines.get_size().to_string() + \")\";",
    "        store.set(iter, ",
    "        \t0, file, ",
    "        \t1, -1, ",
    "        \t2, title, ",
    "        \t3, file,",
    "    \t-1);",
    "        ",
    "        if (this.window.windowstate.file.path == file) {",
    "            GLib.debug(\"Expanding Row: %s\", file);",
    "            expand =  iter  ;",
    "",
    "        ",
    "        }",
    "        ",
    "        ",
    "        lines.foreach_member((obja, line, nodea) => {",
    "            var msg  = \"\";",
    "            var ar = lines.get_array_member(line);",
    "            for (var i = 0 ; i < ar.get_length(); i++) {",
    "\t\t\t\tmsg += (msg.length > 0) ? \"\\n\" : \"\";",
    "\t\t\t\tmsg += ar.get_string_element(i);",
    "\t\t    }",
    "\t\t    Gtk.TreeIter citer;  ",
    "\t\t    GLib.debug(\"Add line %s\", line);",
    "\t\t    store.append(out citer, iter);",
    "\t\t    store.set(citer, ",
    "\t\t            0, file + \":\" + int.parse(line).to_string(\"%09d\"), ",
    "\t\t            1, int.parse(line), ",
    "\t\t            2, GLib.Markup.escape_text(line + \": \" + msg), ",
    "\t\t            3, file, ",
    "\t\t            -1);",
    "        ",
    "        });",
    "         ",
    "    ",
    "    });",
    "      ",
    "    store.set_sort_column_id(0,Gtk.SortType.ASCENDING);",
    "",
    "    var win = this.window.el;",
    "    var  w = win.get_width();",
    "    var h = win.get_height();",
    "",
    "  ",
    "     ",
    "    // left tree = 250, editor area = 500?",
    "    ",
    "    // min 450?",
    "    var new_w = int.min(650, w-100);",
    "    if (new_w > (w-100)) {",
    "        new_w = w-100;",
    "    }",
    "    this.el.set_size_request( int.max(100, new_w), int.max(100, h-120));",
    "\tthis.el.set_parent(onbtn);",
    "   // this.el.set_relative_to(onbtn);",
    "\tGtk.Allocation rect;",
    "\tonbtn.get_allocation(out rect);",
    "    this.el.set_pointing_to(rect);",
    "",
    "    this.el.popup();",
    "   ",
    "   \tif (expand != null) {",
    "    \t_this.compile_tree.el.expand_row(   store.get_path(expand) , true);",
    "\t}",
    "   ",
    "         ",
    " //   this.hpane.el.set_position( 0);",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "ValaCompileErrors",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/ValaCompileErrors.bjs",
 "permname" : "",
 "title" : ""
}