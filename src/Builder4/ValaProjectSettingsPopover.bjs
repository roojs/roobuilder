{
 "build_module" : "builder",
 "items" : [
  {
   "$ xns" : "Gtk",
   "Gtk.PositionType position" : "Gtk.PositionType.RIGHT",
   "Project.Gtk project" : "null",
   "Xcls_MainWindow window" : "null",
   "bool autohide" : false,
   "bool done" : false,
   "bool modal" : true,
   "items" : [
    {
     "$ xns" : "Gtk",
     "* prop" : "titlebar",
     "* title" : "Edit Project Details",
     "items" : [
      {
       "$ xns" : "Gtk",
       "* prop" : "title_widget",
       "string label" : "Change Vala  Compile settings",
       "xtype" : "Label"
      }
     ],
     "xtype" : "HeaderBar"
    },
    {
     "$ xns" : "Gtk",
     "* pack" : "set_child",
     "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
     "bool hexpand" : true,
     "bool vexpand" : true,
     "items" : [
      {
       "$ xns" : "Gtk",
       "Gtk.Align halign" : "Gtk.Align.END",
       "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
       "int spacing" : 0,
       "items" : [
        {
         "$ xns" : "Gtk",
         "string icon_name" : "",
         "string label" : "Create / Recreate Build files (configure.ac / makefile.am etc)",
         "xtype" : "Button"
        }
       ],
       "xtype" : "Box"
      },
      {
       "$ xns" : "Gtk",
       "bool vexpand" : true,
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : false,
         "id" : "label_global",
         "utf8 label" : "Global",
         "xtype" : "Label"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : false,
         "id" : "label_targets",
         "utf8 label" : "Targets",
         "xtype" : "Label"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "append_page,_this.label_global.el",
         "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
         "gboolean homogeneous" : false,
         "items" : [
          {
           "$ xns" : "Gtk",
           "Gtk.Align halign" : "Gtk.Align.START",
           "bool hexpand" : true,
           "utf8 label" : "compile flags",
           "xtype" : "Label"
          },
          {
           "$ xns" : "Gtk",
           "id" : "compile_flags",
           "listeners" : {
            "changed" : [
             "() => {",
             "    ",
             "   _this.project.compilegroups.get(\"_default_\").compile_flags = this.el.buffer.text;",
             "   _this.project.save();",
             "//    _this.project.save();",
             "",
             "}"
            ]
           },
           "utf8 placeholder_text" : "eg. -g --valasrc $BASEDIR ",
           "xtype" : "Entry"
          },
          {
           "$ xns" : "Gtk",
           "bool hexpand" : true,
           "bool vexpand" : true,
           "items" : [
            {
             "$ xns" : "Gtk",
             "* prop" : "child",
             "items" : [
              {
               "$ xns" : "Gtk",
               "* prop" : "model",
               "items" : [
                {
                 "$ xns" : "Gtk",
                 "* prop" : "model",
                 "items" : [
                  {
                   "$ xns" : "GLib",
                   "* prop" : "model",
                   "GLib.Type item_type" : "typeof(Project.VapiSelection)",
                   "id" : "vapimodel",
                   "xtype" : "ListStore"
                  }
                 ],
                 "xtype" : "SortListModel"
                }
               ],
               "xtype" : "NoSelection"
              },
              {
               "$ xns" : "Gtk",
               "* pack" : "append_column",
               "bool expand" : true,
               "items" : [
                {
                 "$ xns" : "Gtk",
                 "* prop" : "factory",
                 "listeners" : {
                  "bind" : [
                   "(object) => {",
                   "",
                   "",
                   "}",
                   ""
                  ],
                  "setup" : [
                   "(object) => {",
                   "",
                   "",
                   "}",
                   ""
                  ]
                 },
                 "xtype" : "SignalListItemFactory"
                }
               ],
               "string title" : "Vapi Package",
               "xtype" : "ColumnViewColumn"
              },
              {
               "$ xns" : "Gtk",
               "items" : [
                {
                 "$ xns" : "Gtk",
                 "* prop" : "factory",
                 "xtype" : "SignalListItemFactory"
                }
               ],
               "string title" : "use",
               "xtype" : "ColumnViewColumn"
              }
             ],
             "xtype" : "ColumnView"
            },
            {
             "$ xns" : "Gtk",
             "* prop" : "child",
             "gboolean headers_visible" : true,
             "items" : [
              {
               "$ columns" : [
                "    typeof(string),  // 0 key type",
                "      typeof(bool)"
               ],
               "$ n_columns" : 2,
               "$ xns" : "Gtk",
               "* pack" : "set_model",
               "id" : "default_packages_tree_store",
               "xtype" : "ListStore",
               "| void load" : [
                "() {",
                " ",
                "    var def = _this.project.compilegroups.get(\"_default_\");",
                "    var items  = def.packages;",
                "    ",
                "    this.el.clear();",
                "    var pal = (Palete.Gtk) _this.project.palete;",
                "    var pkgs = pal.packages(_this.project);",
                "    GLib.debug(\"ValaProjectSettings:packages load %d\\n\", pkgs.size);",
                "",
                "    Gtk.TreeIter citer;",
                "",
                "    for(var i =0 ; i < pkgs.size; i++) {",
                "         this.el.append(out citer);   ",
                "         ",
                "        this.el.set_value(citer, 0,   pkgs.get(i) ); // title ",
                "        this.el.set_value(citer, 1,   items.contains(pkgs.get(i)) );",
                "    }",
                "    this.el.set_sort_column_id(0,Gtk.SortType.ASCENDING);",
                "    ",
                "}",
                ""
               ]
              },
              {
               "$ xns" : "Gtk",
               "* init" : [
                " ",
                " this.el.add_attribute(_this.packages_render.el , \"text\", 0 );",
                "  "
               ],
               "* pack" : "append_column",
               "gboolean expand" : true,
               "gboolean resizable" : true,
               "items" : [
                {
                 "$ xns" : "Gtk",
                 "* pack" : "pack_start,false",
                 "id" : "packages_render",
                 "xtype" : "CellRendererText"
                }
               ],
               "utf8 title" : "package name",
               "xtype" : "TreeViewColumn"
              },
              {
               "$ xns" : "Gtk",
               "* init" : [
                "{",
                " this.el.add_attribute(_this.packages_render_use.el , \"active\", 1 );",
                " }"
               ],
               "* pack" : "append_column",
               "gboolean resizable" : false,
               "gint fixed_width" : 50,
               "items" : [
                {
                 "$ xns" : "Gtk",
                 "* pack" : "pack_start,false",
                 "gboolean activatable" : true,
                 "id" : "packages_render_use",
                 "listeners" : {
                  "toggled" : [
                   "(  path_string) =>  { ",
                   "    var m = _this.default_packages_tree_store.el;",
                   "   Gtk.TreeIter iter;",
                   "   Gtk.TreePath path = new Gtk.TreePath.from_string (path_string);",
                   "   m.get_iter (out iter, path);",
                   "   GLib.Value val;",
                   "   m.get_value(iter, 1, out val);",
                   "   m.set_value(iter, 1,  ((bool) val) ? false :true); ",
                   "     GLib.Value fval;  ",
                   "   m.get_value(iter, 0, out fval);",
                   "   var fn = (string)fval;",
                   "    ",
                   "    var def = _this.project.compilegroups.get(\"_default_\");",
                   "    var items  = def.packages;",
                   "    if ((bool)val) {",
                   "        // renive",
                   "        items.remove(fn);",
                   "    } else {",
                   "        items.add(fn);",
                   "    }",
                   "    ",
                   "}"
                  ]
                 },
                 "xtype" : "CellRendererToggle"
                }
               ],
               "utf8 title" : "use",
               "xtype" : "TreeViewColumn"
              }
             ],
             "string id" : "default_packages_tree",
             "xtype" : "TreeView"
            }
           ],
           "xtype" : "ScrolledWindow"
          }
         ],
         "xtype" : "Box"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : "append_page,_this.label_targets.el",
         "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
         "bool vexpand" : true,
         "gint position" : 300,
         "items" : [
          {
           "# Project.GtkValaSettings cgroup" : "null",
           "$ xns" : "Gtk",
           "* pack" : "set_end_child",
           "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
           "gboolean homogeneous" : false,
           "id" : "set_vbox",
           "items" : [
            {
             "$ xns" : "Gtk",
             "utf8 label" : "target filename",
             "xtype" : "Label"
            },
            {
             "$ xns" : "Gtk",
             "id" : "build_pack_target",
             "listeners" : {
              "changed" : [
               "()  => {",
               "        if (_this.targets_tree.cursor.length < 1) {",
               "        return;",
               "    }",
               "    _this.project.compilegroups.get(_this.targets_tree.cursor).target_bin = this.el.text;",
               "}"
              ]
             },
             "xtype" : "Entry"
            },
            {
             "$ xns" : "Gtk",
             "utf8 label" : "compile flags",
             "xtype" : "Label"
            },
            {
             "$ xns" : "Gtk",
             "id" : "build_compile_flags",
             "listeners" : {
              "changed" : [
               "() => {",
               "    if (_this.targets_tree.cursor.length < 1) {",
               "        return;",
               "    }",
               "    _this.project.compilegroups.get(_this.targets_tree.cursor).compile_flags = this.el.text;",
               "}"
              ]
             },
             "xtype" : "Entry"
            },
            {
             "$ xns" : "Gtk",
             "utf8 label" : "test argments - when run after a build",
             "xtype" : "Label"
            },
            {
             "$ xns" : "Gtk",
             "id" : "build_execute_args",
             "listeners" : {
              "changed" : [
               "() => {",
               "    if (_this.targets_tree.cursor.length < 1) {",
               "        return;",
               "    }",
               "    _this.project.compilegroups.get(_this.targets_tree.cursor).execute_args = this.el.text;",
               "}"
              ]
             },
             "string placeholder_text" : "eg.  -f somefile -g ",
             "xtype" : "Entry"
            },
            {
             "$ xns" : "Gtk",
             "utf8 label" : "Files to compile",
             "xtype" : "Label"
            },
            {
             "$ xns" : "Gtk",
             "bool vexpand" : true,
             "items" : [
              {
               "$ xns" : "Gtk",
               "* prop" : "child",
               "items" : [
                {
                 "$ xns" : "Gtk",
                 "* prop" : "model",
                 "items" : [
                  {
                   "$ xns" : "Gtk",
                   "* prop" : "model",
                   "items" : [
                    {
                     "$ xns" : "Gtk",
                     "* prop" : "model",
                     "items" : [
                      {
                       "$ xns" : "Gtk",
                       "* ctor" : [
                        "new Gtk.TreeListModel( ",
                        "\tnew GLib.ListStore(",
                        "\t\ttypeof(JsRender.JsRender) ), ",
                        "\t\ttrue,",
                        "\t\ttrue, ",
                        "\t\t(item) => {",
                        "\t\t\treturn ((JsRender.JsRender)item).childfiles;",
                        "\t",
                        "\t\t} ",
                        ")",
                        "",
                        ""
                       ],
                       "* prop" : "model",
                       "id" : "treelistmodel",
                       "xtype" : "TreeListModel"
                      },
                      {
                       "$ xns" : "Gtk",
                       "* prop" : "sorter",
                       "items" : [
                        {
                         "$ xns" : "Gtk",
                         "* prop" : "expression",
                         "GLib.Type this_type" : "typeof(JsRender.JsRender)",
                         "string property_name" : "name",
                         "xtype" : "PropertyExpression"
                        }
                       ],
                       "xtype" : "StringSorter"
                      }
                     ],
                     "xtype" : "SortListModel"
                    },
                    {
                     "$ xns" : "Gtk",
                     "* prop" : "filter",
                     "Gtk.CustomFilterFunc match_func" : [
                      "(item) => { ",
                      "\t",
                      "\t// directories / Gtk or .vala or .c files.",
                      "\tvar j =  ((JsRender.JsRender) item);",
                      "\tif (j.xtype == \"Dir\" || j.xtype == \"Gtk\") {",
                      "\t\treturn true;",
                      "\t}",
                      "\treturn j.path.has_suffix(\".vala\") ||  j.path.has_suffix(\".c\");",
                      "",
                      "}"
                     ],
                     "xtype" : "CustomFilter"
                    }
                   ],
                   "xtype" : "FilterListModel"
                  }
                 ],
                 "xtype" : "SingleSelection"
                },
                {
                 "$ xns" : "Gtk",
                 "* init" : [
                  "{",
                  "\t// this.el.set_sorter(  new Gtk.StringSorter(",
                  "\t// \tnew Gtk.PropertyExpression(typeof(JsRender.NodeProp), null, \"name\")",
                  " //\t));",
                  "\t\t",
                  "}",
                  ""
                 ],
                 "* pack" : "append_column",
                 "bool expand" : true,
                 "bool resizable" : true,
                 "id" : "name",
                 "items" : [
                  {
                   "$ xns" : "Gtk",
                   "* prop" : "factory",
                   "listeners" : {
                    "bind" : [
                     "(listitem) => {",
                     "\t //GLib.debug(\"listitme is is %s\", ((Gtk.ListItem)listitem).get_type().name());",
                     "\t",
                     "\t",
                     "\t",
                     "\t//var expand = (Gtk.TreeExpander) ((Gtk.ListItem)listitem).get_child();",
                     "\tvar expand = (Gtk.TreeExpander)  ((Gtk.ListItem)listitem).get_child();",
                     "\t  ",
                     " ",
                     "\tvar lbl = (Gtk.Label) expand.child;",
                     "\t",
                     "\t if (lbl.label != \"\") { // do not update",
                     "\t \treturn;",
                     " \t}",
                     "\t",
                     "",
                     "\tvar lr = (Gtk.TreeListRow)((Gtk.ListItem)listitem).get_item();",
                     "\tvar jr = (JsRender.JsRender) lr.get_item();",
                     "\t//GLib.debug(\"change  %s to %s\", lbl.label, np.name);",
                     "\tlbl.label = jr.name; // for dir's we could hsow the sub path..",
                     "\tlbl.tooltip_markup = jr.path;",
                     "\t ",
                     "    expand.set_hide_expander(  jr.childfiles.n_items < 1);",
                     " \texpand.set_list_row(lr);",
                     " ",
                     " \t ",
                     " \t// bind image...",
                     " \t",
                     "}",
                     ""
                    ],
                    "setup" : [
                     "(listitem) => {",
                     "\t",
                     "\tvar expand = new Gtk.TreeExpander();",
                     "\t ",
                     "\texpand.set_indent_for_depth(true);",
                     "\texpand.set_indent_for_icon(true);",
                     "\t ",
                     "\tvar lbl = new Gtk.Label(\"\");",
                     "\tlbl.use_markup = true;",
                     "\t",
                     "\t",
                     " \tlbl.justify = Gtk.Justification.LEFT;",
                     " \tlbl.xalign = 0;",
                     "",
                     " ",
                     "\texpand.set_child(lbl);",
                     "\t((Gtk.ListItem)listitem).set_child(expand);",
                     "\t((Gtk.ListItem)listitem).activatable = false;",
                     "}",
                     ""
                    ]
                   },
                   "xtype" : "SignalListItemFactory"
                  }
                 ],
                 "string title" : "Other Files",
                 "xtype" : "ColumnViewColumn"
                },
                {
                 "$ xns" : "Gtk",
                 "* pack" : "append_column",
                 "items" : [
                  {
                   "$ xns" : "Gtk",
                   "* prop" : "factory",
                   "listeners" : {
                    "bind" : [
                     "(listitem) => {",
                     "\t //GLib.debug(\"listitme is is %s\", ((Gtk.ListItem)listitem).get_type().name());",
                     "\t",
                     "\t",
                     "\t",
                     "\t//var expand = (Gtk.TreeExpander) ((Gtk.ListItem)listitem).get_child();",
                     "\tvar btn = (Gtk.CheckButton)  ((Gtk.ListItem)listitem).get_child();",
                     "\t  ",
                     " ",
                     "\tvar lr = (Gtk.TreeListRow)((Gtk.ListItem)listitem).get_item();",
                     "\tvar jr = (JsRender.JsRender) lr.get_item();",
                     "\t//GLib.debug(\"change  %s to %s\", lbl.label, np.name);",
                     "",
                     "\t",
                     "\tif (jr.xtype == \"Dir\") {",
                     "\t\tbtn.hide();",
                     "\t\treturn;",
                     "\t}",
                     " ",
                     " \tbtn.show();",
                     " \tjr.bind_property(\"compile_group_selected\",",
                     "                    btn, \"active\",",
                     "                   GLib.BindingFlags.SYNC_CREATE); ",
                     " \t// bind image...",
                     " \t",
                     "}"
                    ],
                    "setup" : [
                     "",
                     "(listitem) => {",
                     "",
                     "\tvar btn = new Gtk.CheckButton();",
                     " ",
                     "\t((Gtk.ListItem)listitem).set_child(btn);",
                     "\t",
                     "\tbtn.toggled.connect(() =>  {",
                     "\t ",
                     "\t\tvar jr = (JsRender.JsRender) ((Gtk.ListItem)listitem).get_item();",
                     "\t\tjr.compile_group_selected = btn.active;",
                     "\t});",
                     "}",
                     ""
                    ]
                   },
                   "xtype" : "SignalListItemFactory"
                  }
                 ],
                 "string title" : "use",
                 "xtype" : "ColumnViewColumn"
                }
               ],
               "xtype" : "ColumnView"
              }
             ],
             "xtype" : "ScrolledWindow"
            }
           ],
           "xtype" : "Box"
          },
          {
           "$ xns" : "Gtk",
           "* prop" : "start_child",
           "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
           "int spacing" : 0,
           "items" : [
            {
             "$ xns" : "Gtk",
             "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
             "bool hexpand" : true,
             "int spacing" : 0,
             "items" : [
              {
               "$ xns" : "Gtk",
               "bool hexpand" : true,
               "listeners" : {
                "clicked" : [
                 "()  => {",
                 "    ",
                 "       if (_this.project.compilegroups.has_key(\"NEW GROUP\")) {",
                 "        return;",
                 "    }",
                 "      ",
                 "       // add the directory..",
                 "       ",
                 "       _this.project.compilegroups.set(\"NEW GROUP\", new Project.GtkValaSettings(\"NEW GROUP\"));",
                 "       _this.targets_tree_store.load();",
                 "}"
                ]
               },
               "utf8 label" : "Add Compile Target",
               "xtype" : "Button"
              },
              {
               "$ xns" : "Gtk",
               "bool hexpand" : true,
               "listeners" : {
                "clicked" : [
                 "()  => {",
                 "    ",
                 "\t//",
                 "\tGtk.TreeModel mod;",
                 "\tGtk.TreeIter iter;",
                 "\tif (!_this.targets_tree.el.get_selection().get_selected(out mod, out iter)) {",
                 "\t\tGLib.debug(\"nothing selected\\n\");",
                 "\t\treturn;",
                 "\t}",
                 "",
                 "",
                 "\t// add the directory..",
                 "",
                 "",
                 "\tGLib.Value val;",
                 "\tmod.get_value(iter,0, out val);",
                 "\tvar fn =  (string) val;",
                 "",
                 "\tGLib.debug(\"remove: %s\\n\", fn);",
                 "\tif (!_this.project.compilegroups.unset(fn)) {",
                 "\t\tGLib.debug(\"remove failed\");",
                 "\t}",
                 "\t_this.targets_tree_store.load();",
                 "}"
                ]
               },
               "utf8 label" : "Remove Target",
               "xtype" : "Button"
              }
             ],
             "xtype" : "Box"
            },
            {
             "$ xns" : "Gtk",
             "* init" : [
              "{  ",
              "this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
              "",
              "}",
              ""
             ],
             "bool vexpand" : true,
             "items" : [
              {
               "# string cursor" : "",
               "$ xns" : "Gtk",
               "* pack" : "set_child",
               "bool vexpand" : true,
               "id" : "targets_tree",
               "items" : [
                {
                 "$ columns" : [
                  "    typeof(string),  // 0 key type",
                  "     typeof(string) // ??",
                  "     "
                 ],
                 "$ n_columns" : 2,
                 "$ xns" : "Gtk",
                 "* pack" : "set_model",
                 "id" : "targets_tree_store",
                 "xtype" : "ListStore",
                 "| void load" : [
                  "() {",
                  " ",
                  "  this.el.clear();",
                  "  ",
                  "    ",
                  "     var cg = _this.project.compilegroups;",
                  "     ",
                  "   _this.targets_tree.cursor = \"\";",
                  "    Gtk.TreeIter citer;",
                  "    var iter = cg.map_iterator();",
                  "   while(iter.next()) {",
                  "        var key = iter.get_key();",
                  "        if (key == \"_default_\") {",
                  "            continue;",
                  "        }",
                  "    ",
                  "         this.el.append(out citer);   ",
                  "         ",
                  "        this.el.set_value(citer, 0,   key ); // title ",
                  "        //this.el.set_value(citer, 1,   items.get(i) );",
                  "    };",
                  "    this.el.set_sort_column_id(0,Gtk.SortType.ASCENDING);",
                  "    _this.set_vbox.el.hide();",
                  "}",
                  ""
                 ]
                },
                {
                 "$ xns" : "Gtk",
                 "* init" : [
                  " {",
                  "     this.el.add_attribute(_this.targets_render.el , \"text\", 0 );",
                  " }"
                 ],
                 "* pack" : "append_column",
                 "gboolean resizable" : true,
                 "items" : [
                  {
                   "$ xns" : "Gtk",
                   "* pack" : "pack_start,false",
                   "gboolean editable" : true,
                   "id" : "targets_render",
                   "listeners" : {
                    "edited" : [
                     "  (path, newtext) => {",
                     "     ",
                     "     Gtk.TreeIter  iter;",
                     "        _this.targets_tree_store.el.get_iter(out iter, new Gtk.TreePath.from_string(path));",
                     "       GLib.Value gval;",
                     "        _this.targets_tree_store.el.get_value(iter,0, out gval);",
                     "        var oldval = (string)gval;",
                     "       if (oldval == newtext) {",
                     "          return;",
                     "        }",
                     "         var cg = _this.project.compilegroups.get(oldval);",
                     "        cg.name = newtext;",
                     "        _this.project.compilegroups.unset(oldval);",
                     "        _this.project.compilegroups.set(newtext, cg);",
                     "       _this.targets_tree_store.load();",
                     "  }"
                    ]
                   },
                   "xtype" : "CellRendererText"
                  }
                 ],
                 "utf8 title" : "name",
                 "xtype" : "TreeViewColumn"
                }
               ],
               "listeners" : {
                "cursor_changed" : [
                 " ( ) => {",
                 "",
                 "\tif (this.cursor != \"\") {",
                 "\t\t// save the values..",
                 "\t}",
                 "",
                 "\t// load the new values.",
                 "",
                 "",
                 "\tGtk.TreeModel mod;",
                 "\tGtk.TreeIter iter;",
                 "\tif (!this.el.get_selection().get_selected(out mod, out iter)) {",
                 "\t\tGLib.debug(\"nothing selected\\n\");",
                 "\t\t// should disable the right hand side..",
                 "\t\t_this.set_vbox.el.hide();",
                 "\t\treturn;",
                 "\t}",
                 "\t_this.set_vbox.el.show();",
                 "",
                 "\t// add the directory..",
                 "",
                 "",
                 "\tGLib.Value val;",
                 "\tmod.get_value(iter,0, out val);",
                 "\tvar fn =  (string) val;",
                 "",
                 "\tthis.cursor = fn;",
                 "\t",
                 "\t_this.project.compile_group_active = fn;",
                 "\t _this.project.loadDirsIntoStore((GLib.ListStore)_this.treelistmodel.el.model);",
                 "\t",
                 "\t",
                 "\tvar cg = _this.project.compilegroups.get(fn);",
                 "",
                 "\t_this.build_pack_target.el.set_text(cg.target_bin);",
                 "\t_this.build_compile_flags.el.set_text(cg.compile_flags);",
                 "\t_this.build_execute_args.el.set_text(cg.execute_args);",
                 "",
                 "\t_this.set_vbox.cgroup = cg;",
                 "\t",
                 "       // load the srouces",
                 "",
                 "",
                 "  }"
                ]
               },
               "xtype" : "TreeView"
              }
             ],
             "xtype" : "ScrolledWindow"
            }
           ],
           "xtype" : "Box"
          }
         ],
         "xtype" : "Paned"
        }
       ],
       "xtype" : "Notebook"
      },
      {
       "$ Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
       "$ xns" : "Gtk",
       "bool hexpand" : true,
       "int margin_bottom" : 4,
       "int margin_end" : 4,
       "int margin_start" : 4,
       "int margin_top" : 4,
       "items" : [
        {
         "$ xns" : "Gtk",
         "listeners" : {
          "clicked" : [
           "() => { ",
           "",
           "  _this.done = true;",
           "    _this.el.hide(); ",
           "}"
          ]
         },
         "string label" : "Cancel",
         "xtype" : "Button"
        },
        {
         "$ xns" : "Gtk",
         "bool hexpand" : true,
         "string label" : "",
         "xtype" : "Label"
        },
        {
         "$ xns" : "Gtk",
         "css_classes" : "{ \"suggested-action\" }",
         "id" : "save_btn",
         "listeners" : {
          "clicked" : [
           "( ) =>  { ",
           "",
           " ",
           "_this.project.save(); ",
           " ",
           "\t// what about .js ?",
           "   _this.done = true;",
           "\t_this.el.hide();",
           "",
           "// hopefull this will work with bjs files..",
           "\t",
           " ",
           "   ",
           "}"
          ]
         },
         "string label" : "Save",
         "xtype" : "Button"
        }
       ],
       "xtype" : "Box"
      }
     ],
     "xtype" : "Box"
    }
   ],
   "listeners" : {
    "close_request" : [
     "( ) => {",
     "\tif (!this.done) {",
     "\t\treturn true;",
     "\t}",
     "\treturn false;",
     "}",
     ""
    ],
    "hide" : [
     "() => {",
     "\t  if (!this.done) {",
     "    _this.el.show();",
     "  ",
     "  }",
     "}"
    ]
   },
   "uint border_width" : 0,
   "xtype" : "Window",
   "| void save" : [
    "()  {",
    "    this.project.save(); ",
    "}"
   ],
   "| void show" : [
    "(Gtk.Window pwin, Project.Gtk project) {",
    "     ",
    "    //print(\"ValaProjectSettings show\\n\");",
    "    ",
    "    this.project=  project;",
    "\t if (!project.compilegroups.has_key(\"_default_\")) {",
    "\t \tGLib.debug(\"cant get default?\");",
    " \t} else {",
    "\t    this.compile_flags.el.buffer.set_text(",
    "\t    \tproject.compilegroups.get(\"_default_\").compile_flags.data",
    "    \t);",
    "\t   }",
    "    ",
    "    this.default_packages_tree_store.load();            ",
    "    this.targets_tree_store.load();",
    " ",
    "",
    " ",
    "",
    "//\tGtk.Allocation rect;",
    "\t//btn.get_allocation(out rect);",
    " //   this.el.set_pointing_to(rect);",
    "\tthis.el.set_transient_for(pwin);",
    "\t// window + header?",
    "\t// print(\"SHOWALL - POPIP\\n\");",
    "\tthis.el.set_size_request(800,500);",
    "\tthis.el.show();",
    "\t//this.view.el.grab_focus();",
    "",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "ValaProjectSettingsPopover",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/ValaProjectSettingsPopover.bjs",
 "permname" : "",
 "title" : ""
}