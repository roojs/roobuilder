{
 "build_module" : "",
 "items" : [
  {
   "$ xns" : "Gtk",
   "@ void after_node_change" : "(JsRender.Node? node)",
   "@ void before_node_change" : "(JsRender.Node? node)",
   "Gtk.PositionType position" : "Gtk.PositionType.RIGHT",
   "Xcls_MainWindow mainwindow" : "",
   "bool active" : false,
   "bool hexpand" : false,
   "bool modal" : true,
   "id" : "PopoverAddObject",
   "int height_request" : 800,
   "int width_request" : 900,
   "items" : [
    {
     "$ shadow_type" : "Gtk.ShadowType.IN",
     "$ xns" : "Gtk",
     "* init" : [
      "  this.el.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
      "   this.el.set_size_request(-1,200);",
      " ",
      ""
     ],
     "* pack" : "set_child",
     "items" : [
      {
       "$ enable_tree_lines" : true,
       "$ headers_visible" : true,
       "$ xns" : "Gtk",
       "* init" : [
        " {",
        "    this.el.set_size_request(150,-1);",
        "                          //  set_reorderable: [1]",
        "                                  ",
        " ",
        "\tthis.css = new Gtk.CssProvider();",
        "\ttry {",
        "\t\tthis.css.load_from_data(\"#popover-add-object-view { font-szie: 12px;}\".data);",
        "\t} catch (Error e) {}",
        "\tthis.el.get_style_context().add_provider(this.css,",
        "\t\tGtk.STYLE_PROVIDER_PRIORITY_APPLICATION);",
        "\t ",
        "\t ",
        "    ",
        "    var selection = this.el.get_selection();",
        "    selection.set_mode( Gtk.SelectionMode.SINGLE);",
        "   ",
        " ",
        "}",
        ""
       ],
       "* pack" : "set_child",
       "Gtk.CssProvider css" : "",
       "id" : "treeview",
       "items" : [
        {
         "$ columns" : "typeof(string),typeof(string),typeof(Gdk.Pixbuf)",
         "$ xns" : "Gtk",
         "* pack" : "set_model",
         "id" : "model",
         "n_columns" : 3,
         "xtype" : "ListStore",
         "| string getValue" : [
          " (Gtk.TreeIter iter, int col)  {",
          "\tGLib.Value gval;",
          "\tthis.el.get_value(iter, col , out gval);",
          "\treturn  (string)gval;",
          "     ",
          "}"
         ]
        },
        {
         "$ xns" : "Gtk",
         "* init" : [
          "this.el.add_attribute(_this.txtrender.el , \"markup\",  1 );",
          "this.el.add_attribute(_this.iconrender.el , \"pixbuf\",  2 );",
          ""
         ],
         "* pack" : "append_column",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "pack_start,true",
           "id" : "iconrender",
           "xtype" : "CellRendererPixbuf"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "pack_start,true",
           "id" : "txtrender",
           "xtype" : "CellRendererText"
          }
         ],
         "utf8 title" : "Drag to add Object",
         "xtype" : "TreeViewColumn"
        },
        {
         "$ Gdk.DragAction actions" : "Gdk.DragAction.COPY",
         "$ xns" : "Gtk",
         "listeners" : {
          "drag_begin" : [
           "  ( ctx) => {",
           "    // we could fill this in now...",
           "//        Seed.print('SOURCE: drag-begin');",
           "        ",
           "        ",
           "        ",
           "        Gtk.TreeIter iter;",
           "        var s = _this.treeview.el.get_selection();",
           "        ",
           "        Gtk.TreeModel mod;",
           "        s.get_selected(out mod, out iter);",
           "        var path = mod.get_path(iter);",
           "        ",
           "        /// pix is a surface..",
           "        var paintable = _this.treeview.el.create_row_drag_icon ( path);",
           "    ",
           "        this.el.set_icon(paintable, 0,0);",
           "                ",
           "       ",
           "         ",
           "        ",
           "        return;",
           "}"
          ],
          "drag_end" : [
           "(drag, delete_data) => {",
           "",
           " ",
           " \t GLib.debug(\"SOURCE: drag-end (call listener on this)\\n\");",
           "\t",
           "\t",
           "\t//this.dropList = null;",
           "\t//_this.drag_end(); // call signal..",
           "\t//this.get('/LeftTree.view').highlight(false);",
           "\t ",
           "",
           "}",
           ""
          ],
          "prepare" : [
           "(x, y) => {",
           "",
           "\tGtk.TreeIter iter;",
           "    var s = this.el.get_selection();",
           "    ",
           "    Gtk.TreeModel mod;",
           "    s.get_selected(out mod, out iter);",
           "    var path = mod.get_path(iter);",
           "    ",
           "    ",
           "    GLib.Value value;",
           "    _this.model.el.get_value(iter, 0, out value);",
           "                     ",
           "    var str = (string) value;",
           "    return new Gdk.ContentProvider.for_bytes(\"text/plain\",",
           "    \tnew GLib.Bytes(str.data)",
           "\t); ",
           "\t",
           "\t ",
           "}",
           ""
          ]
         },
         "xtype" : "DragSource"
        }
       ],
       "string name" : "popover-add-object-view",
       "xtype" : "TreeView"
      }
     ],
     "xtype" : "ScrolledWindow"
    }
   ],
   "xtype" : "Popover",
   "| void clear" : [
    "() {",
    " this.model.el.clear();",
    "}",
    ""
   ],
   "| void hide" : [
    "() {",
    " ",
    "\tthis.el.hide();",
    "}",
    ""
   ],
   "| void show" : [
    "(Palete.Palete pal, string cls,  Gtk.Widget onbtn) {",
    "",
    "    ",
    "   ",
    "",
    "    var tr = pal.getChildList(cls);",
    "    this.model.el.clear();",
    "",
    "",
    "    Gtk.TreeIter citer;",
    "    ",
    "    ",
    "    var ic = Gtk.IconTheme.get_for_display(this.el.get_display());",
    "    Gdk.Pixbuf pixdef; ",
    "    try {",
    "\t\t var icon = ic.lookup_icon (\"my-icon-name\", null,  16,1, ",
    "\t\t\t Gtk.TextDirection.NONE, 0);",
    "\t\t pixdef = new Gdk.Pixbuf.from_file (icon.file.get_path());",
    "\t\t ",
    "\t} catch (Error e) {",
    "\t}",
    "",
    "    for(var i =0 ; i < tr.length; i++) {",
    "         this.model.el.append(out citer);   ",
    "         var dname = tr[i];",
    "         var clsname = dname;",
    "         if (dname.contains(\":\")) {",
    "\t\t\tvar ar = dname.split(\":\");",
    "\t\t\tdname = \"<b>\" + ar[1] +\"</b> - <i>\"+ar[0]+\"</i>\";",
    "\t\t\tclsname = ar[0]; /// possibly?",
    "\t\t}",
    "         ",
    "        this.model.el.set_value(citer, 0,   tr[i] ); // used data. ",
    "        this.model.el.set_value(citer, 1,   dname ); // displayed value.",
    "        ",
    "        var clsb = clsname.split(\".\");",
    "        var sub = clsb.length > 1 ? clsb[1].down()  : \"\";",
    "        ",
    "        var pix = pixdef;",
    "        var fn = \"/usr/share/glade/pixmaps/hicolor/16x16/actions/widget-gtk-\" + sub + \".png\";",
    "        if (FileUtils.test (fn, FileTest.IS_REGULAR)) {",
    "        \ttry {",
    "\t        \tpix = new Gdk.Pixbuf.from_file (fn);",
    "        \t} catch (Error e) {}",
    "        \t",
    "        }",
    "        ",
    "        ",
    "        this.model.el.set_value(citer, 2,   pix );",
    "        ",
    "        ",
    "    }",
    "    this.model.el.set_sort_column_id(1,Gtk.SortType.ASCENDING);",
    "    ",
    "    ",
    "    ",
    "    // set size up...",
    "    ",
    "    this.model.el.set_sort_column_id(0,Gtk.SortType.ASCENDING);",
    "    ",
    "    var win = this.mainwindow.el;",
    "    var  w = win.get_width();",
    "    var h = win.get_height();",
    "",
    "    ",
    "    // left tree = 250, editor area = 500?",
    "    ",
    "    // min 450?",
    "\t// max hieght ...",
    "    this.el.set_size_request( 350, h); // full height?",
    "",
    "    ",
    "",
    "    //if (this.el.relative_to == null) {",
    "    \tGtk.Allocation rect;",
    "    \tonbtn.get_allocation(out rect);",
    "        this.el.set_pointing_to(rect);",
    "    //}",
    "    this.el.show();",
    "   ",
    "    //while(Gtk.events_pending()) { ",
    "      //      Gtk.main_iteration();",
    "    //}       ",
    " //   this.hpane.el.set_position( 0);",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "PopoverAddObject",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/PopoverAddObject.bjs",
 "permname" : "",
 "title" : ""
}