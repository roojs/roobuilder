{
 "build_module" : "builder",
 "items" : [
  {
   "# JsRender.JsRender file" : "",
   "# JsRender.Node node" : "",
   "# Xcls_MainWindow main_window" : "null",
   "# bool allow_edit" : false,
   "$ homogeneous" : "false   ",
   "$ xns" : "Gtk",
   "@ bool stop_editor" : "()",
   "@ void changed" : "()",
   "@ void show_add_props" : "(string type)",
   "@ void show_editor" : "(JsRender.JsRender file, JsRender.Node node, JsRender.NodeProp prop)",
   "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
   "id" : "LeftProps",
   "items" : [
    {
     "$ xns" : "Gtk",
     "* pack" : "pack_start,false,true,0",
     "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
     "items" : [
      {
       "$ xns" : "Gtk",
       "* pack" : "add",
       "int margin_end" : 5,
       "int margin_start" : 5,
       "string label" : "Add:",
       "xtype" : "Label"
      },
      {
       "$ tooltip_text" : "\"Add Property\"",
       "$ xns" : "Gtk",
       "* pack" : "add",
       "bool always_show_image" : true,
       "bool hexpand" : true,
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : "set_image",
         "utf8 icon_name" : "format-justify-left",
         "xtype" : "Image"
        }
       ],
       "listeners" : {
        "clicked" : [
         "  ( ) => {",
         "    ",
         "     _this.main_window.windowstate.showProps(",
         "     \t_this.view.el, ",
         " \t\tJsRender.NodePropType.PROP",
         "\t);",
         "  ",
         "}"
        ]
       },
       "string label" : "Property",
       "xtype" : "Button"
      },
      {
       "$ tooltip_text" : "\"Add Event Code\"",
       "$ xns" : "Gtk",
       "* pack" : "add",
       "bool always_show_image" : true,
       "bool hexpand" : true,
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : "set_image",
         "utf8 icon_name" : "appointment-new",
         "xtype" : "Image"
        }
       ],
       "listeners" : {
        "clicked" : [
         "  ( ) => {",
         "    ",
         " ",
         "   _this.main_window.windowstate.showProps(",
         "   \t\t_this.view.el, ",
         "   \t\tJsRender.NodePropType.LISTENER",
         "\t);",
         "",
         " ",
         "}"
        ]
       },
       "string label" : "Event",
       "xtype" : "Button"
      },
      {
       "$ xns" : "Gtk",
       "* pack" : "add",
       "bool always_show_image" : true,
       "bool hexpand" : true,
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : false,
         "id" : "AddPropertyPopup",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "id: _this.{ID} (Vala)",
           "listeners" : {
            "activate" : [
             " ()  => {",
             " \t// is this userdef or special??",
             "    _this.addProp( new JsRender.NodeProp.prop(\"id\") );",
             "}"
            ]
           },
           "tooltip_markup" : "Using _this.{ID} will map to this element",
           "xtype" : "MenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "pack: Pack method (Vala)",
           "listeners" : {
            "activate" : [
             "  ( ) => {",
             "// is this userdef?",
             "    _this.addProp( new JsRender.NodeProp.special(\"pack\", \"add\") );",
             "}"
            ]
           },
           "tooltip_markup" : "how to pack this element onto parent, (method, 2nd arg, 3rd arg) .. the 1st argument is filled by the element",
           "xtype" : "MenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "ctor: Alterative to default contructor (Vala)",
           "listeners" : {
            "activate" : [
             "  ( ) => {",
             "",
             "      _this.addProp( new JsRender.NodeProp.special(\"ctor\") );",
             "}"
            ]
           },
           "tooltip_markup" : [
            "eg. ",
            "",
            "new Clutter.Image.from_file(.....)"
           ],
           "xtype" : "MenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "init: initialziation code (vala)",
           "listeners" : {
            "activate" : [
             "  ( ) => {",
             "      _this.addProp( new JsRender.NodeProp.special(\"init\",\"{\\n\\n}\\n\" ) );",
             "",
             "}"
            ]
           },
           "tooltip_markup" : "This code is called after the ctor",
           "xtype" : "MenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "cms-id: (Roo JS/Pman library)",
           "listeners" : {
            "activate" : [
             " ()  => {",
             " ",
             "    _this.addProp( new JsRender.NodeProp.prop(\"cms-id\",\"string\", \"\" ) );",
             "",
             " ",
             "    ",
             "}"
            ]
           },
           "tooltip_markup" : [
            "set the cms-id for this element, when converted to javascript, the html value will be wrapped with Pman.Cms.content({cms-id},{original-html})",
            ""
           ],
           "xtype" : "MenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "add",
           "xtype" : "SeparatorMenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "String",
           "listeners" : {
            "activate" : [
             "(self) => {",
             "",
             "\t_this.view.popover.show(",
             "\t\t_this.view.el, ",
             "\t\t_this.node, ",
             "\t\t new JsRender.NodeProp.prop(\"\", \"string\", \"\") ,",
             "\t\t-1,  ",
             "\t\ttrue",
             "\t);",
             "",
             "}"
            ]
           },
           "tooltip_markup" : "Add a user defined string property",
           "xtype" : "MenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "Number",
           "listeners" : {
            "activate" : [
             "  ( ) =>{",
             "  _this.view.popover.show(",
             "\t\t_this.view.el, ",
             "\t\t_this.node, ",
             "\t\t new JsRender.NodeProp.prop(\"\", \"int\", \"0\") ,",
             "\t\t-1,  ",
             "\t\ttrue",
             "\t);",
             " ",
             "}"
            ]
           },
           "tooltip_markup" : "Add a user defined number property",
           "xtype" : "MenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "Boolean",
           "listeners" : {
            "activate" : [
             "  ( ) =>{",
             "  ",
             "  \t",
             "   _this.view.popover.show(",
             "\t\t_this.view.el, ",
             "\t\t_this.node, ",
             "\t\t new JsRender.NodeProp.prop(\"\", \"bool\", \"true\") ,",
             "\t\t-1,  ",
             "\t\ttrue",
             "\t); ",
             " ",
             "}"
            ]
           },
           "tooltip_markup" : "Add a user defined boolean property",
           "xtype" : "MenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "add",
           "xtype" : "SeparatorMenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "Javascript Function",
           "listeners" : {
            "activate" : [
             "  ( ) =>{",
             "   ",
             "   _this.view.popover.show(",
             "\t\t_this.view.el, ",
             "\t\t_this.node, ",
             "\t\t new JsRender.NodeProp.jsmethod(\"\") ,",
             "\t\t-1,  ",
             "\t\ttrue",
             "\t);",
             "   ",
             " ",
             "}"
            ]
           },
           "tooltip_markup" : "Add a user function boolean property",
           "xtype" : "MenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "Vala Method",
           "listeners" : {
            "activate" : [
             "  ( ) =>{",
             "",
             "    _this.view.popover.show(",
             "\t\t_this.view.el, ",
             "\t\t_this.node, ",
             "\t\t new JsRender.NodeProp.valamethod(\"\") ,",
             "\t\t-1,  ",
             "\t\ttrue",
             "\t); ",
             "}"
            ]
           },
           "tooltip_markup" : "Add a user function boolean property",
           "xtype" : "MenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "Vala Signal",
           "listeners" : {
            "activate" : [
             "  ( ) =>{",
             "  _this.view.popover.show(",
             "\t\t_this.view.el, ",
             "\t\t_this.node, ",
             "\t\t new JsRender.NodeProp.sig(\"\" ) ,",
             "\t\t-1,  ",
             "\t\ttrue",
             "\t);    ",
             "}"
            ]
           },
           "tooltip_markup" : "Add a vala signal",
           "xtype" : "MenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "add",
           "xtype" : "SeparatorMenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "Flexy - If",
           "listeners" : {
            "activate" : [
             "  ( ) =>{",
             " \t_this.view.popover.show(",
             "\t\t_this.view.el, ",
             "\t\t_this.node, ",
             "\t\t new JsRender.NodeProp.prop(\"flexy:if\", \"string\", \"value_or_condition\") ,",
             "\t\t-1,  ",
             "\t\ttrue",
             "\t);",
             "",
             "",
             "}"
            ]
           },
           "tooltip_markup" : "Add a flexy if (for HTML templates)",
           "xtype" : "MenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "Flexy - Include",
           "listeners" : {
            "activate" : [
             "  ( ) =>{",
             " \t_this.view.popover.show(",
             "\t\t_this.view.el, ",
             "\t\t_this.node, ",
             "\t\t new JsRender.NodeProp.prop(\"flexy:include\", \"string\", \"name_of_file.html\") ,",
             "\t\t-1,  ",
             "\t\ttrue",
             "\t);",
             "",
             "  ",
             "}"
            ]
           },
           "tooltip_markup" : "Add a flexy include (for HTML templates)",
           "xtype" : "MenuItem"
          },
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "Flexy - Foreach",
           "listeners" : {
            "activate" : [
             "  ( ) =>{",
             "  ",
             "   \t_this.view.popover.show(",
             "\t\t_this.view.el, ",
             "\t\t_this.node, ",
             "\t\t new JsRender.NodeProp.prop(\"flexy:foreach\", \"string\", \"array,key,value\") ,",
             "\t\t-1,  ",
             "\t\ttrue",
             "\t);",
             "",
             "    ",
             "}"
            ]
           },
           "tooltip_markup" : "Add a flexy foreach (for HTML templates)",
           "xtype" : "MenuItem"
          }
         ],
         "xtype" : "Menu"
        },
        {
         "$ Gtk.Stock stock" : "Gtk.Stock.ADD",
         "$ icon_size" : "Gtk.IconSize.MENU",
         "$ xns" : "Gtk",
         "* pack" : "set_image",
         "xtype" : "Image"
        }
       ],
       "listeners" : {
        "button_press_event" : [
         "  (self, ev) => {",
         "    _this.before_edit();",
         "    ",
         "        ",
         "    var p = _this.AddPropertyPopup;",
         "    p.el.set_screen(Gdk.Screen.get_default());",
         "    p.el.show_all();",
         "     p.el.popup(null, null, null, ev.button, ev.time);",
         "     return true;",
         "}"
        ]
       },
       "string label" : "Other",
       "xtype" : "Button"
      }
     ],
     "xtype" : "Box"
    },
    {
     "# bool editing" : false,
     "$ shadow_type" : "Gtk.ShadowType.IN",
     "$ xns" : "Gtk",
     "* init" : [
      "  {",
      "  ",
      "   this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
      "}",
      ""
     ],
     "* pack" : "pack_end,true,true,0",
     "id" : "EditProps",
     "items" : [
      {
       "$ enable_tree_lines" : true,
       "$ headers_visible" : true,
       "$ xns" : "Gtk",
       "* init" : [
        "{",
        "    var selection = this.el.get_selection();",
        "    selection.set_mode( Gtk.SelectionMode.SINGLE);",
        "",
        "",
        "    var description = new Pango.FontDescription();",
        "    description.set_size(10000);",
        "    this.el.override_font(description);",
        "    ",
        "}",
        ""
       ],
       "* pack" : "add",
       "Xcls_PopoverProperty popover" : "null",
       "id" : "view",
       "items" : [
        {
         "$ changed" : [
          "function(str, doRefresh) {",
          "    if (!this.activePath) {",
          "        return;",
          "    }",
          "    var iter = new Gtk.TreeIter();",
          "    ",
          "    _this.setTreeIter(prop);",
          "    this.el.get_iter(iter, new Gtk.TreePath.from_string(this.activePath));",
          "    ",
          "    this.el.set_value(iter, 1, '' +str);",
          "    this.el.set_value(iter, 3, '' + this.toShort(str));",
          "    var type = this.getIterValue(iter, 4);",
          "",
          "    this.el.set_value(iter, 5, type + ' : ' + str);",
          "    // update the tree...  ",
          "",
          "    this.get('/LeftTree.model').changed(this.toJS(), doRefresh); ",
          "}",
          ""
         ],
         "$ columns" : [
          "     typeof(JsRender.NodeProp),  // 0 key type",
          "     typeof(string),  // 1 display_key",
          "     typeof(string),  // 2 display_value",
          "     typeof(string),  // 3 display_tooltip",
          " \t\ttypeof(string)  // 4 sortable value",
          "/*",
          "   \t0, prop,",
          "        \t1, prop.to_display_name(),",
          "        \t2, dis_val.",
          "            3,  \"<tt>\" +  GLib.Markup.escape_text(key + \" \" +kvalue) + \"</tt>\",",
          "            4, \"0 \" + prop.name",
          "            ",
          "        ); ",
          "        */"
         ],
         "$ xns" : "Gtk",
         "* pack" : "set_model",
         "id" : "model",
         "n_columns" : 5,
         "xtype" : "TreeStore"
        },
        {
         "$ resizable" : true,
         "$ xns" : "Gtk",
         "* init" : [
          " this.el.add_attribute(_this.keyrender.el , \"markup\", 1 ); // 1 is the key.",
          " //this.el.add_attribute(_this.keyrender.el , \"text\", 1 );",
          "  "
         ],
         "* pack" : "append_column",
         "id" : "keycol",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "pack_start,false",
           "id" : "keyrender",
           "xtype" : "CellRendererText"
          }
         ],
         "title" : "Property",
         "xtype" : "TreeViewColumn"
        },
        {
         "$ resizable" : true,
         "$ xns" : "Gtk",
         "* init" : [
          "{",
          "\t",
          " ",
          "",
          "\t",
          "\tthis.el.add_attribute(_this.valrender.el , \"text\", 2 );",
          " ",
          "}",
          ""
         ],
         "* pack" : "append_column",
         "id" : "valcol",
         "items" : [
          {
           "$ editable" : false,
           "$ has_entry" : true,
           "$ xns" : "Gtk",
           "* pack" : "pack_start,true",
           "id" : "valrender",
           "items" : [
            {
             "$ columns" : "typeof(string)",
             "$ xns" : "Gtk",
             "* pack" : false,
             "* prop" : "model",
             "id" : "valrendermodel",
             "n_columns" : 1,
             "xtype" : "ListStore"
            }
           ],
           "listeners" : {
            "edited" : [
             "  (path, newtext) => {",
             "    GLib.debug(\"Valrender  - signal:edited\\n\");",
             "  ",
             "        this.el.editable = false;",
             "    ",
             "",
             "        Gtk.TreeIter  iter;",
             "        _this.model.el.get_iter(out iter, new Gtk.TreePath.from_string(path));",
             "        GLib.Value gval;",
             "        ",
             "         _this.model.el.get_value(iter,0, out gval);",
             "        var prop = (JsRender.NodeProp)gval;",
             "        prop.val = newtext;",
             "        _this.updateIter(iter,prop);",
             "        _this.changed();",
             "          ",
             "}"
            ],
            "editing_started" : [
             "( editable, path) => {",
             "    //_this.editing = true;",
             "    GLib.debug(\"editing started called\\n\");",
             "    if (!_this.allow_edit) {",
             "       ",
             "         GLib.debug(\"val - editing_Started\\n\");",
             "        this.el.editable = false; // make sure it's not editor...",
             "   ",
             "         ",
             "        return;",
             "    }",
             "     _this.allow_edit =false;",
             "    ",
             "   ",
             "     if (  this.el.has_entry ) {",
             "   ",
             "         Gtk.TreeIter  iter;",
             "        _this.model.el.get_iter(out iter, new Gtk.TreePath.from_string(path));",
             "        GLib.Value gval;",
             "                      ",
             "",
             "      ",
             "         //   this.get('/LeftPanel.model').activePath  = path;",
             "       _this.model.el.get_value(iter,0, out gval);",
             "    ",
             "",
             "        var prop = (JsRender.NodeProp)gval;",
             "        var combo =        (Gtk.ComboBox)editable;",
             "",
             "        var entry =  (Gtk.Entry) combo.get_child();        ",
             "        entry.set_text(prop.val);",
             "    }",
             "   ",
             "}"
            ]
           },
           "text_column" : 0,
           "xtype" : "CellRendererCombo",
           "|              void setOptions" : [
            "(string[] ar) {",
            "\tvar m = _this.valrendermodel.el;",
            "\tm.clear();",
            "\tGtk.TreeIter iret;",
            "    for (var i =0; i < ar.length; i++) {",
            "        m.append(out iret);",
            "        m.set_value(iret, 0, ar[i]);",
            "    }",
            "",
            "}"
           ]
          }
         ],
         "title" : "Value",
         "xtype" : "TreeViewColumn"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : false,
         "id" : "ContextMenu",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* pack" : "append",
           "label" : "Delete",
           "listeners" : {
            "activate" : [
             "  ( )  =>{",
             "\t_this.deleteSelected();",
             "}"
            ]
           },
           "xtype" : "MenuItem"
          }
         ],
         "xtype" : "Menu"
        }
       ],
       "listeners" : {
        "button_press_event" : [
         "  ( ev)  => {",
         " ",
         "    Gtk.TreeViewColumn col;",
         "    int cell_x;",
         "    int cell_y;",
         "    Gtk.TreePath path;",
         "    ",
         "    // event x /y are relative to the widget..",
         "    if (!this.el.get_path_at_pos((int)ev.x, (int) ev.y, out path, out col, out cell_x, out cell_y )) {",
         "        GLib.debug(\"nothing selected on click\");",
         "        GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {",
         "            this.el.get_selection().unselect_all();",
         "",
         "            return false;",
         "        });",
         "         _this.before_edit();",
         "        return false; //not on a element.",
         "    }",
         "    ",
         "     ",
         "     // single click on name..",
         "     //if (ev.type == Gdk.EventType.2BUTTON_PRESS  && ev.button == 1 && col.title == \"Name\") {    ",
         "     if (ev.button == 1 && col.title == \"Property\") {    ",
         "     \t// need to shift down, as ev.y does not inclucde header apparently..",
         "     \t// or popover might be trying to do a central?",
         "        this.editPropertyDetails(path, (int) ev.y + 12); ",
         "         ",
         "        return false;",
         "    }",
         "    ",
         "    ",
         "    ",
         "    ",
         "     // right click.",
         "     if (ev.type == Gdk.EventType.BUTTON_PRESS  && ev.button == 3) {    ",
         "        // show popup!.   ",
         "        //if (col.title == \"Value\") {",
         "         //     _this.before_edit();",
         "         //    return false;",
         "         //}",
         "",
         "        var p = _this.ContextMenu;",
         "",
         "        p.el.set_screen(Gdk.Screen.get_default());",
         "        p.el.show_all();",
         "        p.el.popup(null, null, null,  ev.button, ev.time);",
         "        //Seed.print(\"click:\" + res.column.title);",
         "        // select the ",
         "        GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {",
         "  ",
         "            this.el.get_selection().select_path(path);",
         "            return false;",
         "        });",
         "         _this.before_edit();",
         "        return false;",
         "    }",
         "    ",
         "     ",
         "    if (col.title != \"Value\") {",
         "        GLib.debug(\"col title != Value\");",
         "        ",
         "        GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {",
         "            this.el.get_selection().select_path(path);",
         "            return false;",
         "        });",
         "        ",
         "        _this.before_edit();",
         "          //  XObject.error(\"column is not value?\");",
         "        return false; // ignore.. - key click.. ??? should we do this??",
         "    }",
         "    ",
         "    ",
         "    // if the cell can be edited with a pulldown",
         "    // then we should return true... - and let the start_editing handle it?",
         "    ",
         "    ",
         "    ",
         "    ",
         "    ",
         "      ",
         "   //             _this.before_edit(); <<< we really need to stop the other editor..",
         "     _this.keyrender.el.stop_editing(false);",
         "    _this.keyrender.el.editable  =false;",
         "    ",
         "           ",
         "    return _this.startEditingValue(path); // assumes selected row..",
         "        ",
         "   ",
         "",
         "              ",
         "   ",
         "}"
        ]
       },
       "tooltip_column" : 3,
       "xtype" : "TreeView",
       "| void editPropertyDetails" : [
        "(Gtk.TreePath path, int y) {",
        "",
        "    ",
        "\t",
        "",
        "     _this.before_edit();",
        "      _this.stop_editor();",
        "\t  ",
        "     _this.keyrender.el.stop_editing(false);",
        "     _this.keyrender.el.editable  =false;",
        "",
        "     _this.valrender.el.stop_editing(false);",
        "     _this.valrender.el.editable  =false;",
        "     Gtk.TreeIter iter;",
        "      var mod = this.el.get_model();",
        "\t  mod.get_iter (out iter, path);",
        "\t  ",
        "   ",
        "\tGLib.Value gval;",
        "",
        "     mod.get_value(iter,0, out gval);",
        "",
        "    this.popover.show(_this.view.el, _this.node, (JsRender.NodeProp)gval,   y);",
        "       ",
        "    ",
        "}",
        ""
       ]
      }
     ],
     "xtype" : "ScrolledWindow"
    }
   ],
   "xtype" : "Box",
   "|              string keyFormat" : [
    "(string val, string type) {",
    "    ",
    "    // Glib.markup_escape_text(val);",
    "",
    "    if (type == \"listener\") {",
    "        return \"<span font_weight=\\\"bold\\\" color=\\\"#660000\\\">\" + ",
    "            GLib.Markup.escape_text(val) +",
    "             \"</span>\";",
    "    }",
    "    // property..",
    "    if (val.length < 1) {",
    "        return \"<span  color=\\\"#FF0000\\\">--empty--</span>\";",
    "    }",
    "    ",
    "    //@ = signal",
    "    //$ = property with ",
    "    //# - object properties",
    "    //* = special",
    "    // all of these... - display value is last element..",
    "    var ar = val.strip().split(\" \");",
    "    ",
    "    ",
    "    var dval = GLib.Markup.escape_text(ar[ar.length-1]);",
    "    ",
    "    ",
    "    ",
    "    ",
    "    switch(val[0]) {",
    "        case '@': // signal // just bold balck?",
    "            if (dval[0] == '@') {",
    "                dval = dval.substring(1);",
    "            }",
    "        ",
    "            return @\"<span  font_weight=\\\"bold\\\">@ $dval</span>\";        ",
    "        case '#': // object properties?",
    "            if (dval[0] == '#') {",
    "                dval = dval.substring(1);",
    "            }",
    "            return @\"<span  font_weight=\\\"bold\\\">$dval</span>\";",
    "        case '*': // special",
    "            if (dval[0] == '*') {",
    "                dval = dval.substring(1);",
    "            }",
    "            return @\"<span   color=\\\"#0000CC\\\" font_weight=\\\"bold\\\">$dval</span>\";            ",
    "        case '$':",
    "            if (dval[0] == '$') {",
    "                dval = dval.substring(1);",
    "            }",
    "            return @\"<span   style=\\\"italic\\\">$dval</span>\";",
    "       case '|': // user defined methods",
    "            if (dval[0] == '|') {",
    "                dval = dval.substring(1);",
    "            }",
    "            return @\"<span color=\\\"#008000\\\" font_weight=\\\"bold\\\">$dval</span>\";",
    "            ",
    "              ",
    "            ",
    "        default:",
    "            return dval;",
    "    }",
    "      ",
    "    ",
    "",
    "}"
   ],
   "|              string keySortFormat" : [
    "(string key) {",
    "    // listeners first - with 0",
    "    // specials",
    "    if (key[0] == '*') {",
    "        return \"1 \" + key;",
    "    }",
    "    // functions",
    "    ",
    "    var bits = key.split(\" \");",
    "    ",
    "    if (key[0] == '|') {",
    "        return \"2 \" + bits[bits.length -1];",
    "    }",
    "    // signals",
    "    if (key[0] == '@') {",
    "        return \"3 \" + bits[bits.length -1];",
    "    }",
    "        ",
    "    // props",
    "    if (key[0] == '#') {",
    "        return \"4 \" + bits[bits.length -1];",
    "    }",
    "    // the rest..",
    "    return \"5 \" + bits[bits.length -1];    ",
    "",
    "",
    "",
    "}"
   ],
   "|              void addProp" : [
    " (JsRender.NodeProp prop) {",
    "      // info includes key, val, skel, etype..",
    "      //console.dump(info);",
    "        //type = info.type.toLowerCase();",
    "        //var data = this.toJS();",
    "          ",
    "              ",
    "    if (prop.ptype == JsRender.NodePropType.LISTENER) {",
    "        if (this.node.listeners.has_key(prop.name)) {",
    "            return;",
    "        }",
    "        this.node.listeners.set(prop.name,prop);",
    "    } else  {",
    "         assert(this.node != null);",
    "         assert(this.node.props != null);",
    "        if (this.node.props.has_key(prop.to_index_key())) {",
    "            return;",
    "        }",
    "        this.node.props.set(prop.to_index_key(),prop);",
    "    }",
    "            ",
    "      ",
    "    // add a row???",
    "    this.load(this.file, this.node);",
    "    ",
    "    ",
    "    ",
    "    /// need to find the row which I've just added..",
    "    ",
    "    ",
    "    var s = this.view.el.get_selection();",
    "    s.unselect_all();",
    "    ",
    "    GLib.debug(\"trying to find new iter\");",
    "  ",
    "    this.model.el.foreach((model, path, iter) => {",
    "        GLib.Value gval;",
    "        this.model.el.get_value(iter, 0 , out gval);",
    "        ",
    "        var iprop = (JsRender.NodeProp)gval;",
    "        if (iprop.to_index_key() != prop.to_index_key()) {",
    "        \treturn false; // continue?",
    "        }",
    "        ",
    "        // delay this?",
    "        GLib.Timeout.add_full(GLib.Priority.DEFAULT,40 , () => {",
    "        \t/*",
    "    \t\tif (prop.name == \"\") { // empty string for key name.",
    "        \t\t_this.view.editPropertyDetails(this.model.el.get_path(iter));",
    "        \t\treturn false;",
    "        \t}",
    "        \t*/",
    "        \t",
    "            this.startEditingValue(this.model.el.get_path(iter));",
    "            return false;",
    "        });",
    "        //s.select_iter(iter);",
    "        return true; ",
    "    });",
    "    ",
    "    ",
    "    ",
    "              ",
    "}",
    ""
   ],
   "|              void deleteSelected" : [
    " () {",
    "    ",
    "        this.stop_editor();",
    "        ",
    "        Gtk.TreeIter iter;",
    "        Gtk.TreeModel mod;",
    "        ",
    "        var s = this.view.el.get_selection();",
    "        s.get_selected(out mod, out iter);",
    "             ",
    "              ",
    "        GLib.Value gval;",
    "        mod.get_value(iter, 0 , out gval);",
    "        var prop = (JsRender.NodeProp)gval;",
    "        if (prop == null) {",
    "        \treturn;",
    "    \t}",
    "        switch(prop.ptype) {",
    "            case JsRender.NodePropType.LISTENER:",
    "                this.node.listeners.unset(prop.to_index_key());",
    "                break;",
    "                ",
    "            default:",
    "                this.node.props.unset(prop.to_index_key());",
    "                break;",
    "        }",
    "        this.load(this.file, this.node);",
    "        ",
    "        _this.changed();",
    "}"
   ],
   "|              void finish_editing" : [
    "() {",
    "     // ",
    "    this.before_edit();",
    "}"
   ],
   "|              void load" : [
    "(JsRender.JsRender file, JsRender.Node? node) ",
    "{",
    "\t// not sure when to initialize this - we should do it on setting main window really.    ",
    "    if (this.view.popover == null) {",
    " \t\t   this.view.popover = new Xcls_PopoverProperty();",
    " \t\t   this.view.popover.mainwindow = _this.main_window;",
    "\t}",
    "    ",
    "    ",
    "    ",
    "    ",
    "    GLib.debug(\"load leftprops\\n\");",
    "    this.before_edit();",
    "    this.node = node;",
    "    this.file = file;",
    "    ",
    " ",
    "    this.model.el.clear();",
    "              ",
    "    //this.get('/RightEditor').el.hide();",
    "    if (node ==null) {",
    "        return ;",
    "    }",
    "     ",
    "    ",
    "",
    "    //var provider = this.get('/LeftTree').getPaleteProvider();",
    "    Gtk.TreeIter iter;",
    "    ",
    "   ",
    "    ",
    "     ",
    "    ",
    "    // really need a way to sort the hashmap...",
    "    var m = this.model.el;",
    "    ",
    "    var miter = node.listeners.map_iterator();",
    "    var i = 0;",
    "    ",
    "    while(miter.next()) {",
    "        i++;",
    "        m.append(out iter,null);",
    "        ",
    "        this.updateIter(iter,  miter.get_value());",
    "        ",
    "         ",
    "     }",
    "     ",
    "      ",
    "    miter = node.props.map_iterator();",
    "    ",
    "    ",
    "   while(miter.next()) {",
    "           i++;",
    "        m.append(out iter,null);",
    "         this.updateIter(iter, miter.get_value());",
    "         ",
    "   }",
    "   GLib.debug(\"clear selection\\n\");",
    "   // clear selection?",
    "   this.model.el.set_sort_column_id(4,Gtk.SortType.ASCENDING); // sort by real key..",
    "   ",
    "   this.view.el.get_selection().unselect_all();",
    "   ",
    "   ",
    "   ",
    "   ",
    "}",
    ""
   ],
   "|              void startEditingKey" : [
    "( Gtk.TreePath path) {",
    "    ",
    "     if (!this.stop_editor()) {",
    "        return;",
    "     }",
    "  ",
    "    // others... - fill in options for true/false?",
    "    ",
    "       ",
    "    GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {",
    "        this.allow_edit  = true;",
    "        this.keyrender.el.editable = true;",
    "     ",
    "        this.view.el.set_cursor_on_cell(",
    "            path,",
    "            this.keycol.el,",
    "            this.keyrender.el,",
    "            true",
    "        );",
    "               ",
    "        return false;",
    "    });",
    "      ",
    "    ",
    "}",
    ""
   ],
   "|              void updateIter" : [
    "(Gtk.TreeIter iter, JsRender.NodeProp prop) {",
    "",
    "    //print(\"update Iter %s, %s\\n\", key,kvalue);",
    "    ",
    "    var dl = prop.val.strip().split(\"\\n\");",
    "",
    "    var dis_val = dl.length > 1 ? (dl[0].strip()+ \"...\") : dl[0];",
    "    ",
    "    if (prop.ptype == JsRender.NodePropType.LISTENER) {",
    "     ",
    "       ",
    "        ",
    "        this.model.el.set(iter, ",
    "        \t0, prop,",
    "        \t1, prop.to_display_name(),",
    "        \t2, dis_val,",
    "            3,  \"<tt>\" +  GLib.Markup.escape_text(prop.to_tooltip()) + \"</tt>\",",
    "            4,  prop.to_sort_key(),",
    "            -1",
    "        ); ",
    "        return;",
    "    }",
    "    ",
    "",
    "",
    "    this.model.el.set(iter, ",
    "            0, prop,",
    "        \t1, prop.to_display_name(),",
    "        \t2, dis_val,",
    "            3,  \"<tt>\" +  GLib.Markup.escape_text(prop.to_tooltip()) + \"</tt>\",",
    "            4, prop.to_sort_key(),",
    "            -1",
    "            ",
    "        ); ",
    "}"
   ],
   "| bool startEditingValue" : [
    "( Gtk.TreePath path) {",
    "",
    "     // ONLY return true if editing is allowed - eg. combo..",
    "",
    "    GLib.debug(\"start editing?\\n\");",
    "    if (!this.stop_editor()) {",
    "        GLib.debug(\"stop editor failed\\n\");",
    "        return false;",
    "    }",
    "    ",
    "    Gtk.TreeIter iter;",
    "",
    "    var mod = this.model.el;",
    "    mod.get_iter (out iter, path);",
    "    ",
    "    GLib.Value gval;",
    "    mod.get_value(iter, 0 , out gval);",
    "    var prop  = (JsRender.NodeProp)gval;",
    "",
    "",
    "    ",
    "    var use_textarea = false;",
    "",
    "    //------------ things that require the text editor...",
    "    ",
    "    if (prop.ptype == JsRender.NodePropType.LISTENER) {",
    "        use_textarea = true;",
    "    }",
    "    if (prop.ptype == JsRender.NodePropType.METHOD) { ",
    "        use_textarea = true;",
    "    }",
    "    if (prop.ptype == JsRender.NodePropType.RAW) { // raw string",
    "        use_textarea = true;",
    "    }",
    "    if ( prop.name == \"init\" && prop.ptype == JsRender.NodePropType.SPECIAL) {",
    "        use_textarea = true;",
    "    }",
    "    if (prop.val.length > 40) { // long value...",
    "        use_textarea = true;",
    "    }",
    "    ",
    "    ",
    "    ",
    "    if (use_textarea) {",
    "        GLib.debug(\"Call show editor\\n\");",
    "        GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {",
    "            this.view.el.get_selection().select_path(path);",
    "            ",
    "            this.show_editor(file, node, prop);",
    "            ",
    "            return false;",
    "        });",
    "       ",
    "        ",
    "        return false;",
    "    }",
    "    ",
    "     var pal = this.file.project.palete;",
    "    ",
    "    string[] opts;",
    "    var has_opts = pal.typeOptions(this.node.fqn(), prop.name, prop.rtype, out opts);",
    "    ",
    "    ",
    "    ",
    "    // others... - fill in options for true/false?",
    "    GLib.debug(\"turn on editing %s \\n\" , mod.get_path(iter).to_string());",
    "   ",
    "      // GLib.debug (ktype.up());",
    "    if (has_opts) {",
    "            GLib.debug(\"start editing try/false)???\");",
    "            this.valrender.el.has_entry = false;",
    "          ",
    "            this.valrender.setOptions(opts);",
    "            ",
    "            this.valrender.el.has_entry = false;",
    "            this.valrender.el.editable = true;",
    "             this.allow_edit  = true;",
    "             GLib.Timeout.add_full(GLib.Priority.DEFAULT,100 , () => {",
    "                 this.view.el.set_cursor_on_cell(",
    "\t                path,",
    "\t                this.valcol.el,",
    "\t                this.valrender.el,",
    "\t                true",
    "                );",
    "                return false;",
    "            });",
    "            return true;",
    "    }",
    "                              ",
    "       // see if type is a Enum.",
    "       ",
    "       ",
    "   ",
    "        ",
    "   ",
    "     opts =  {  };",
    "    this.valrender.setOptions(opts);",
    "   ",
    "   GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {",
    "        ",
    "        // at this point - work out the type...",
    "        // if its' a combo... then show the options..",
    "        this.valrender.el.has_entry = true;",
    "        ",
    "        this.valrender.el.editable = true;            ",
    "    ",
    "        ",
    "        this.allow_edit  = true;",
    "        ",
    "        ",
    "        ",
    "        ",
    "",
    "        this.view.el.set_cursor_on_cell(",
    "            path,",
    "            this.valcol.el,",
    "            this.valrender.el,",
    "            true",
    "        );",
    "        return false;",
    "    });",
    "    return false;",
    "}",
    ""
   ],
   "| void before_edit" : [
    "()",
    "{",
    "",
    "    GLib.debug(\"before edit - stop editing\\n\");",
    "    ",
    "  // these do not appear to trigger save...",
    "    _this.keyrender.el.stop_editing(false);",
    "    _this.keyrender.el.editable  =false;",
    "",
    "    _this.valrender.el.stop_editing(false);",
    "    _this.valrender.el.editable  =false;    ",
    "    ",
    "    ",
    "// technicall stop the popup editor..",
    "",
    "}",
    ""
   ],
   "| void reload" : [
    "() {",
    "\tthis.load(this.file, this.node);",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "WindowLeftProps",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/WindowLeftProps.bjs",
 "permname" : "",
 "title" : ""
}