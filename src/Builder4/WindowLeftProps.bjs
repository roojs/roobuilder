{
 "build_module" : "builder",
 "items" : [
  {
   "# JsRender.JsRender file" : "",
   "# JsRender.Node node" : "",
   "# Xcls_MainWindow main_window" : "null",
   "# bool allow_edit" : false,
   "$ homogeneous" : "false   ",
   "$ xns" : "Gtk",
   "@ bool stop_editor" : "()",
   "@ void changed" : "()",
   "@ void show_add_props" : "(string type)",
   "@ void show_editor" : "(JsRender.JsRender file, JsRender.Node node, JsRender.NodeProp prop)",
   "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
   "bool hexpand" : true,
   "bool vexpand" : true,
   "id" : "LeftProps",
   "items" : [
    {
     "$ xns" : "Gtk",
     "Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
     "bool hexpand" : true,
     "items" : [
      {
       "$ xns" : "Gtk",
       "int margin_end" : 5,
       "int margin_start" : 5,
       "string label" : "Add:",
       "xtype" : "Label"
      },
      {
       "$ tooltip_text" : "\"Add Property\"",
       "$ xns" : "Gtk",
       "bool always_show_image" : true,
       "bool hexpand" : true,
       "listeners" : {
        "clicked" : [
         "  ( ) => {",
         "    ",
         "     _this.main_window.windowstate.showProps(",
         "     \t_this.view.el, ",
         " \t\tJsRender.NodePropType.PROP",
         "\t);",
         "  ",
         "}"
        ]
       },
       "string icon_name" : "format-justify-left",
       "string label" : "Property",
       "xtype" : "Button"
      },
      {
       "$ tooltip_text" : "\"Add Event Code\"",
       "$ xns" : "Gtk",
       "bool always_show_image" : true,
       "bool hexpand" : true,
       "listeners" : {
        "clicked" : [
         "  ( ) => {",
         "    ",
         " ",
         "   _this.main_window.windowstate.showProps(",
         "   \t\t_this.view.el, ",
         "   \t\tJsRender.NodePropType.LISTENER",
         "\t);",
         "",
         " ",
         "}"
        ]
       },
       "string icon_name" : "appointment-new",
       "string label" : "Event",
       "xtype" : "Button"
      },
      {
       "$ xns" : "Gtk",
       "bool always_show_image" : true,
       "bool hexpand" : true,
       "items" : [
        {
         "$ xns" : "Gtk",
         "* pack" : false,
         "bool autohide" : true,
         "id" : "AddPropertyPopup",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "child",
           "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
           "int spacing" : 0,
           "items" : [
            {
             "$ xns" : "Gtk",
             "label" : "id: _this.{ID} (Vala)",
             "listeners" : {
              "activate" : [
               " ()  => {",
               " \t// is this userdef or special??",
               "    _this.addProp( new JsRender.NodeProp.prop(\"id\") );",
               "}"
              ]
             },
             "tooltip_markup" : "Using _this.{ID} will map to this element",
             "xtype" : "Button"
            },
            {
             "$ xns" : "Gtk",
             "label" : "pack: Pack method (Vala)",
             "listeners" : {
              "activate" : [
               "  ( ) => {",
               "// is this userdef?",
               "    _this.addProp( new JsRender.NodeProp.special(\"pack\", \"add\") );",
               "}"
              ]
             },
             "tooltip_markup" : "how to pack this element onto parent, (method, 2nd arg, 3rd arg) .. the 1st argument is filled by the element",
             "xtype" : "Button"
            },
            {
             "$ xns" : "Gtk",
             "label" : "ctor: Alterative to default contructor (Vala)",
             "listeners" : {
              "activate" : [
               "  ( ) => {",
               "",
               "      _this.addProp( new JsRender.NodeProp.special(\"ctor\") );",
               "}"
              ]
             },
             "tooltip_markup" : [
              "eg. ",
              "",
              "new Clutter.Image.from_file(.....)"
             ],
             "xtype" : "Button"
            },
            {
             "$ xns" : "Gtk",
             "label" : "init: initialziation code (vala)",
             "listeners" : {
              "activate" : [
               "  ( ) => {",
               "      _this.addProp( new JsRender.NodeProp.special(\"init\",\"{\\n\\n}\\n\" ) );",
               "",
               "}"
              ]
             },
             "tooltip_markup" : "This code is called after the ctor",
             "xtype" : "Button"
            },
            {
             "$ xns" : "Gtk",
             "label" : "cms-id: (Roo JS/Pman library)",
             "listeners" : {
              "activate" : [
               " ()  => {",
               " ",
               "    _this.addProp( new JsRender.NodeProp.prop(\"cms-id\",\"string\", \"\" ) );",
               "",
               " ",
               "    ",
               "}"
              ]
             },
             "tooltip_markup" : [
              "set the cms-id for this element, when converted to javascript, the html value will be wrapped with Pman.Cms.content({cms-id},{original-html})",
              ""
             ],
             "xtype" : "Button"
            },
            {
             "$ Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
             "$ xns" : "Gtk",
             "xtype" : "Separator"
            },
            {
             "$ xns" : "Gtk",
             "label" : "String",
             "listeners" : {
              "activate" : [
               "(self) => {",
               "",
               "\t_this.view.popover.show(",
               "\t\t_this.view.el, ",
               "\t\t_this.node, ",
               "\t\t new JsRender.NodeProp.prop(\"\", \"string\", \"\") ,",
               "\t\t-1,  ",
               "\t\ttrue",
               "\t);",
               "",
               "}"
              ]
             },
             "tooltip_markup" : "Add a user defined string property",
             "xtype" : "Button"
            },
            {
             "$ xns" : "Gtk",
             "label" : "Number",
             "listeners" : {
              "activate" : [
               "  ( ) =>{",
               "  _this.view.popover.show(",
               "\t\t_this.view.el, ",
               "\t\t_this.node, ",
               "\t\t new JsRender.NodeProp.prop(\"\", \"int\", \"0\") ,",
               "\t\t-1,  ",
               "\t\ttrue",
               "\t);",
               " ",
               "}"
              ]
             },
             "tooltip_markup" : "Add a user defined number property",
             "xtype" : "Button"
            },
            {
             "$ xns" : "Gtk",
             "label" : "Boolean",
             "listeners" : {
              "activate" : [
               "  ( ) =>{",
               "  ",
               "  \t",
               "   _this.view.popover.show(",
               "\t\t_this.view.el, ",
               "\t\t_this.node, ",
               "\t\t new JsRender.NodeProp.prop(\"\", \"bool\", \"true\") ,",
               "\t\t-1,  ",
               "\t\ttrue",
               "\t); ",
               " ",
               "}"
              ]
             },
             "tooltip_markup" : "Add a user defined boolean property",
             "xtype" : "Button"
            },
            {
             "$ Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
             "$ xns" : "Gtk",
             "xtype" : "Separator"
            },
            {
             "$ xns" : "Gtk",
             "label" : "Javascript Function",
             "listeners" : {
              "activate" : [
               "  ( ) =>{",
               "   ",
               "   _this.view.popover.show(",
               "\t\t_this.view.el, ",
               "\t\t_this.node, ",
               "\t\t new JsRender.NodeProp.jsmethod(\"\") ,",
               "\t\t-1,  ",
               "\t\ttrue",
               "\t);",
               "   ",
               " ",
               "}"
              ]
             },
             "tooltip_markup" : "Add a user function boolean property",
             "xtype" : "Button"
            },
            {
             "$ xns" : "Gtk",
             "label" : "Vala Method",
             "listeners" : {
              "activate" : [
               "  ( ) =>{",
               "",
               "    _this.view.popover.show(",
               "\t\t_this.view.el, ",
               "\t\t_this.node, ",
               "\t\t new JsRender.NodeProp.valamethod(\"\") ,",
               "\t\t-1,  ",
               "\t\ttrue",
               "\t); ",
               "}"
              ]
             },
             "tooltip_markup" : "Add a user function boolean property",
             "xtype" : "Button"
            },
            {
             "$ xns" : "Gtk",
             "label" : "Vala Signal",
             "listeners" : {
              "activate" : [
               "  ( ) =>{",
               "  _this.view.popover.show(",
               "\t\t_this.view.el, ",
               "\t\t_this.node, ",
               "\t\t new JsRender.NodeProp.sig(\"\" ) ,",
               "\t\t-1,  ",
               "\t\ttrue",
               "\t);    ",
               "}"
              ]
             },
             "tooltip_markup" : "Add a vala signal",
             "xtype" : "Button"
            },
            {
             "$ Gtk.Orientation orientation" : "Gtk.Orientation.HORIZONTAL",
             "$ xns" : "Gtk",
             "xtype" : "Separator"
            },
            {
             "$ xns" : "Gtk",
             "label" : "Flexy - If",
             "listeners" : {
              "activate" : [
               "  ( ) =>{",
               " \t_this.view.popover.show(",
               "\t\t_this.view.el, ",
               "\t\t_this.node, ",
               "\t\t new JsRender.NodeProp.prop(\"flexy:if\", \"string\", \"value_or_condition\") ,",
               "\t\t-1,  ",
               "\t\ttrue",
               "\t);",
               "",
               "",
               "}"
              ]
             },
             "tooltip_markup" : "Add a flexy if (for HTML templates)",
             "xtype" : "Button"
            },
            {
             "$ xns" : "Gtk",
             "label" : "Flexy - Include",
             "listeners" : {
              "activate" : [
               "  ( ) =>{",
               " \t_this.view.popover.show(",
               "\t\t_this.view.el, ",
               "\t\t_this.node, ",
               "\t\t new JsRender.NodeProp.prop(\"flexy:include\", \"string\", \"name_of_file.html\") ,",
               "\t\t-1,  ",
               "\t\ttrue",
               "\t);",
               "",
               "  ",
               "}"
              ]
             },
             "tooltip_markup" : "Add a flexy include (for HTML templates)",
             "xtype" : "Button"
            },
            {
             "$ xns" : "Gtk",
             "label" : "Flexy - Foreach",
             "listeners" : {
              "activate" : [
               "  ( ) =>{",
               " \t_this.view.popover.show(",
               "\t\t_this.view.el, ",
               "\t\t_this.node, ",
               "\t\t new JsRender.NodeProp.prop(\"flexy:if\", \"string\", \"value_or_condition\") ,",
               "\t\t-1,  ",
               "\t\ttrue",
               "\t);",
               "  ",
               "}"
              ]
             },
             "tooltip_markup" : "Add a flexy include (for HTML templates)",
             "xtype" : "Button"
            }
           ],
           "xtype" : "Box"
          }
         ],
         "xtype" : "Popover"
        }
       ],
       "listeners" : {
        "activate" : [
         "( ) => {",
         "  //_this.before_edit();",
         "  ",
         "        ",
         "    var p = _this.AddPropertyPopup;",
         "    ",
         " \tGtk.Allocation rect;",
         "\tthis.el.get_allocation(out rect);",
         "\tp.el.set_autohide(true); ",
         "\tp.el.set_parent(this.el);",
         "    p.el.set_pointing_to(rect);",
         "\tp.el.show();",
         "\tp.el.set_position(Gtk.PositionType.BOTTOM);",
         "",
         "     return;",
         "",
         "}",
         ""
        ]
       },
       "string icon_name" : "list-add",
       "string label" : "Other",
       "xtype" : "Button"
      }
     ],
     "xtype" : "Box"
    },
    {
     "# bool editing" : false,
     "$ shadow_type" : "Gtk.ShadowType.IN",
     "$ xns" : "Gtk",
     "* init" : [
      "  {",
      "  ",
      "   this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);",
      "}",
      ""
     ],
     "bool hexpand" : true,
     "bool vexpand" : true,
     "id" : "EditProps",
     "items" : [
      {
       "$ enable_tree_lines" : true,
       "$ headers_visible" : true,
       "$ xns" : "Gtk",
       "* init" : [
        "{",
        "   // var selection = this.el.get_selection();",
        "   // selection.set_mode( Gtk.SelectionMode.SINGLE);",
        "",
        "",
        "  \tthis.css = new Gtk.CssProvider();",
        "\ttry {",
        "\t\tthis.css.load_from_data(\"#leftprops-view { font-size: 10px;}\".data);",
        "\t} catch (Error e) {}",
        "\tthis.el.get_style_context().add_provider(this.css,",
        "\tGtk.STYLE_PROVIDER_PRIORITY_APPLICATION);",
        "    ",
        "  ",
        "}",
        ""
       ],
       "* pack" : "set_child",
       "Gtk.CssProvider css" : "",
       "Xcls_PopoverProperty popover" : "null",
       "bool hexpand" : true,
       "bool vexpand" : true,
       "id" : "view",
       "items" : [
        {
         "$ xns" : "Gtk",
         "listeners" : {
          "pressed" : [
           "(n_press, in_x, in_y) => {",
           "",
           "\t",
           "\tthis.el.set_state(Gtk.EventSequenceState.CLAIMED);",
           "\tGtk.TreeViewColumn col;",
           "    int cell_x;",
           "    int cell_y;",
           "    int x;",
           "    int y;",
           "    ",
           "    Gtk.TreePath path;",
           "    /*",
           "    _this.view.el.convert_widget_to_bin_window_coords((int)in_x, (int)in_y, out x, out y);",
           "    ",
           "    // event x /y are relative to the widget..",
           "    if (!_this.view.el.get_path_at_pos((int)x, (int)y, out path, out col, out cell_x, out cell_y )) {",
           "        GLib.debug(\"nothing selected on click\");",
           "        GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {",
           "            _this.view.el.get_selection().unselect_all();",
           "            return false;",
           "        });",
           "         _this.before_edit();",
           "        return; //not on a element.",
           "    }",
           "    */",
           "    GLib.debug(\"treepath selected: FIXME\"); ",
           "    ",
           "      //GLib.debug(\"treepath selected: %s\",path.to_string()); ",
           "      return;",
           "     // single click on name..",
           "     //if (ev.type == Gdk.EventType.2BUTTON_PRESS  && ev.button == 1 && col.title == \"Name\") {    ",
           "     if (this.el.get_current_button() == 1 && col.title == \"Property\") {    ",
           "     \t// need to shift down, as ev.y does not inclucde header apparently..",
           "     \t// or popover might be trying to do a central?",
           "        _this.view.editPropertyDetails(path, (int) y + 12); ",
           "         ",
           "        return;",
           "    }",
           "    ",
           "    /*",
           "    ",
           "    ",
           "     // right click.",
           "     if (this.el.get_current_button() == 3) {    ",
           "        // show popup!.   ",
           "        //if (col.title == \"Value\") {",
           "         //     _this.before_edit();",
           "         //    return false;",
           "         //}",
           "",
           "        var p = _this.ContextMenu;",
           "\t\tp.el.set_parent(_this.view.el);",
           " ",
           "        p.el.show();",
           "        ",
           "          var  r = Gdk.Rectangle() {",
           "    \t\t\tx = (int) x, // align left...",
           "    \t\t\ty = (int) y,",
           "    \t\t\twidth = 1,",
           "    \t\t\theight = 1",
           "    \t\t};",
           "\t\t p.el.set_pointing_to( r);",
           "",
           "        //Seed.print(\"click:\" + res.column.title);",
           "        // select the ",
           "        GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {",
           "  ",
           "            _this.view.el.get_selection().select_path(path);",
           "            return false;",
           "        });",
           "         _this.before_edit();",
           "        return;",
           "    }",
           "    ",
           "     ",
           "    if (col.title != \"Value\") {",
           "        GLib.debug(\"col title != Value\");",
           "        ",
           "        GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {",
           "            _this.view.el.get_selection().select_path(path);",
           "            return false;",
           "        });",
           "        ",
           "        _this.before_edit();",
           "          //  XObject.error(\"column is not value?\");",
           "        return; // ignore.. - key click.. ??? should we do this??",
           "    }",
           "    ",
           "    ",
           "    // if the cell can be edited with a pulldown",
           "    // then we should return true... - and let the start_editing handle it?",
           "    ",
           "    ",
           "    ",
           "    ",
           "    ",
           "      ",
           "   //             _this.before_edit(); <<< we really need to stop the other editor..",
           "     _this.keyrender.el.stop_editing(false);",
           "    _this.keyrender.el.editable  =false;",
           "    ",
           "           ",
           "     _this.startEditingValue(path); // assumes selected row..",
           "        */",
           "}",
           ""
          ]
         },
         "xtype" : "GestureClick"
        },
        {
         "$ xns" : "Gtk",
         "* prop" : "model",
         "items" : [
          {
           "$ xns" : "GLib",
           "* ctor" : "new GLib.ListStore(typeof(JsRender.NodeProp))",
           "* prop" : "model",
           "id" : "model",
           "xtype" : "ListStore"
          }
         ],
         "xtype" : "NoSelection"
        },
        {
         "$ Gtk.TreeViewColumnSizing sizing" : "Gtk.TreeViewColumnSizing.FIXED",
         "$ resizable" : true,
         "$ xns" : "Gtk",
         "* init" : [
          " //this.el.add_attribute(_this.keyrender.el , \"markup\", 1 ); // 1 is the key.",
          " //this.el.add_attribute(_this.keyrender.el , \"text\", 1 );",
          "  "
         ],
         "* pack" : "append_column",
         "bool expand" : true,
         "id" : "keycol",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "factory",
           "listeners" : {
            "bind" : [
             "(listitem) => {",
             " var lb = (Gtk.Label) ((Gtk.ListItem)listitem).get_child();",
             " var item = (JsRender.NodeProp) ((Gtk.ListItem)listitem).get_item();",
             "",
             "",
             "// was item (1) in old layout",
             "lb.set_markup(item.to_display_name());",
             "",
             "}",
             ""
            ],
            "setup" : [
             "(listitem) => {",
             "\tvar lbl = new Gtk.Label(\"\");",
             " \tlistitem.set_child(lbl);",
             " \tlbl.justify = Gtk.Justification.LEFT;",
             " \tlbl.xalign = 0;",
             " \t/*lbl.changed.connect(() => {",
             "\t\t// notify and save the changed value...",
             "\t \t//var prop = (JsRender.NodeProp) ((Gtk.ListItem)listitem.get_item());",
             "         ",
             "        //prop.val = lbl.text;",
             "        //_this.updateIter(iter,prop);",
             "        _this.changed();",
             "\t});",
             "\t*/",
             "\tlistitem.activatable = true;",
             "}",
             ""
            ]
           },
           "xtype" : "SignalListItemFactory"
          }
         ],
         "title" : "Property",
         "xtype" : "ColumnViewColumn"
        },
        {
         "$ Gtk.TreeViewColumnSizing sizing" : "Gtk.TreeViewColumnSizing.FIXED",
         "$ resizable" : true,
         "$ xns" : "Gtk",
         "* init" : [
          "{",
          "\t",
          " ",
          "",
          "\t",
          "\t//this.el.add_attribute(_this.valrender.el , \"text\", 2 );",
          " ",
          "}",
          ""
         ],
         "* pack" : "append_column",
         "bool expand" : true,
         "id" : "valcol",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "factory",
           "listeners" : {
            "bind" : [
             "(listitem) => {",
             "\tvar bx = (Gtk.Box) ((Gtk.ListItem)listitem).get_child();",
             " \tvar prop = (JsRender.NodeProp) ((Gtk.ListItem)listitem).get_item();",
             "\t",
             "\tvar lbl = (Gtk.EditableLabel)bx.get_first_child();",
             "\tvar cb  = (Gtk.DropDown)bx.get_last_child();",
             "\t// decide if it's a combo or editable text..",
             "\t",
             "\tvar model = (GLib.ListStore) cb.model;",
             " ",
             "",
             "    var use_textarea = false;",
             "",
             "    //------------ things that require the text editor...",
             "    ",
             "    if (prop.ptype == JsRender.NodePropType.LISTENER) {",
             "        use_textarea = true;",
             "    }",
             "    if (prop.ptype == JsRender.NodePropType.METHOD) { ",
             "        use_textarea = true;",
             "    }",
             "        ",
             "    if ( prop.name == \"init\" && prop.ptype == JsRender.NodePropType.SPECIAL) {",
             "        use_textarea = true;",
             "    }",
             "    if (prop.val.length > 40) { // long value...",
             "        use_textarea = true;",
             "    }",
             "    var pal = _this.file.project.palete;",
             "        ",
             "    string[] opts;",
             "    var has_opts = pal.typeOptions(_this.node.fqn(), prop.name, prop.rtype, out opts);",
             "    ",
             "    if (!has_opts && prop.ptype == JsRender.NodePropType.RAW) {",
             "      \tuse_textarea = true;",
             "    }",
             "  /*   ",
             "    ",
             "    if (use_textarea) {",
             "        GLib.debug(\"Call show editor\\n\");",
             "        GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {",
             "        \t//",
             "            //this.view.el.get_selection().select_path(path);",
             "            ",
             "            this.show_editor(file, node, prop);",
             "            ",
             "            return false;",
             "        });",
             "       ",
             "        ",
             "        return false;",
             "    }",
             "    */",
             "        ",
             "        ",
             "        ",
             "        ",
             "        // others... - fill in options for true/false?",
             "           // GLib.debug (ktype.up());",
             "        if (has_opts) {",
             "               lbl.hide();",
             "               cb.show();",
             "                model.remove_all();",
             "                var sel = -1;",
             "                for(var i = 0; i < opts.length; i ++) {",
             "                \tmodel.append((GLib.Object) opts[i]);",
             "                \tif (opts[i] == prop.val) {",
             "                \t \tsel = i;",
             "            \t \t}",
             "            \t}",
             "            \tcb.set_selected(sel > -1 ? sel : Gtk.INVALID_LIST_POSITION); ",
             "                return ;",
             "        }",
             "                                  ",
             "           // see if type is a Enum.",
             "           ",
             "         lbl.set_text(prop.val);",
             "\t\tlbl.show();",
             "\t\tcb.hide();",
             "\t",
             "\t",
             "\t",
             " ",
             "",
             "}",
             ""
            ],
            "setup" : [
             "(listitem) => {",
             "\tvar hb = new Gtk.Box(Gtk.Orientation.HORIZONTAL,0);",
             "\tvar lbl  = new Gtk.EditableLabel(\"\");",
             "\thb.append(lbl);",
             "\tvar cb = new Gtk.DropDown(new GLib.ListStore(typeof(string)), null);",
             "\thb.append(cb);",
             "\tlistitem.set_child(hb);",
             "\t ",
             "\tlbl.changed.connect(() => {",
             "\t\t// notify and save the changed value...",
             "\t \tvar prop = (JsRender.NodeProp) ((Gtk.ListItem)listitem).get_item();",
             "         ",
             "        prop.val = lbl.text;",
             "        //_this.updateIter(iter,prop);",
             "        _this.changed();",
             "\t});",
             "\t",
             "\tcb.notify[\"selected\"].connect(() => {",
             "\t\t// dropdown selection changed.",
             "\t\t",
             "        var prop = (JsRender.NodeProp) ((Gtk.ListItem)listitem).get_item();",
             "        ",
             "        prop.val = (string) cb.selected_item;",
             "        //_this.updateIter(iter,prop);",
             "        _this.changed();",
             "\t\t",
             "\t});",
             "\t",
             "}",
             ""
            ]
           },
           "xtype" : "SignalListItemFactory"
          }
         ],
         "title" : "Value",
         "xtype" : "ColumnViewColumn"
        },
        {
         "$ xns" : "Gtk",
         "* pack" : false,
         "id" : "ContextMenu",
         "items" : [
          {
           "$ xns" : "Gtk",
           "* prop" : "child",
           "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
           "int spacing" : 0,
           "items" : [
            {
             "$ xns" : "Gtk",
             "label" : "Delete",
             "listeners" : {
              "activate" : [
               "  ( )  =>{",
               "\t_this.deleteSelected();",
               "\t",
               "}"
              ]
             },
             "xtype" : "Button"
            }
           ],
           "xtype" : "Box"
          }
         ],
         "xtype" : "Popover"
        }
       ],
       "string name" : "leftprops-view",
       "tooltip_column" : 3,
       "xtype" : "ColumnView",
       "| void editPropertyDetails" : [
        "(Gtk.TreePath path, int y) {",
        "",
        "    ",
        "\t",
        "",
        "    // _this.before_edit();",
        "      _this.stop_editor();",
        "\t  ",
        "    /* _this.keyrender.el.stop_editing(false);",
        "     _this.keyrender.el.editable  =false;",
        "",
        "     _this.valrender.el.stop_editing(false);",
        "     _this.valrender.el.editable  =false;",
        "     Gtk.TreeIter iter;",
        "      var mod = this.el.get_model();",
        "\t  mod.get_iter (out iter, path);",
        "\t  ",
        "   ",
        "\tGLib.Value gval;",
        "",
        "     mod.get_value(iter,0, out gval);",
        "",
        "    this.popover.show(_this.view.el, _this.node, (JsRender.NodeProp)gval,   y);",
        "      */ ",
        "    ",
        "}",
        ""
       ]
      }
     ],
     "xtype" : "ScrolledWindow"
    }
   ],
   "xtype" : "Box",
   "| string keyFormat" : [
    "(string val, string type) {",
    "    ",
    "    // Glib.markup_escape_text(val);",
    "",
    "    if (type == \"listener\") {",
    "        return \"<span font_weight=\\\"bold\\\" color=\\\"#660000\\\">\" + ",
    "            GLib.Markup.escape_text(val) +",
    "             \"</span>\";",
    "    }",
    "    // property..",
    "    if (val.length < 1) {",
    "        return \"<span  color=\\\"#FF0000\\\">--empty--</span>\";",
    "    }",
    "    ",
    "    //@ = signal",
    "    //$ = property with ",
    "    //# - object properties",
    "    //* = special",
    "    // all of these... - display value is last element..",
    "    var ar = val.strip().split(\" \");",
    "    ",
    "    ",
    "    var dval = GLib.Markup.escape_text(ar[ar.length-1]);",
    "    ",
    "    ",
    "    ",
    "    ",
    "    switch(val[0]) {",
    "        case '@': // signal // just bold balck?",
    "            if (dval[0] == '@') {",
    "                dval = dval.substring(1);",
    "            }",
    "        ",
    "            return @\"<span  font_weight=\\\"bold\\\">@ $dval</span>\";        ",
    "        case '#': // object properties?",
    "            if (dval[0] == '#') {",
    "                dval = dval.substring(1);",
    "            }",
    "            return @\"<span  font_weight=\\\"bold\\\">$dval</span>\";",
    "        case '*': // special",
    "            if (dval[0] == '*') {",
    "                dval = dval.substring(1);",
    "            }",
    "            return @\"<span   color=\\\"#0000CC\\\" font_weight=\\\"bold\\\">$dval</span>\";            ",
    "        case '$':",
    "            if (dval[0] == '$') {",
    "                dval = dval.substring(1);",
    "            }",
    "            return @\"<span   style=\\\"italic\\\">$dval</span>\";",
    "       case '|': // user defined methods",
    "            if (dval[0] == '|') {",
    "                dval = dval.substring(1);",
    "            }",
    "            return @\"<span color=\\\"#008000\\\" font_weight=\\\"bold\\\">$dval</span>\";",
    "            ",
    "              ",
    "            ",
    "        default:",
    "            return dval;",
    "    }",
    "      ",
    "    ",
    "",
    "}"
   ],
   "| string keySortFormat" : [
    "(string key) {",
    "    // listeners first - with 0",
    "    // specials",
    "    if (key[0] == '*') {",
    "        return \"1 \" + key;",
    "    }",
    "    // functions",
    "    ",
    "    var bits = key.split(\" \");",
    "    ",
    "    if (key[0] == '|') {",
    "        return \"2 \" + bits[bits.length -1];",
    "    }",
    "    // signals",
    "    if (key[0] == '@') {",
    "        return \"3 \" + bits[bits.length -1];",
    "    }",
    "        ",
    "    // props",
    "    if (key[0] == '#') {",
    "        return \"4 \" + bits[bits.length -1];",
    "    }",
    "    // the rest..",
    "    return \"5 \" + bits[bits.length -1];    ",
    "",
    "",
    "",
    "}"
   ],
   "| void addProp" : [
    " (JsRender.NodeProp prop) {",
    "      // info includes key, val, skel, etype..",
    "      //console.dump(info);",
    "        //type = info.type.toLowerCase();",
    "        //var data = this.toJS();",
    "          ",
    "              ",
    "    if (prop.ptype == JsRender.NodePropType.LISTENER) {",
    "        if (this.node.listeners.has_key(prop.name)) {",
    "            return;",
    "        }",
    "        this.node.listeners.set(prop.name,prop);",
    "    } else  {",
    "         assert(this.node != null);",
    "         assert(this.node.props != null);",
    "        if (this.node.props.has_key(prop.to_index_key())) {",
    "            return;",
    "        }",
    "        this.node.props.set(prop.to_index_key(),prop);",
    "    }",
    "            ",
    "      ",
    "    // add a row???",
    "    this.load(this.file, this.node);",
    "    ",
    "    ",
    "    ",
    "    /// need to find the row which I've just added..",
    "    ",
    "    ",
    "    //var s = this.view.el.get_selection();",
    "    //s.unselect_all();",
    "    ",
    "    GLib.debug(\"trying to find new iter\");",
    "  /*",
    "    this.model.el.foreach((model, path, iter) => {",
    "        GLib.Value gval;",
    "        this.model.el.get_value(iter, 0 , out gval);",
    "        ",
    "        var iprop = (JsRender.NodeProp)gval;",
    "        if (iprop.to_index_key() != prop.to_index_key()) {",
    "        \treturn false; // continue?",
    "        }",
    "        ",
    "        // delay this?",
    "        GLib.Timeout.add_full(GLib.Priority.DEFAULT,40 , () => {",
    "        \t ",
    "        \t",
    "            this.startEditingValue(this.model.el.get_path(iter));",
    "            return false;",
    "        });",
    "        //s.select_iter(iter);",
    "        return true; ",
    "    });",
    "    */",
    "    ",
    "    ",
    "              ",
    "}",
    ""
   ],
   "| void deleteSelected" : [
    " () {",
    "    ",
    "\t\treturn;",
    "\t\t/*",
    "        ",
    "        Gtk.TreeIter iter;",
    "        Gtk.TreeModel mod;",
    "        ",
    "        var s = this.view.el.get_selection();",
    "        s.get_selected(out mod, out iter);",
    "             ",
    "              ",
    "        GLib.Value gval;",
    "        mod.get_value(iter, 0 , out gval);",
    "        var prop = (JsRender.NodeProp)gval;",
    "        if (prop == null) {",
    "\t        this.load(this.file, this.node);    ",
    "        \treturn;",
    "    \t}",
    "    \t// stop editor after fetching property - otherwise prop is null.",
    "        this.stop_editor();",
    "        ",
    "            \t",
    "        switch(prop.ptype) {",
    "            case JsRender.NodePropType.LISTENER:",
    "                this.node.listeners.unset(prop.to_index_key());",
    "                break;",
    "                ",
    "            default:",
    "                this.node.props.unset(prop.to_index_key());",
    "                break;",
    "        }",
    "        this.load(this.file, this.node);",
    "        ",
    "        _this.changed();",
    "        */",
    "}"
   ],
   "| void load" : [
    "(JsRender.JsRender file, JsRender.Node? node) ",
    "{",
    "\t// not sure when to initialize this - we should do it on setting main window really.    ",
    "    if (this.view.popover == null) {",
    " \t\t   this.view.popover = new Xcls_PopoverProperty();",
    " \t\t   this.view.popover.mainwindow = _this.main_window;",
    "\t}",
    "    ",
    "    ",
    "    ",
    "    ",
    "    GLib.debug(\"load leftprops\\n\");",
    "",
    "    this.node = node;",
    "    this.file = file;",
    "    ",
    " ",
    "    this.model.el.remove_all();",
    "              ",
    "    //this.get('/RightEditor').el.hide();",
    "    if (node ==null) {",
    "        return ;",
    "    }",
    "     ",
    "     ",
    "    ",
    "    // really need a way to sort the hashmap...",
    "    var m = this.model.el;",
    "    ",
    "    var miter = node.listeners.map_iterator();",
    "    var i = 0;",
    "    ",
    "    while(miter.next()) {",
    "       ",
    "        m.append(miter.get_value()); ",
    "         ",
    "     }",
    "     ",
    "      ",
    "    miter = node.props.map_iterator();",
    "    ",
    "    ",
    "   while(miter.next()) {",
    "        m.append(miter.get_value());",
    "         ",
    "   }",
    "   GLib.debug(\"clear selection\\n\");",
    "   // clear selection?",
    "  //this.model.el.set_sort_column_id(4,Gtk.SortType.ASCENDING); // sort by real key..",
    "   ",
    "   // this.view.el.get_selection().unselect_all();",
    "   ",
    "  // _this.keycol.el.set_max_width(_this.EditProps.el.get_allocated_width()/ 2);",
    "  // _this.valcol.el.set_max_width(_this.EditProps.el.get_allocated_width()/ 2);",
    "   ",
    "}",
    ""
   ],
   "| void reload" : [
    "() {",
    "\tthis.load(this.file, this.node);",
    "}",
    ""
   ]
  }
 ],
 "modOrder" : "",
 "name" : "WindowLeftProps",
 "parent" : "",
 "path" : "/home/alan/gitlive/roobuilder/src/Builder4/WindowLeftProps.bjs",
 "permname" : "",
 "title" : ""
}